
class dict:
  dictionary={

"__assert_fail":["void","(char const *, char const *, unsigned int, char const *)"],
"__assert_perror_fail":["void","(int, char const *, unsigned int, char const *)"],
"__assert":["void","(char const *, char const *, int)"],
"__ctype_b_loc":["const unsigned short **","()"],
"__ctype_tolower_loc":["const __int32_t **","()"],
"__ctype_toupper_loc":["const __int32_t **","()"],
"isalnum":["int","(int)"],
"isalpha":["int","(int)"],
"iscntrl":["int","(int)"],
"isdigit":["int","(int)"],
"islower":["int","(int)"],
"isgraph":["int","(int)"],
"isprint":["int","(int)"],
"ispunct":["int","(int)"],
"isspace":["int","(int)"],
"isupper":["int","(int)"],
"isxdigit":["int","(int)"],
"tolower":[("int","(int)"),("std::__ctype_abstract_base::char_type","(std::__ctype_abstract_base::char_type)"),("const std::__ctype_abstract_base::char_type *","(std::__ctype_abstract_base::char_type *, const std::__ctype_abstract_base::char_type *)"),("std::ctype<char>::char_type","(std::ctype<char>::char_type)"),("const std::ctype<char>::char_type *","(std::ctype<char>::char_type *, const std::ctype<char>::char_type *)")],
"toupper":[("int","(int)"),("std::__ctype_abstract_base::char_type","(std::__ctype_abstract_base::char_type)"),("const std::__ctype_abstract_base::char_type *","(std::__ctype_abstract_base::char_type *, const std::__ctype_abstract_base::char_type *)"),("std::ctype<char>::char_type","(std::ctype<char>::char_type)"),("const std::ctype<char>::char_type *","(std::ctype<char>::char_type *, const std::ctype<char>::char_type *)")],
"isblank":["int","(int)"],
"isctype":[("int","(int, int)"),("bool","(_Ch_type, std::__cxx11::regex_traits::char_class_type)")],
"isascii":["int","(int)"],
"toascii":["int","(int)"],
"_toupper":["int","(int)"],
"_tolower":["int","(int)"],
"isalnum_l":["int","(int, locale_t)"],
"isalpha_l":["int","(int, locale_t)"],
"iscntrl_l":["int","(int, locale_t)"],
"isdigit_l":["int","(int, locale_t)"],
"islower_l":["int","(int, locale_t)"],
"isgraph_l":["int","(int, locale_t)"],
"isprint_l":["int","(int, locale_t)"],
"ispunct_l":["int","(int, locale_t)"],
"isspace_l":["int","(int, locale_t)"],
"isupper_l":["int","(int, locale_t)"],
"isxdigit_l":["int","(int, locale_t)"],
"isblank_l":["int","(int, locale_t)"],
"__tolower_l":["int","(int, locale_t)"],
"tolower_l":["int","(int, locale_t)"],
"__toupper_l":["int","(int, locale_t)"],
"toupper_l":["int","(int, locale_t)"],
"__errno_location":["int *","()"],
"__sysconf":["long","(int)"],
"setlocale":["char *","(int, char const *)"],
"localeconv":["struct lconv *","()"],
"newlocale":["locale_t","(int, char const *, locale_t)"],
"duplocale":["locale_t","(locale_t)"],
"freelocale":["void","(locale_t)"],
"uselocale":["locale_t","(locale_t)"],
"__is_null_pointer":["bool","(std::nullptr_t)"],
"__fpclassify":["int","(double)"],
"__signbit":["int","(double)"],
"__isinf":["int","(double)"],
"__finite":["int","(double)"],
"__isnan":["int","(double)"],
"__iseqsig":["int","(double, double)"],
"__issignaling":["int","(double)"],
"acos":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__acos":["double","(double)"],
"asin":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__asin":["double","(double)"],
"atan":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__atan":["double","(double)"],
"atan2":[("double","(double, double)"),("float","(float, float)"),("long double","(long double, long double)")],
"__atan2":["double","(double, double)"],
"cos":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__cos":["double","(double)"],
"sin":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__sin":["double","(double)"],
"tan":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__tan":["double","(double)"],
"cosh":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__cosh":["double","(double)"],
"sinh":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__sinh":["double","(double)"],
"tanh":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__tanh":["double","(double)"],
"sincos":["void","(double, double *, double *)"],
"__sincos":["void","(double, double *, double *)"],
"acosh":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__acosh":["double","(double)"],
"asinh":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__asinh":["double","(double)"],
"atanh":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__atanh":["double","(double)"],
"exp":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__exp":["double","(double)"],
"frexp":[("double","(double, int *)"),("float","(float, int *)"),("long double","(long double, int *)")],
"__frexp":["double","(double, int *)"],
"ldexp":[("double","(double, int)"),("float","(float, int)"),("long double","(long double, int)")],
"__ldexp":["double","(double, int)"],
"log":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__log":["double","(double)"],
"log10":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__log10":["double","(double)"],
"modf":[("double","(double, double *)"),("float","(float, float *)"),("long double","(long double, long double *)")],
"__modf":["double","(double, double *)"],
"exp10":["double","(double)"],
"__exp10":["double","(double)"],
"expm1":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__expm1":["double","(double)"],
"log1p":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__log1p":["double","(double)"],
"logb":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__logb":["double","(double)"],
"exp2":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__exp2":["double","(double)"],
"log2":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__log2":["double","(double)"],
"pow":[("double","(double, double)"),("float","(float, float)"),("long double","(long double, long double)")],
"__pow":["double","(double, double)"],
"sqrt":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__sqrt":["double","(double)"],
"hypot":[("double","(double, double)"),("float","(float, float)"),("long double","(long double, long double)")],
"__hypot":["double","(double, double)"],
"cbrt":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__cbrt":["double","(double)"],
"ceil":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__ceil":["double","(double)"],
"fabs":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__fabs":["double","(double)"],
"floor":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__floor":["double","(double)"],
"fmod":[("double","(double, double)"),("float","(float, float)"),("long double","(long double, long double)")],
"__fmod":["double","(double, double)"],
"finite":["int","(double)"],
"drem":["double","(double, double)"],
"__drem":["double","(double, double)"],
"significand":["double","(double)"],
"__significand":["double","(double)"],
"copysign":[("double","(double, double)"),("float","(float, float)"),("long double","(long double, long double)")],
"__copysign":["double","(double, double)"],
"nan":["double","(char const *)"],
"__nan":["double","(char const *)"],
"j0":["double","(double)"],
"__j0":["double","(double)"],
"j1":["double","(double)"],
"__j1":["double","(double)"],
"jn":["double","(int, double)"],
"__jn":["double","(int, double)"],
"y0":["double","(double)"],
"__y0":["double","(double)"],
"y1":["double","(double)"],
"__y1":["double","(double)"],
"yn":["double","(int, double)"],
"__yn":["double","(int, double)"],
"erf":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__erf":["double","(double)"],
"erfc":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__erfc":["double","(double)"],
"lgamma":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__lgamma":["double","(double)"],
"tgamma":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__tgamma":["double","(double)"],
"gamma":["double","(double)"],
"__gamma":["double","(double)"],
"lgamma_r":["double","(double, int *)"],
"__lgamma_r":["double","(double, int *)"],
"rint":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__rint":["double","(double)"],
"nextafter":[("double","(double, double)"),("float","(float, float)"),("long double","(long double, long double)")],
"__nextafter":["double","(double, double)"],
"nexttoward":[("double","(double, long double)"),("float","(float, long double)"),("long double","(long double, long double)")],
"__nexttoward":["double","(double, long double)"],
"nextdown":["double","(double)"],
"__nextdown":["double","(double)"],
"nextup":["double","(double)"],
"__nextup":["double","(double)"],
"remainder":[("double","(double, double)"),("float","(float, float)"),("long double","(long double, long double)")],
"__remainder":["double","(double, double)"],
"scalbn":[("double","(double, int)"),("float","(float, int)"),("long double","(long double, int)")],
"__scalbn":["double","(double, int)"],
"ilogb":"int",
"__ilogb":["int","(double)"],
"llogb":["long","(double)"],
"__llogb":["long","(double)"],
"scalbln":[("double","(double, long)"),("float","(float, long)"),("long double","(long double, long)")],
"__scalbln":["double","(double, long)"],
"nearbyint":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__nearbyint":["double","(double)"],
"round":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__round":["double","(double)"],
"trunc":[("double","(double)"),("float","(float)"),("long double","(long double)")],
"__trunc":["double","(double)"],
"remquo":[("double","(double, double, int *)"),("float","(float, float, int *)"),("long double","(long double, long double, int *)")],
"__remquo":["double","(double, double, int *)"],
"lrint":"long",
"__lrint":["long","(double)"],
"llrint":"long long",
"__llrint":["long long","(double)"],
"lround":"long",
"__lround":["long","(double)"],
"llround":"long long",
"__llround":["long long","(double)"],
"fdim":[("double","(double, double)"),("float","(float, float)"),("long double","(long double, long double)")],
"__fdim":["double","(double, double)"],
"fmax":[("double","(double, double)"),("float","(float, float)"),("long double","(long double, long double)")],
"__fmax":["double","(double, double)"],
"fmin":[("double","(double, double)"),("float","(float, float)"),("long double","(long double, long double)")],
"__fmin":["double","(double, double)"],
"fma":[("double","(double, double, double)"),("float","(float, float, float)"),("long double","(long double, long double, long double)")],
"__fma":["double","(double, double, double)"],
"roundeven":["double","(double)"],
"__roundeven":["double","(double)"],
"fromfp":["__intmax_t","(double, int, unsigned int)"],
"__fromfp":["__intmax_t","(double, int, unsigned int)"],
"ufromfp":["__uintmax_t","(double, int, unsigned int)"],
"__ufromfp":["__uintmax_t","(double, int, unsigned int)"],
"fromfpx":["__intmax_t","(double, int, unsigned int)"],
"__fromfpx":["__intmax_t","(double, int, unsigned int)"],
"ufromfpx":["__uintmax_t","(double, int, unsigned int)"],
"__ufromfpx":["__uintmax_t","(double, int, unsigned int)"],
"canonicalize":["int","(double *, const double *)"],
"fmaxmag":["double","(double, double)"],
"__fmaxmag":["double","(double, double)"],
"fminmag":["double","(double, double)"],
"__fminmag":["double","(double, double)"],
"fmaximum":["double","(double, double)"],
"__fmaximum":["double","(double, double)"],
"fminimum":["double","(double, double)"],
"__fminimum":["double","(double, double)"],
"fmaximum_num":["double","(double, double)"],
"__fmaximum_num":["double","(double, double)"],
"fminimum_num":["double","(double, double)"],
"__fminimum_num":["double","(double, double)"],
"fmaximum_mag":["double","(double, double)"],
"__fmaximum_mag":["double","(double, double)"],
"fminimum_mag":["double","(double, double)"],
"__fminimum_mag":["double","(double, double)"],
"fmaximum_mag_num":["double","(double, double)"],
"__fmaximum_mag_num":["double","(double, double)"],
"fminimum_mag_num":["double","(double, double)"],
"__fminimum_mag_num":["double","(double, double)"],
"totalorder":["int","(const double *, const double *)"],
"totalordermag":["int","(const double *, const double *)"],
"getpayload":["double","(const double *)"],
"__getpayload":["double","(const double *)"],
"setpayload":["int","(double *, double)"],
"setpayloadsig":["int","(double *, double)"],
"scalb":["double","(double, double)"],
"__scalb":["double","(double, double)"],
"__fpclassifyf":["int","(float)"],
"__signbitf":["int","(float)"],
"__isinff":["int","(float)"],
"__finitef":["int","(float)"],
"__isnanf":["int","(float)"],
"__iseqsigf":["int","(float, float)"],
"__issignalingf":["int","(float)"],
"acosf":["float","(float)"],
"__acosf":["float","(float)"],
"asinf":["float","(float)"],
"__asinf":["float","(float)"],
"atanf":["float","(float)"],
"__atanf":["float","(float)"],
"atan2f":["float","(float, float)"],
"__atan2f":["float","(float, float)"],
"cosf":["float","(float)"],
"__cosf":["float","(float)"],
"sinf":["float","(float)"],
"__sinf":["float","(float)"],
"tanf":["float","(float)"],
"__tanf":["float","(float)"],
"coshf":["float","(float)"],
"__coshf":["float","(float)"],
"sinhf":["float","(float)"],
"__sinhf":["float","(float)"],
"tanhf":["float","(float)"],
"__tanhf":["float","(float)"],
"sincosf":["void","(float, float *, float *)"],
"__sincosf":["void","(float, float *, float *)"],
"acoshf":["float","(float)"],
"__acoshf":["float","(float)"],
"asinhf":["float","(float)"],
"__asinhf":["float","(float)"],
"atanhf":["float","(float)"],
"__atanhf":["float","(float)"],
"expf":["float","(float)"],
"__expf":["float","(float)"],
"frexpf":["float","(float, int *)"],
"__frexpf":["float","(float, int *)"],
"ldexpf":["float","(float, int)"],
"__ldexpf":["float","(float, int)"],
"logf":["float","(float)"],
"__logf":["float","(float)"],
"log10f":["float","(float)"],
"__log10f":["float","(float)"],
"modff":["float","(float, float *)"],
"__modff":["float","(float, float *)"],
"exp10f":["float","(float)"],
"__exp10f":["float","(float)"],
"expm1f":["float","(float)"],
"__expm1f":["float","(float)"],
"log1pf":["float","(float)"],
"__log1pf":["float","(float)"],
"logbf":["float","(float)"],
"__logbf":["float","(float)"],
"exp2f":["float","(float)"],
"__exp2f":["float","(float)"],
"log2f":["float","(float)"],
"__log2f":["float","(float)"],
"powf":["float","(float, float)"],
"__powf":["float","(float, float)"],
"sqrtf":["float","(float)"],
"__sqrtf":["float","(float)"],
"hypotf":["float","(float, float)"],
"__hypotf":["float","(float, float)"],
"cbrtf":["float","(float)"],
"__cbrtf":["float","(float)"],
"ceilf":["float","(float)"],
"__ceilf":["float","(float)"],
"fabsf":["float","(float)"],
"__fabsf":["float","(float)"],
"floorf":["float","(float)"],
"__floorf":["float","(float)"],
"fmodf":["float","(float, float)"],
"__fmodf":["float","(float, float)"],
"isinff":["int","(float)"],
"finitef":["int","(float)"],
"dremf":["float","(float, float)"],
"__dremf":["float","(float, float)"],
"significandf":["float","(float)"],
"__significandf":["float","(float)"],
"copysignf":["float","(float, float)"],
"__copysignf":["float","(float, float)"],
"nanf":["float","(char const *)"],
"__nanf":["float","(char const *)"],
"isnanf":["int","(float)"],
"j0f":["float","(float)"],
"__j0f":["float","(float)"],
"j1f":["float","(float)"],
"__j1f":["float","(float)"],
"jnf":["float","(int, float)"],
"__jnf":["float","(int, float)"],
"y0f":["float","(float)"],
"__y0f":["float","(float)"],
"y1f":["float","(float)"],
"__y1f":["float","(float)"],
"ynf":["float","(int, float)"],
"__ynf":["float","(int, float)"],
"erff":["float","(float)"],
"__erff":["float","(float)"],
"erfcf":["float","(float)"],
"__erfcf":["float","(float)"],
"lgammaf":["float","(float)"],
"__lgammaf":["float","(float)"],
"tgammaf":["float","(float)"],
"__tgammaf":["float","(float)"],
"gammaf":["float","(float)"],
"__gammaf":["float","(float)"],
"lgammaf_r":["float","(float, int *)"],
"__lgammaf_r":["float","(float, int *)"],
"rintf":["float","(float)"],
"__rintf":["float","(float)"],
"nextafterf":["float","(float, float)"],
"__nextafterf":["float","(float, float)"],
"nexttowardf":["float","(float, long double)"],
"__nexttowardf":["float","(float, long double)"],
"nextdownf":["float","(float)"],
"__nextdownf":["float","(float)"],
"nextupf":["float","(float)"],
"__nextupf":["float","(float)"],
"remainderf":["float","(float, float)"],
"__remainderf":["float","(float, float)"],
"scalbnf":["float","(float, int)"],
"__scalbnf":["float","(float, int)"],
"ilogbf":["int","(float)"],
"__ilogbf":["int","(float)"],
"llogbf":["long","(float)"],
"__llogbf":["long","(float)"],
"scalblnf":["float","(float, long)"],
"__scalblnf":["float","(float, long)"],
"nearbyintf":["float","(float)"],
"__nearbyintf":["float","(float)"],
"roundf":["float","(float)"],
"__roundf":["float","(float)"],
"truncf":["float","(float)"],
"__truncf":["float","(float)"],
"remquof":["float","(float, float, int *)"],
"__remquof":["float","(float, float, int *)"],
"lrintf":["long","(float)"],
"__lrintf":["long","(float)"],
"llrintf":["long long","(float)"],
"__llrintf":["long long","(float)"],
"lroundf":["long","(float)"],
"__lroundf":["long","(float)"],
"llroundf":["long long","(float)"],
"__llroundf":["long long","(float)"],
"fdimf":["float","(float, float)"],
"__fdimf":["float","(float, float)"],
"fmaxf":["float","(float, float)"],
"__fmaxf":["float","(float, float)"],
"fminf":["float","(float, float)"],
"__fminf":["float","(float, float)"],
"fmaf":["float","(float, float, float)"],
"__fmaf":["float","(float, float, float)"],
"roundevenf":["float","(float)"],
"__roundevenf":["float","(float)"],
"fromfpf":["__intmax_t","(float, int, unsigned int)"],
"__fromfpf":["__intmax_t","(float, int, unsigned int)"],
"ufromfpf":["__uintmax_t","(float, int, unsigned int)"],
"__ufromfpf":["__uintmax_t","(float, int, unsigned int)"],
"fromfpxf":["__intmax_t","(float, int, unsigned int)"],
"__fromfpxf":["__intmax_t","(float, int, unsigned int)"],
"ufromfpxf":["__uintmax_t","(float, int, unsigned int)"],
"__ufromfpxf":["__uintmax_t","(float, int, unsigned int)"],
"canonicalizef":["int","(float *, const float *)"],
"fmaxmagf":["float","(float, float)"],
"__fmaxmagf":["float","(float, float)"],
"fminmagf":["float","(float, float)"],
"__fminmagf":["float","(float, float)"],
"fmaximumf":["float","(float, float)"],
"__fmaximumf":["float","(float, float)"],
"fminimumf":["float","(float, float)"],
"__fminimumf":["float","(float, float)"],
"fmaximum_numf":["float","(float, float)"],
"__fmaximum_numf":["float","(float, float)"],
"fminimum_numf":["float","(float, float)"],
"__fminimum_numf":["float","(float, float)"],
"fmaximum_magf":["float","(float, float)"],
"__fmaximum_magf":["float","(float, float)"],
"fminimum_magf":["float","(float, float)"],
"__fminimum_magf":["float","(float, float)"],
"fmaximum_mag_numf":["float","(float, float)"],
"__fmaximum_mag_numf":["float","(float, float)"],
"fminimum_mag_numf":["float","(float, float)"],
"__fminimum_mag_numf":["float","(float, float)"],
"totalorderf":["int","(const float *, const float *)"],
"totalordermagf":["int","(const float *, const float *)"],
"getpayloadf":["float","(const float *)"],
"__getpayloadf":["float","(const float *)"],
"setpayloadf":["int","(float *, float)"],
"setpayloadsigf":["int","(float *, float)"],
"scalbf":["float","(float, float)"],
"__scalbf":["float","(float, float)"],
"__fpclassifyl":["int","(long double)"],
"__signbitl":["int","(long double)"],
"__isinfl":["int","(long double)"],
"__finitel":["int","(long double)"],
"__isnanl":["int","(long double)"],
"__iseqsigl":["int","(long double, long double)"],
"__issignalingl":["int","(long double)"],
"acosl":["long double","(long double)"],
"__acosl":["long double","(long double)"],
"asinl":["long double","(long double)"],
"__asinl":["long double","(long double)"],
"atanl":["long double","(long double)"],
"__atanl":["long double","(long double)"],
"atan2l":["long double","(long double, long double)"],
"__atan2l":["long double","(long double, long double)"],
"cosl":["long double","(long double)"],
"__cosl":["long double","(long double)"],
"sinl":["long double","(long double)"],
"__sinl":["long double","(long double)"],
"tanl":["long double","(long double)"],
"__tanl":["long double","(long double)"],
"coshl":["long double","(long double)"],
"__coshl":["long double","(long double)"],
"sinhl":["long double","(long double)"],
"__sinhl":["long double","(long double)"],
"tanhl":["long double","(long double)"],
"__tanhl":["long double","(long double)"],
"sincosl":["void","(long double, long double *, long double *)"],
"__sincosl":["void","(long double, long double *, long double *)"],
"acoshl":["long double","(long double)"],
"__acoshl":["long double","(long double)"],
"asinhl":["long double","(long double)"],
"__asinhl":["long double","(long double)"],
"atanhl":["long double","(long double)"],
"__atanhl":["long double","(long double)"],
"expl":["long double","(long double)"],
"__expl":["long double","(long double)"],
"frexpl":["long double","(long double, int *)"],
"__frexpl":["long double","(long double, int *)"],
"ldexpl":["long double","(long double, int)"],
"__ldexpl":["long double","(long double, int)"],
"logl":["long double","(long double)"],
"__logl":["long double","(long double)"],
"log10l":["long double","(long double)"],
"__log10l":["long double","(long double)"],
"modfl":["long double","(long double, long double *)"],
"__modfl":["long double","(long double, long double *)"],
"exp10l":["long double","(long double)"],
"__exp10l":["long double","(long double)"],
"expm1l":["long double","(long double)"],
"__expm1l":["long double","(long double)"],
"log1pl":["long double","(long double)"],
"__log1pl":["long double","(long double)"],
"logbl":["long double","(long double)"],
"__logbl":["long double","(long double)"],
"exp2l":["long double","(long double)"],
"__exp2l":["long double","(long double)"],
"log2l":["long double","(long double)"],
"__log2l":["long double","(long double)"],
"powl":["long double","(long double, long double)"],
"__powl":["long double","(long double, long double)"],
"sqrtl":["long double","(long double)"],
"__sqrtl":["long double","(long double)"],
"hypotl":["long double","(long double, long double)"],
"__hypotl":["long double","(long double, long double)"],
"cbrtl":["long double","(long double)"],
"__cbrtl":["long double","(long double)"],
"ceill":["long double","(long double)"],
"__ceill":["long double","(long double)"],
"fabsl":["long double","(long double)"],
"__fabsl":["long double","(long double)"],
"floorl":["long double","(long double)"],
"__floorl":["long double","(long double)"],
"fmodl":["long double","(long double, long double)"],
"__fmodl":["long double","(long double, long double)"],
"isinfl":["int","(long double)"],
"finitel":["int","(long double)"],
"dreml":["long double","(long double, long double)"],
"__dreml":["long double","(long double, long double)"],
"significandl":["long double","(long double)"],
"__significandl":["long double","(long double)"],
"copysignl":["long double","(long double, long double)"],
"__copysignl":["long double","(long double, long double)"],
"nanl":["long double","(char const *)"],
"__nanl":["long double","(char const *)"],
"isnanl":["int","(long double)"],
"j0l":["long double","(long double)"],
"__j0l":["long double","(long double)"],
"j1l":["long double","(long double)"],
"__j1l":["long double","(long double)"],
"jnl":["long double","(int, long double)"],
"__jnl":["long double","(int, long double)"],
"y0l":["long double","(long double)"],
"__y0l":["long double","(long double)"],
"y1l":["long double","(long double)"],
"__y1l":["long double","(long double)"],
"ynl":["long double","(int, long double)"],
"__ynl":["long double","(int, long double)"],
"erfl":["long double","(long double)"],
"__erfl":["long double","(long double)"],
"erfcl":["long double","(long double)"],
"__erfcl":["long double","(long double)"],
"lgammal":["long double","(long double)"],
"__lgammal":["long double","(long double)"],
"tgammal":["long double","(long double)"],
"__tgammal":["long double","(long double)"],
"gammal":["long double","(long double)"],
"__gammal":["long double","(long double)"],
"lgammal_r":["long double","(long double, int *)"],
"__lgammal_r":["long double","(long double, int *)"],
"rintl":["long double","(long double)"],
"__rintl":["long double","(long double)"],
"nextafterl":["long double","(long double, long double)"],
"__nextafterl":["long double","(long double, long double)"],
"nexttowardl":["long double","(long double, long double)"],
"__nexttowardl":["long double","(long double, long double)"],
"nextdownl":["long double","(long double)"],
"__nextdownl":["long double","(long double)"],
"nextupl":["long double","(long double)"],
"__nextupl":["long double","(long double)"],
"remainderl":["long double","(long double, long double)"],
"__remainderl":["long double","(long double, long double)"],
"scalbnl":["long double","(long double, int)"],
"__scalbnl":["long double","(long double, int)"],
"ilogbl":["int","(long double)"],
"__ilogbl":["int","(long double)"],
"llogbl":["long","(long double)"],
"__llogbl":["long","(long double)"],
"scalblnl":["long double","(long double, long)"],
"__scalblnl":["long double","(long double, long)"],
"nearbyintl":["long double","(long double)"],
"__nearbyintl":["long double","(long double)"],
"roundl":["long double","(long double)"],
"__roundl":["long double","(long double)"],
"truncl":["long double","(long double)"],
"__truncl":["long double","(long double)"],
"remquol":["long double","(long double, long double, int *)"],
"__remquol":["long double","(long double, long double, int *)"],
"lrintl":["long","(long double)"],
"__lrintl":["long","(long double)"],
"llrintl":["long long","(long double)"],
"__llrintl":["long long","(long double)"],
"lroundl":["long","(long double)"],
"__lroundl":["long","(long double)"],
"llroundl":["long long","(long double)"],
"__llroundl":["long long","(long double)"],
"fdiml":["long double","(long double, long double)"],
"__fdiml":["long double","(long double, long double)"],
"fmaxl":["long double","(long double, long double)"],
"__fmaxl":["long double","(long double, long double)"],
"fminl":["long double","(long double, long double)"],
"__fminl":["long double","(long double, long double)"],
"fmal":["long double","(long double, long double, long double)"],
"__fmal":["long double","(long double, long double, long double)"],
"roundevenl":["long double","(long double)"],
"__roundevenl":["long double","(long double)"],
"fromfpl":["__intmax_t","(long double, int, unsigned int)"],
"__fromfpl":["__intmax_t","(long double, int, unsigned int)"],
"ufromfpl":["__uintmax_t","(long double, int, unsigned int)"],
"__ufromfpl":["__uintmax_t","(long double, int, unsigned int)"],
"fromfpxl":["__intmax_t","(long double, int, unsigned int)"],
"__fromfpxl":["__intmax_t","(long double, int, unsigned int)"],
"ufromfpxl":["__uintmax_t","(long double, int, unsigned int)"],
"__ufromfpxl":["__uintmax_t","(long double, int, unsigned int)"],
"canonicalizel":["int","(long double *, const long double *)"],
"fmaxmagl":["long double","(long double, long double)"],
"__fmaxmagl":["long double","(long double, long double)"],
"fminmagl":["long double","(long double, long double)"],
"__fminmagl":["long double","(long double, long double)"],
"fmaximuml":["long double","(long double, long double)"],
"__fmaximuml":["long double","(long double, long double)"],
"fminimuml":["long double","(long double, long double)"],
"__fminimuml":["long double","(long double, long double)"],
"fmaximum_numl":["long double","(long double, long double)"],
"__fmaximum_numl":["long double","(long double, long double)"],
"fminimum_numl":["long double","(long double, long double)"],
"__fminimum_numl":["long double","(long double, long double)"],
"fmaximum_magl":["long double","(long double, long double)"],
"__fmaximum_magl":["long double","(long double, long double)"],
"fminimum_magl":["long double","(long double, long double)"],
"__fminimum_magl":["long double","(long double, long double)"],
"fmaximum_mag_numl":["long double","(long double, long double)"],
"__fmaximum_mag_numl":["long double","(long double, long double)"],
"fminimum_mag_numl":["long double","(long double, long double)"],
"__fminimum_mag_numl":["long double","(long double, long double)"],
"totalorderl":["int","(const long double *, const long double *)"],
"totalordermagl":["int","(const long double *, const long double *)"],
"getpayloadl":["long double","(const long double *)"],
"__getpayloadl":["long double","(const long double *)"],
"setpayloadl":["int","(long double *, long double)"],
"setpayloadsigl":["int","(long double *, long double)"],
"scalbl":["long double","(long double, long double)"],
"__scalbl":["long double","(long double, long double)"],
"acosf32":["_Float32","(_Float32)"],
"__acosf32":["_Float32","(_Float32)"],
"asinf32":["_Float32","(_Float32)"],
"__asinf32":["_Float32","(_Float32)"],
"atanf32":["_Float32","(_Float32)"],
"__atanf32":["_Float32","(_Float32)"],
"atan2f32":["_Float32","(_Float32, _Float32)"],
"__atan2f32":["_Float32","(_Float32, _Float32)"],
"cosf32":["_Float32","(_Float32)"],
"__cosf32":["_Float32","(_Float32)"],
"sinf32":["_Float32","(_Float32)"],
"__sinf32":["_Float32","(_Float32)"],
"tanf32":["_Float32","(_Float32)"],
"__tanf32":["_Float32","(_Float32)"],
"coshf32":["_Float32","(_Float32)"],
"__coshf32":["_Float32","(_Float32)"],
"sinhf32":["_Float32","(_Float32)"],
"__sinhf32":["_Float32","(_Float32)"],
"tanhf32":["_Float32","(_Float32)"],
"__tanhf32":["_Float32","(_Float32)"],
"sincosf32":["void","(_Float32, _Float32 *, _Float32 *)"],
"__sincosf32":["void","(_Float32, _Float32 *, _Float32 *)"],
"acoshf32":["_Float32","(_Float32)"],
"__acoshf32":["_Float32","(_Float32)"],
"asinhf32":["_Float32","(_Float32)"],
"__asinhf32":["_Float32","(_Float32)"],
"atanhf32":["_Float32","(_Float32)"],
"__atanhf32":["_Float32","(_Float32)"],
"expf32":["_Float32","(_Float32)"],
"__expf32":["_Float32","(_Float32)"],
"frexpf32":["_Float32","(_Float32, int *)"],
"__frexpf32":["_Float32","(_Float32, int *)"],
"ldexpf32":["_Float32","(_Float32, int)"],
"__ldexpf32":["_Float32","(_Float32, int)"],
"logf32":["_Float32","(_Float32)"],
"__logf32":["_Float32","(_Float32)"],
"log10f32":["_Float32","(_Float32)"],
"__log10f32":["_Float32","(_Float32)"],
"modff32":["_Float32","(_Float32, _Float32 *)"],
"__modff32":["_Float32","(_Float32, _Float32 *)"],
"exp10f32":["_Float32","(_Float32)"],
"__exp10f32":["_Float32","(_Float32)"],
"expm1f32":["_Float32","(_Float32)"],
"__expm1f32":["_Float32","(_Float32)"],
"log1pf32":["_Float32","(_Float32)"],
"__log1pf32":["_Float32","(_Float32)"],
"logbf32":["_Float32","(_Float32)"],
"__logbf32":["_Float32","(_Float32)"],
"exp2f32":["_Float32","(_Float32)"],
"__exp2f32":["_Float32","(_Float32)"],
"log2f32":["_Float32","(_Float32)"],
"__log2f32":["_Float32","(_Float32)"],
"powf32":["_Float32","(_Float32, _Float32)"],
"__powf32":["_Float32","(_Float32, _Float32)"],
"sqrtf32":["_Float32","(_Float32)"],
"__sqrtf32":["_Float32","(_Float32)"],
"hypotf32":["_Float32","(_Float32, _Float32)"],
"__hypotf32":["_Float32","(_Float32, _Float32)"],
"cbrtf32":["_Float32","(_Float32)"],
"__cbrtf32":["_Float32","(_Float32)"],
"ceilf32":["_Float32","(_Float32)"],
"__ceilf32":["_Float32","(_Float32)"],
"fabsf32":["_Float32","(_Float32)"],
"__fabsf32":["_Float32","(_Float32)"],
"floorf32":["_Float32","(_Float32)"],
"__floorf32":["_Float32","(_Float32)"],
"fmodf32":["_Float32","(_Float32, _Float32)"],
"__fmodf32":["_Float32","(_Float32, _Float32)"],
"copysignf32":["_Float32","(_Float32, _Float32)"],
"__copysignf32":["_Float32","(_Float32, _Float32)"],
"nanf32":["_Float32","(char const *)"],
"__nanf32":["_Float32","(char const *)"],
"j0f32":["_Float32","(_Float32)"],
"__j0f32":["_Float32","(_Float32)"],
"j1f32":["_Float32","(_Float32)"],
"__j1f32":["_Float32","(_Float32)"],
"jnf32":["_Float32","(int, _Float32)"],
"__jnf32":["_Float32","(int, _Float32)"],
"y0f32":["_Float32","(_Float32)"],
"__y0f32":["_Float32","(_Float32)"],
"y1f32":["_Float32","(_Float32)"],
"__y1f32":["_Float32","(_Float32)"],
"ynf32":["_Float32","(int, _Float32)"],
"__ynf32":["_Float32","(int, _Float32)"],
"erff32":["_Float32","(_Float32)"],
"__erff32":["_Float32","(_Float32)"],
"erfcf32":["_Float32","(_Float32)"],
"__erfcf32":["_Float32","(_Float32)"],
"lgammaf32":["_Float32","(_Float32)"],
"__lgammaf32":["_Float32","(_Float32)"],
"tgammaf32":["_Float32","(_Float32)"],
"__tgammaf32":["_Float32","(_Float32)"],
"lgammaf32_r":["_Float32","(_Float32, int *)"],
"__lgammaf32_r":["_Float32","(_Float32, int *)"],
"rintf32":["_Float32","(_Float32)"],
"__rintf32":["_Float32","(_Float32)"],
"nextafterf32":["_Float32","(_Float32, _Float32)"],
"__nextafterf32":["_Float32","(_Float32, _Float32)"],
"nextdownf32":["_Float32","(_Float32)"],
"__nextdownf32":["_Float32","(_Float32)"],
"nextupf32":["_Float32","(_Float32)"],
"__nextupf32":["_Float32","(_Float32)"],
"remainderf32":["_Float32","(_Float32, _Float32)"],
"__remainderf32":["_Float32","(_Float32, _Float32)"],
"scalbnf32":["_Float32","(_Float32, int)"],
"__scalbnf32":["_Float32","(_Float32, int)"],
"ilogbf32":["int","(_Float32)"],
"__ilogbf32":["int","(_Float32)"],
"llogbf32":["long","(_Float32)"],
"__llogbf32":["long","(_Float32)"],
"scalblnf32":["_Float32","(_Float32, long)"],
"__scalblnf32":["_Float32","(_Float32, long)"],
"nearbyintf32":["_Float32","(_Float32)"],
"__nearbyintf32":["_Float32","(_Float32)"],
"roundf32":["_Float32","(_Float32)"],
"__roundf32":["_Float32","(_Float32)"],
"truncf32":["_Float32","(_Float32)"],
"__truncf32":["_Float32","(_Float32)"],
"remquof32":["_Float32","(_Float32, _Float32, int *)"],
"__remquof32":["_Float32","(_Float32, _Float32, int *)"],
"lrintf32":["long","(_Float32)"],
"__lrintf32":["long","(_Float32)"],
"llrintf32":["long long","(_Float32)"],
"__llrintf32":["long long","(_Float32)"],
"lroundf32":["long","(_Float32)"],
"__lroundf32":["long","(_Float32)"],
"llroundf32":["long long","(_Float32)"],
"__llroundf32":["long long","(_Float32)"],
"fdimf32":["_Float32","(_Float32, _Float32)"],
"__fdimf32":["_Float32","(_Float32, _Float32)"],
"fmaxf32":["_Float32","(_Float32, _Float32)"],
"__fmaxf32":["_Float32","(_Float32, _Float32)"],
"fminf32":["_Float32","(_Float32, _Float32)"],
"__fminf32":["_Float32","(_Float32, _Float32)"],
"fmaf32":["_Float32","(_Float32, _Float32, _Float32)"],
"__fmaf32":["_Float32","(_Float32, _Float32, _Float32)"],
"roundevenf32":["_Float32","(_Float32)"],
"__roundevenf32":["_Float32","(_Float32)"],
"fromfpf32":["__intmax_t","(_Float32, int, unsigned int)"],
"__fromfpf32":["__intmax_t","(_Float32, int, unsigned int)"],
"ufromfpf32":["__uintmax_t","(_Float32, int, unsigned int)"],
"__ufromfpf32":["__uintmax_t","(_Float32, int, unsigned int)"],
"fromfpxf32":["__intmax_t","(_Float32, int, unsigned int)"],
"__fromfpxf32":["__intmax_t","(_Float32, int, unsigned int)"],
"ufromfpxf32":["__uintmax_t","(_Float32, int, unsigned int)"],
"__ufromfpxf32":["__uintmax_t","(_Float32, int, unsigned int)"],
"canonicalizef32":["int","(_Float32 *, const _Float32 *)"],
"fmaxmagf32":["_Float32","(_Float32, _Float32)"],
"__fmaxmagf32":["_Float32","(_Float32, _Float32)"],
"fminmagf32":["_Float32","(_Float32, _Float32)"],
"__fminmagf32":["_Float32","(_Float32, _Float32)"],
"fmaximumf32":["_Float32","(_Float32, _Float32)"],
"__fmaximumf32":["_Float32","(_Float32, _Float32)"],
"fminimumf32":["_Float32","(_Float32, _Float32)"],
"__fminimumf32":["_Float32","(_Float32, _Float32)"],
"fmaximum_numf32":["_Float32","(_Float32, _Float32)"],
"__fmaximum_numf32":["_Float32","(_Float32, _Float32)"],
"fminimum_numf32":["_Float32","(_Float32, _Float32)"],
"__fminimum_numf32":["_Float32","(_Float32, _Float32)"],
"fmaximum_magf32":["_Float32","(_Float32, _Float32)"],
"__fmaximum_magf32":["_Float32","(_Float32, _Float32)"],
"fminimum_magf32":["_Float32","(_Float32, _Float32)"],
"__fminimum_magf32":["_Float32","(_Float32, _Float32)"],
"fmaximum_mag_numf32":["_Float32","(_Float32, _Float32)"],
"__fmaximum_mag_numf32":["_Float32","(_Float32, _Float32)"],
"fminimum_mag_numf32":["_Float32","(_Float32, _Float32)"],
"__fminimum_mag_numf32":["_Float32","(_Float32, _Float32)"],
"totalorderf32":["int","(const _Float32 *, const _Float32 *)"],
"totalordermagf32":["int","(const _Float32 *, const _Float32 *)"],
"getpayloadf32":["_Float32","(const _Float32 *)"],
"__getpayloadf32":["_Float32","(const _Float32 *)"],
"setpayloadf32":["int","(_Float32 *, _Float32)"],
"setpayloadsigf32":["int","(_Float32 *, _Float32)"],
"acosf64":["_Float64","(_Float64)"],
"__acosf64":["_Float64","(_Float64)"],
"asinf64":["_Float64","(_Float64)"],
"__asinf64":["_Float64","(_Float64)"],
"atanf64":["_Float64","(_Float64)"],
"__atanf64":["_Float64","(_Float64)"],
"atan2f64":["_Float64","(_Float64, _Float64)"],
"__atan2f64":["_Float64","(_Float64, _Float64)"],
"cosf64":["_Float64","(_Float64)"],
"__cosf64":["_Float64","(_Float64)"],
"sinf64":["_Float64","(_Float64)"],
"__sinf64":["_Float64","(_Float64)"],
"tanf64":["_Float64","(_Float64)"],
"__tanf64":["_Float64","(_Float64)"],
"coshf64":["_Float64","(_Float64)"],
"__coshf64":["_Float64","(_Float64)"],
"sinhf64":["_Float64","(_Float64)"],
"__sinhf64":["_Float64","(_Float64)"],
"tanhf64":["_Float64","(_Float64)"],
"__tanhf64":["_Float64","(_Float64)"],
"sincosf64":["void","(_Float64, _Float64 *, _Float64 *)"],
"__sincosf64":["void","(_Float64, _Float64 *, _Float64 *)"],
"acoshf64":["_Float64","(_Float64)"],
"__acoshf64":["_Float64","(_Float64)"],
"asinhf64":["_Float64","(_Float64)"],
"__asinhf64":["_Float64","(_Float64)"],
"atanhf64":["_Float64","(_Float64)"],
"__atanhf64":["_Float64","(_Float64)"],
"expf64":["_Float64","(_Float64)"],
"__expf64":["_Float64","(_Float64)"],
"frexpf64":["_Float64","(_Float64, int *)"],
"__frexpf64":["_Float64","(_Float64, int *)"],
"ldexpf64":["_Float64","(_Float64, int)"],
"__ldexpf64":["_Float64","(_Float64, int)"],
"logf64":["_Float64","(_Float64)"],
"__logf64":["_Float64","(_Float64)"],
"log10f64":["_Float64","(_Float64)"],
"__log10f64":["_Float64","(_Float64)"],
"modff64":["_Float64","(_Float64, _Float64 *)"],
"__modff64":["_Float64","(_Float64, _Float64 *)"],
"exp10f64":["_Float64","(_Float64)"],
"__exp10f64":["_Float64","(_Float64)"],
"expm1f64":["_Float64","(_Float64)"],
"__expm1f64":["_Float64","(_Float64)"],
"log1pf64":["_Float64","(_Float64)"],
"__log1pf64":["_Float64","(_Float64)"],
"logbf64":["_Float64","(_Float64)"],
"__logbf64":["_Float64","(_Float64)"],
"exp2f64":["_Float64","(_Float64)"],
"__exp2f64":["_Float64","(_Float64)"],
"log2f64":["_Float64","(_Float64)"],
"__log2f64":["_Float64","(_Float64)"],
"powf64":["_Float64","(_Float64, _Float64)"],
"__powf64":["_Float64","(_Float64, _Float64)"],
"sqrtf64":["_Float64","(_Float64)"],
"__sqrtf64":["_Float64","(_Float64)"],
"hypotf64":["_Float64","(_Float64, _Float64)"],
"__hypotf64":["_Float64","(_Float64, _Float64)"],
"cbrtf64":["_Float64","(_Float64)"],
"__cbrtf64":["_Float64","(_Float64)"],
"ceilf64":["_Float64","(_Float64)"],
"__ceilf64":["_Float64","(_Float64)"],
"fabsf64":["_Float64","(_Float64)"],
"__fabsf64":["_Float64","(_Float64)"],
"floorf64":["_Float64","(_Float64)"],
"__floorf64":["_Float64","(_Float64)"],
"fmodf64":["_Float64","(_Float64, _Float64)"],
"__fmodf64":["_Float64","(_Float64, _Float64)"],
"copysignf64":["_Float64","(_Float64, _Float64)"],
"__copysignf64":["_Float64","(_Float64, _Float64)"],
"nanf64":["_Float64","(char const *)"],
"__nanf64":["_Float64","(char const *)"],
"j0f64":["_Float64","(_Float64)"],
"__j0f64":["_Float64","(_Float64)"],
"j1f64":["_Float64","(_Float64)"],
"__j1f64":["_Float64","(_Float64)"],
"jnf64":["_Float64","(int, _Float64)"],
"__jnf64":["_Float64","(int, _Float64)"],
"y0f64":["_Float64","(_Float64)"],
"__y0f64":["_Float64","(_Float64)"],
"y1f64":["_Float64","(_Float64)"],
"__y1f64":["_Float64","(_Float64)"],
"ynf64":["_Float64","(int, _Float64)"],
"__ynf64":["_Float64","(int, _Float64)"],
"erff64":["_Float64","(_Float64)"],
"__erff64":["_Float64","(_Float64)"],
"erfcf64":["_Float64","(_Float64)"],
"__erfcf64":["_Float64","(_Float64)"],
"lgammaf64":["_Float64","(_Float64)"],
"__lgammaf64":["_Float64","(_Float64)"],
"tgammaf64":["_Float64","(_Float64)"],
"__tgammaf64":["_Float64","(_Float64)"],
"lgammaf64_r":["_Float64","(_Float64, int *)"],
"__lgammaf64_r":["_Float64","(_Float64, int *)"],
"rintf64":["_Float64","(_Float64)"],
"__rintf64":["_Float64","(_Float64)"],
"nextafterf64":["_Float64","(_Float64, _Float64)"],
"__nextafterf64":["_Float64","(_Float64, _Float64)"],
"nextdownf64":["_Float64","(_Float64)"],
"__nextdownf64":["_Float64","(_Float64)"],
"nextupf64":["_Float64","(_Float64)"],
"__nextupf64":["_Float64","(_Float64)"],
"remainderf64":["_Float64","(_Float64, _Float64)"],
"__remainderf64":["_Float64","(_Float64, _Float64)"],
"scalbnf64":["_Float64","(_Float64, int)"],
"__scalbnf64":["_Float64","(_Float64, int)"],
"ilogbf64":["int","(_Float64)"],
"__ilogbf64":["int","(_Float64)"],
"llogbf64":["long","(_Float64)"],
"__llogbf64":["long","(_Float64)"],
"scalblnf64":["_Float64","(_Float64, long)"],
"__scalblnf64":["_Float64","(_Float64, long)"],
"nearbyintf64":["_Float64","(_Float64)"],
"__nearbyintf64":["_Float64","(_Float64)"],
"roundf64":["_Float64","(_Float64)"],
"__roundf64":["_Float64","(_Float64)"],
"truncf64":["_Float64","(_Float64)"],
"__truncf64":["_Float64","(_Float64)"],
"remquof64":["_Float64","(_Float64, _Float64, int *)"],
"__remquof64":["_Float64","(_Float64, _Float64, int *)"],
"lrintf64":["long","(_Float64)"],
"__lrintf64":["long","(_Float64)"],
"llrintf64":["long long","(_Float64)"],
"__llrintf64":["long long","(_Float64)"],
"lroundf64":["long","(_Float64)"],
"__lroundf64":["long","(_Float64)"],
"llroundf64":["long long","(_Float64)"],
"__llroundf64":["long long","(_Float64)"],
"fdimf64":["_Float64","(_Float64, _Float64)"],
"__fdimf64":["_Float64","(_Float64, _Float64)"],
"fmaxf64":["_Float64","(_Float64, _Float64)"],
"__fmaxf64":["_Float64","(_Float64, _Float64)"],
"fminf64":["_Float64","(_Float64, _Float64)"],
"__fminf64":["_Float64","(_Float64, _Float64)"],
"fmaf64":["_Float64","(_Float64, _Float64, _Float64)"],
"__fmaf64":["_Float64","(_Float64, _Float64, _Float64)"],
"roundevenf64":["_Float64","(_Float64)"],
"__roundevenf64":["_Float64","(_Float64)"],
"fromfpf64":["__intmax_t","(_Float64, int, unsigned int)"],
"__fromfpf64":["__intmax_t","(_Float64, int, unsigned int)"],
"ufromfpf64":["__uintmax_t","(_Float64, int, unsigned int)"],
"__ufromfpf64":["__uintmax_t","(_Float64, int, unsigned int)"],
"fromfpxf64":["__intmax_t","(_Float64, int, unsigned int)"],
"__fromfpxf64":["__intmax_t","(_Float64, int, unsigned int)"],
"ufromfpxf64":["__uintmax_t","(_Float64, int, unsigned int)"],
"__ufromfpxf64":["__uintmax_t","(_Float64, int, unsigned int)"],
"canonicalizef64":["int","(_Float64 *, const _Float64 *)"],
"fmaxmagf64":["_Float64","(_Float64, _Float64)"],
"__fmaxmagf64":["_Float64","(_Float64, _Float64)"],
"fminmagf64":["_Float64","(_Float64, _Float64)"],
"__fminmagf64":["_Float64","(_Float64, _Float64)"],
"fmaximumf64":["_Float64","(_Float64, _Float64)"],
"__fmaximumf64":["_Float64","(_Float64, _Float64)"],
"fminimumf64":["_Float64","(_Float64, _Float64)"],
"__fminimumf64":["_Float64","(_Float64, _Float64)"],
"fmaximum_numf64":["_Float64","(_Float64, _Float64)"],
"__fmaximum_numf64":["_Float64","(_Float64, _Float64)"],
"fminimum_numf64":["_Float64","(_Float64, _Float64)"],
"__fminimum_numf64":["_Float64","(_Float64, _Float64)"],
"fmaximum_magf64":["_Float64","(_Float64, _Float64)"],
"__fmaximum_magf64":["_Float64","(_Float64, _Float64)"],
"fminimum_magf64":["_Float64","(_Float64, _Float64)"],
"__fminimum_magf64":["_Float64","(_Float64, _Float64)"],
"fmaximum_mag_numf64":["_Float64","(_Float64, _Float64)"],
"__fmaximum_mag_numf64":["_Float64","(_Float64, _Float64)"],
"fminimum_mag_numf64":["_Float64","(_Float64, _Float64)"],
"__fminimum_mag_numf64":["_Float64","(_Float64, _Float64)"],
"totalorderf64":["int","(const _Float64 *, const _Float64 *)"],
"totalordermagf64":["int","(const _Float64 *, const _Float64 *)"],
"getpayloadf64":["_Float64","(const _Float64 *)"],
"__getpayloadf64":["_Float64","(const _Float64 *)"],
"setpayloadf64":["int","(_Float64 *, _Float64)"],
"setpayloadsigf64":["int","(_Float64 *, _Float64)"],
"acosf32x":["_Float32x","(_Float32x)"],
"__acosf32x":["_Float32x","(_Float32x)"],
"asinf32x":["_Float32x","(_Float32x)"],
"__asinf32x":["_Float32x","(_Float32x)"],
"atanf32x":["_Float32x","(_Float32x)"],
"__atanf32x":["_Float32x","(_Float32x)"],
"atan2f32x":["_Float32x","(_Float32x, _Float32x)"],
"__atan2f32x":["_Float32x","(_Float32x, _Float32x)"],
"cosf32x":["_Float32x","(_Float32x)"],
"__cosf32x":["_Float32x","(_Float32x)"],
"sinf32x":["_Float32x","(_Float32x)"],
"__sinf32x":["_Float32x","(_Float32x)"],
"tanf32x":["_Float32x","(_Float32x)"],
"__tanf32x":["_Float32x","(_Float32x)"],
"coshf32x":["_Float32x","(_Float32x)"],
"__coshf32x":["_Float32x","(_Float32x)"],
"sinhf32x":["_Float32x","(_Float32x)"],
"__sinhf32x":["_Float32x","(_Float32x)"],
"tanhf32x":["_Float32x","(_Float32x)"],
"__tanhf32x":["_Float32x","(_Float32x)"],
"sincosf32x":["void","(_Float32x, _Float32x *, _Float32x *)"],
"__sincosf32x":["void","(_Float32x, _Float32x *, _Float32x *)"],
"acoshf32x":["_Float32x","(_Float32x)"],
"__acoshf32x":["_Float32x","(_Float32x)"],
"asinhf32x":["_Float32x","(_Float32x)"],
"__asinhf32x":["_Float32x","(_Float32x)"],
"atanhf32x":["_Float32x","(_Float32x)"],
"__atanhf32x":["_Float32x","(_Float32x)"],
"expf32x":["_Float32x","(_Float32x)"],
"__expf32x":["_Float32x","(_Float32x)"],
"frexpf32x":["_Float32x","(_Float32x, int *)"],
"__frexpf32x":["_Float32x","(_Float32x, int *)"],
"ldexpf32x":["_Float32x","(_Float32x, int)"],
"__ldexpf32x":["_Float32x","(_Float32x, int)"],
"logf32x":["_Float32x","(_Float32x)"],
"__logf32x":["_Float32x","(_Float32x)"],
"log10f32x":["_Float32x","(_Float32x)"],
"__log10f32x":["_Float32x","(_Float32x)"],
"modff32x":["_Float32x","(_Float32x, _Float32x *)"],
"__modff32x":["_Float32x","(_Float32x, _Float32x *)"],
"exp10f32x":["_Float32x","(_Float32x)"],
"__exp10f32x":["_Float32x","(_Float32x)"],
"expm1f32x":["_Float32x","(_Float32x)"],
"__expm1f32x":["_Float32x","(_Float32x)"],
"log1pf32x":["_Float32x","(_Float32x)"],
"__log1pf32x":["_Float32x","(_Float32x)"],
"logbf32x":["_Float32x","(_Float32x)"],
"__logbf32x":["_Float32x","(_Float32x)"],
"exp2f32x":["_Float32x","(_Float32x)"],
"__exp2f32x":["_Float32x","(_Float32x)"],
"log2f32x":["_Float32x","(_Float32x)"],
"__log2f32x":["_Float32x","(_Float32x)"],
"powf32x":["_Float32x","(_Float32x, _Float32x)"],
"__powf32x":["_Float32x","(_Float32x, _Float32x)"],
"sqrtf32x":["_Float32x","(_Float32x)"],
"__sqrtf32x":["_Float32x","(_Float32x)"],
"hypotf32x":["_Float32x","(_Float32x, _Float32x)"],
"__hypotf32x":["_Float32x","(_Float32x, _Float32x)"],
"cbrtf32x":["_Float32x","(_Float32x)"],
"__cbrtf32x":["_Float32x","(_Float32x)"],
"ceilf32x":["_Float32x","(_Float32x)"],
"__ceilf32x":["_Float32x","(_Float32x)"],
"fabsf32x":["_Float32x","(_Float32x)"],
"__fabsf32x":["_Float32x","(_Float32x)"],
"floorf32x":["_Float32x","(_Float32x)"],
"__floorf32x":["_Float32x","(_Float32x)"],
"fmodf32x":["_Float32x","(_Float32x, _Float32x)"],
"__fmodf32x":["_Float32x","(_Float32x, _Float32x)"],
"copysignf32x":["_Float32x","(_Float32x, _Float32x)"],
"__copysignf32x":["_Float32x","(_Float32x, _Float32x)"],
"nanf32x":["_Float32x","(char const *)"],
"__nanf32x":["_Float32x","(char const *)"],
"j0f32x":["_Float32x","(_Float32x)"],
"__j0f32x":["_Float32x","(_Float32x)"],
"j1f32x":["_Float32x","(_Float32x)"],
"__j1f32x":["_Float32x","(_Float32x)"],
"jnf32x":["_Float32x","(int, _Float32x)"],
"__jnf32x":["_Float32x","(int, _Float32x)"],
"y0f32x":["_Float32x","(_Float32x)"],
"__y0f32x":["_Float32x","(_Float32x)"],
"y1f32x":["_Float32x","(_Float32x)"],
"__y1f32x":["_Float32x","(_Float32x)"],
"ynf32x":["_Float32x","(int, _Float32x)"],
"__ynf32x":["_Float32x","(int, _Float32x)"],
"erff32x":["_Float32x","(_Float32x)"],
"__erff32x":["_Float32x","(_Float32x)"],
"erfcf32x":["_Float32x","(_Float32x)"],
"__erfcf32x":["_Float32x","(_Float32x)"],
"lgammaf32x":["_Float32x","(_Float32x)"],
"__lgammaf32x":["_Float32x","(_Float32x)"],
"tgammaf32x":["_Float32x","(_Float32x)"],
"__tgammaf32x":["_Float32x","(_Float32x)"],
"lgammaf32x_r":["_Float32x","(_Float32x, int *)"],
"__lgammaf32x_r":["_Float32x","(_Float32x, int *)"],
"rintf32x":["_Float32x","(_Float32x)"],
"__rintf32x":["_Float32x","(_Float32x)"],
"nextafterf32x":["_Float32x","(_Float32x, _Float32x)"],
"__nextafterf32x":["_Float32x","(_Float32x, _Float32x)"],
"nextdownf32x":["_Float32x","(_Float32x)"],
"__nextdownf32x":["_Float32x","(_Float32x)"],
"nextupf32x":["_Float32x","(_Float32x)"],
"__nextupf32x":["_Float32x","(_Float32x)"],
"remainderf32x":["_Float32x","(_Float32x, _Float32x)"],
"__remainderf32x":["_Float32x","(_Float32x, _Float32x)"],
"scalbnf32x":["_Float32x","(_Float32x, int)"],
"__scalbnf32x":["_Float32x","(_Float32x, int)"],
"ilogbf32x":["int","(_Float32x)"],
"__ilogbf32x":["int","(_Float32x)"],
"llogbf32x":["long","(_Float32x)"],
"__llogbf32x":["long","(_Float32x)"],
"scalblnf32x":["_Float32x","(_Float32x, long)"],
"__scalblnf32x":["_Float32x","(_Float32x, long)"],
"nearbyintf32x":["_Float32x","(_Float32x)"],
"__nearbyintf32x":["_Float32x","(_Float32x)"],
"roundf32x":["_Float32x","(_Float32x)"],
"__roundf32x":["_Float32x","(_Float32x)"],
"truncf32x":["_Float32x","(_Float32x)"],
"__truncf32x":["_Float32x","(_Float32x)"],
"remquof32x":["_Float32x","(_Float32x, _Float32x, int *)"],
"__remquof32x":["_Float32x","(_Float32x, _Float32x, int *)"],
"lrintf32x":["long","(_Float32x)"],
"__lrintf32x":["long","(_Float32x)"],
"llrintf32x":["long long","(_Float32x)"],
"__llrintf32x":["long long","(_Float32x)"],
"lroundf32x":["long","(_Float32x)"],
"__lroundf32x":["long","(_Float32x)"],
"llroundf32x":["long long","(_Float32x)"],
"__llroundf32x":["long long","(_Float32x)"],
"fdimf32x":["_Float32x","(_Float32x, _Float32x)"],
"__fdimf32x":["_Float32x","(_Float32x, _Float32x)"],
"fmaxf32x":["_Float32x","(_Float32x, _Float32x)"],
"__fmaxf32x":["_Float32x","(_Float32x, _Float32x)"],
"fminf32x":["_Float32x","(_Float32x, _Float32x)"],
"__fminf32x":["_Float32x","(_Float32x, _Float32x)"],
"fmaf32x":["_Float32x","(_Float32x, _Float32x, _Float32x)"],
"__fmaf32x":["_Float32x","(_Float32x, _Float32x, _Float32x)"],
"roundevenf32x":["_Float32x","(_Float32x)"],
"__roundevenf32x":["_Float32x","(_Float32x)"],
"fromfpf32x":["__intmax_t","(_Float32x, int, unsigned int)"],
"__fromfpf32x":["__intmax_t","(_Float32x, int, unsigned int)"],
"ufromfpf32x":["__uintmax_t","(_Float32x, int, unsigned int)"],
"__ufromfpf32x":["__uintmax_t","(_Float32x, int, unsigned int)"],
"fromfpxf32x":["__intmax_t","(_Float32x, int, unsigned int)"],
"__fromfpxf32x":["__intmax_t","(_Float32x, int, unsigned int)"],
"ufromfpxf32x":["__uintmax_t","(_Float32x, int, unsigned int)"],
"__ufromfpxf32x":["__uintmax_t","(_Float32x, int, unsigned int)"],
"canonicalizef32x":["int","(_Float32x *, const _Float32x *)"],
"fmaxmagf32x":["_Float32x","(_Float32x, _Float32x)"],
"__fmaxmagf32x":["_Float32x","(_Float32x, _Float32x)"],
"fminmagf32x":["_Float32x","(_Float32x, _Float32x)"],
"__fminmagf32x":["_Float32x","(_Float32x, _Float32x)"],
"fmaximumf32x":["_Float32x","(_Float32x, _Float32x)"],
"__fmaximumf32x":["_Float32x","(_Float32x, _Float32x)"],
"fminimumf32x":["_Float32x","(_Float32x, _Float32x)"],
"__fminimumf32x":["_Float32x","(_Float32x, _Float32x)"],
"fmaximum_numf32x":["_Float32x","(_Float32x, _Float32x)"],
"__fmaximum_numf32x":["_Float32x","(_Float32x, _Float32x)"],
"fminimum_numf32x":["_Float32x","(_Float32x, _Float32x)"],
"__fminimum_numf32x":["_Float32x","(_Float32x, _Float32x)"],
"fmaximum_magf32x":["_Float32x","(_Float32x, _Float32x)"],
"__fmaximum_magf32x":["_Float32x","(_Float32x, _Float32x)"],
"fminimum_magf32x":["_Float32x","(_Float32x, _Float32x)"],
"__fminimum_magf32x":["_Float32x","(_Float32x, _Float32x)"],
"fmaximum_mag_numf32x":["_Float32x","(_Float32x, _Float32x)"],
"__fmaximum_mag_numf32x":["_Float32x","(_Float32x, _Float32x)"],
"fminimum_mag_numf32x":["_Float32x","(_Float32x, _Float32x)"],
"__fminimum_mag_numf32x":["_Float32x","(_Float32x, _Float32x)"],
"totalorderf32x":["int","(const _Float32x *, const _Float32x *)"],
"totalordermagf32x":["int","(const _Float32x *, const _Float32x *)"],
"getpayloadf32x":["_Float32x","(const _Float32x *)"],
"__getpayloadf32x":["_Float32x","(const _Float32x *)"],
"setpayloadf32x":["int","(_Float32x *, _Float32x)"],
"setpayloadsigf32x":["int","(_Float32x *, _Float32x)"],
"acosf64x":["_Float64x","(_Float64x)"],
"__acosf64x":["_Float64x","(_Float64x)"],
"asinf64x":["_Float64x","(_Float64x)"],
"__asinf64x":["_Float64x","(_Float64x)"],
"atanf64x":["_Float64x","(_Float64x)"],
"__atanf64x":["_Float64x","(_Float64x)"],
"atan2f64x":["_Float64x","(_Float64x, _Float64x)"],
"__atan2f64x":["_Float64x","(_Float64x, _Float64x)"],
"cosf64x":["_Float64x","(_Float64x)"],
"__cosf64x":["_Float64x","(_Float64x)"],
"sinf64x":["_Float64x","(_Float64x)"],
"__sinf64x":["_Float64x","(_Float64x)"],
"tanf64x":["_Float64x","(_Float64x)"],
"__tanf64x":["_Float64x","(_Float64x)"],
"coshf64x":["_Float64x","(_Float64x)"],
"__coshf64x":["_Float64x","(_Float64x)"],
"sinhf64x":["_Float64x","(_Float64x)"],
"__sinhf64x":["_Float64x","(_Float64x)"],
"tanhf64x":["_Float64x","(_Float64x)"],
"__tanhf64x":["_Float64x","(_Float64x)"],
"sincosf64x":["void","(_Float64x, _Float64x *, _Float64x *)"],
"__sincosf64x":["void","(_Float64x, _Float64x *, _Float64x *)"],
"acoshf64x":["_Float64x","(_Float64x)"],
"__acoshf64x":["_Float64x","(_Float64x)"],
"asinhf64x":["_Float64x","(_Float64x)"],
"__asinhf64x":["_Float64x","(_Float64x)"],
"atanhf64x":["_Float64x","(_Float64x)"],
"__atanhf64x":["_Float64x","(_Float64x)"],
"expf64x":["_Float64x","(_Float64x)"],
"__expf64x":["_Float64x","(_Float64x)"],
"frexpf64x":["_Float64x","(_Float64x, int *)"],
"__frexpf64x":["_Float64x","(_Float64x, int *)"],
"ldexpf64x":["_Float64x","(_Float64x, int)"],
"__ldexpf64x":["_Float64x","(_Float64x, int)"],
"logf64x":["_Float64x","(_Float64x)"],
"__logf64x":["_Float64x","(_Float64x)"],
"log10f64x":["_Float64x","(_Float64x)"],
"__log10f64x":["_Float64x","(_Float64x)"],
"modff64x":["_Float64x","(_Float64x, _Float64x *)"],
"__modff64x":["_Float64x","(_Float64x, _Float64x *)"],
"exp10f64x":["_Float64x","(_Float64x)"],
"__exp10f64x":["_Float64x","(_Float64x)"],
"expm1f64x":["_Float64x","(_Float64x)"],
"__expm1f64x":["_Float64x","(_Float64x)"],
"log1pf64x":["_Float64x","(_Float64x)"],
"__log1pf64x":["_Float64x","(_Float64x)"],
"logbf64x":["_Float64x","(_Float64x)"],
"__logbf64x":["_Float64x","(_Float64x)"],
"exp2f64x":["_Float64x","(_Float64x)"],
"__exp2f64x":["_Float64x","(_Float64x)"],
"log2f64x":["_Float64x","(_Float64x)"],
"__log2f64x":["_Float64x","(_Float64x)"],
"powf64x":["_Float64x","(_Float64x, _Float64x)"],
"__powf64x":["_Float64x","(_Float64x, _Float64x)"],
"sqrtf64x":["_Float64x","(_Float64x)"],
"__sqrtf64x":["_Float64x","(_Float64x)"],
"hypotf64x":["_Float64x","(_Float64x, _Float64x)"],
"__hypotf64x":["_Float64x","(_Float64x, _Float64x)"],
"cbrtf64x":["_Float64x","(_Float64x)"],
"__cbrtf64x":["_Float64x","(_Float64x)"],
"ceilf64x":["_Float64x","(_Float64x)"],
"__ceilf64x":["_Float64x","(_Float64x)"],
"fabsf64x":["_Float64x","(_Float64x)"],
"__fabsf64x":["_Float64x","(_Float64x)"],
"floorf64x":["_Float64x","(_Float64x)"],
"__floorf64x":["_Float64x","(_Float64x)"],
"fmodf64x":["_Float64x","(_Float64x, _Float64x)"],
"__fmodf64x":["_Float64x","(_Float64x, _Float64x)"],
"copysignf64x":["_Float64x","(_Float64x, _Float64x)"],
"__copysignf64x":["_Float64x","(_Float64x, _Float64x)"],
"nanf64x":["_Float64x","(char const *)"],
"__nanf64x":["_Float64x","(char const *)"],
"j0f64x":["_Float64x","(_Float64x)"],
"__j0f64x":["_Float64x","(_Float64x)"],
"j1f64x":["_Float64x","(_Float64x)"],
"__j1f64x":["_Float64x","(_Float64x)"],
"jnf64x":["_Float64x","(int, _Float64x)"],
"__jnf64x":["_Float64x","(int, _Float64x)"],
"y0f64x":["_Float64x","(_Float64x)"],
"__y0f64x":["_Float64x","(_Float64x)"],
"y1f64x":["_Float64x","(_Float64x)"],
"__y1f64x":["_Float64x","(_Float64x)"],
"ynf64x":["_Float64x","(int, _Float64x)"],
"__ynf64x":["_Float64x","(int, _Float64x)"],
"erff64x":["_Float64x","(_Float64x)"],
"__erff64x":["_Float64x","(_Float64x)"],
"erfcf64x":["_Float64x","(_Float64x)"],
"__erfcf64x":["_Float64x","(_Float64x)"],
"lgammaf64x":["_Float64x","(_Float64x)"],
"__lgammaf64x":["_Float64x","(_Float64x)"],
"tgammaf64x":["_Float64x","(_Float64x)"],
"__tgammaf64x":["_Float64x","(_Float64x)"],
"lgammaf64x_r":["_Float64x","(_Float64x, int *)"],
"__lgammaf64x_r":["_Float64x","(_Float64x, int *)"],
"rintf64x":["_Float64x","(_Float64x)"],
"__rintf64x":["_Float64x","(_Float64x)"],
"nextafterf64x":["_Float64x","(_Float64x, _Float64x)"],
"__nextafterf64x":["_Float64x","(_Float64x, _Float64x)"],
"nextdownf64x":["_Float64x","(_Float64x)"],
"__nextdownf64x":["_Float64x","(_Float64x)"],
"nextupf64x":["_Float64x","(_Float64x)"],
"__nextupf64x":["_Float64x","(_Float64x)"],
"remainderf64x":["_Float64x","(_Float64x, _Float64x)"],
"__remainderf64x":["_Float64x","(_Float64x, _Float64x)"],
"scalbnf64x":["_Float64x","(_Float64x, int)"],
"__scalbnf64x":["_Float64x","(_Float64x, int)"],
"ilogbf64x":["int","(_Float64x)"],
"__ilogbf64x":["int","(_Float64x)"],
"llogbf64x":["long","(_Float64x)"],
"__llogbf64x":["long","(_Float64x)"],
"scalblnf64x":["_Float64x","(_Float64x, long)"],
"__scalblnf64x":["_Float64x","(_Float64x, long)"],
"nearbyintf64x":["_Float64x","(_Float64x)"],
"__nearbyintf64x":["_Float64x","(_Float64x)"],
"roundf64x":["_Float64x","(_Float64x)"],
"__roundf64x":["_Float64x","(_Float64x)"],
"truncf64x":["_Float64x","(_Float64x)"],
"__truncf64x":["_Float64x","(_Float64x)"],
"remquof64x":["_Float64x","(_Float64x, _Float64x, int *)"],
"__remquof64x":["_Float64x","(_Float64x, _Float64x, int *)"],
"lrintf64x":["long","(_Float64x)"],
"__lrintf64x":["long","(_Float64x)"],
"llrintf64x":["long long","(_Float64x)"],
"__llrintf64x":["long long","(_Float64x)"],
"lroundf64x":["long","(_Float64x)"],
"__lroundf64x":["long","(_Float64x)"],
"llroundf64x":["long long","(_Float64x)"],
"__llroundf64x":["long long","(_Float64x)"],
"fdimf64x":["_Float64x","(_Float64x, _Float64x)"],
"__fdimf64x":["_Float64x","(_Float64x, _Float64x)"],
"fmaxf64x":["_Float64x","(_Float64x, _Float64x)"],
"__fmaxf64x":["_Float64x","(_Float64x, _Float64x)"],
"fminf64x":["_Float64x","(_Float64x, _Float64x)"],
"__fminf64x":["_Float64x","(_Float64x, _Float64x)"],
"fmaf64x":["_Float64x","(_Float64x, _Float64x, _Float64x)"],
"__fmaf64x":["_Float64x","(_Float64x, _Float64x, _Float64x)"],
"roundevenf64x":["_Float64x","(_Float64x)"],
"__roundevenf64x":["_Float64x","(_Float64x)"],
"fromfpf64x":["__intmax_t","(_Float64x, int, unsigned int)"],
"__fromfpf64x":["__intmax_t","(_Float64x, int, unsigned int)"],
"ufromfpf64x":["__uintmax_t","(_Float64x, int, unsigned int)"],
"__ufromfpf64x":["__uintmax_t","(_Float64x, int, unsigned int)"],
"fromfpxf64x":["__intmax_t","(_Float64x, int, unsigned int)"],
"__fromfpxf64x":["__intmax_t","(_Float64x, int, unsigned int)"],
"ufromfpxf64x":["__uintmax_t","(_Float64x, int, unsigned int)"],
"__ufromfpxf64x":["__uintmax_t","(_Float64x, int, unsigned int)"],
"canonicalizef64x":["int","(_Float64x *, const _Float64x *)"],
"fmaxmagf64x":["_Float64x","(_Float64x, _Float64x)"],
"__fmaxmagf64x":["_Float64x","(_Float64x, _Float64x)"],
"fminmagf64x":["_Float64x","(_Float64x, _Float64x)"],
"__fminmagf64x":["_Float64x","(_Float64x, _Float64x)"],
"fmaximumf64x":["_Float64x","(_Float64x, _Float64x)"],
"__fmaximumf64x":["_Float64x","(_Float64x, _Float64x)"],
"fminimumf64x":["_Float64x","(_Float64x, _Float64x)"],
"__fminimumf64x":["_Float64x","(_Float64x, _Float64x)"],
"fmaximum_numf64x":["_Float64x","(_Float64x, _Float64x)"],
"__fmaximum_numf64x":["_Float64x","(_Float64x, _Float64x)"],
"fminimum_numf64x":["_Float64x","(_Float64x, _Float64x)"],
"__fminimum_numf64x":["_Float64x","(_Float64x, _Float64x)"],
"fmaximum_magf64x":["_Float64x","(_Float64x, _Float64x)"],
"__fmaximum_magf64x":["_Float64x","(_Float64x, _Float64x)"],
"fminimum_magf64x":["_Float64x","(_Float64x, _Float64x)"],
"__fminimum_magf64x":["_Float64x","(_Float64x, _Float64x)"],
"fmaximum_mag_numf64x":["_Float64x","(_Float64x, _Float64x)"],
"__fmaximum_mag_numf64x":["_Float64x","(_Float64x, _Float64x)"],
"fminimum_mag_numf64x":["_Float64x","(_Float64x, _Float64x)"],
"__fminimum_mag_numf64x":["_Float64x","(_Float64x, _Float64x)"],
"totalorderf64x":["int","(const _Float64x *, const _Float64x *)"],
"totalordermagf64x":["int","(const _Float64x *, const _Float64x *)"],
"getpayloadf64x":["_Float64x","(const _Float64x *)"],
"__getpayloadf64x":["_Float64x","(const _Float64x *)"],
"setpayloadf64x":["int","(_Float64x *, _Float64x)"],
"setpayloadsigf64x":["int","(_Float64x *, _Float64x)"],
"fadd":["float","(double, double)"],
"fdiv":["float","(double, double)"],
"ffma":["float","(double, double, double)"],
"fmul":["float","(double, double)"],
"fsqrt":["float","(double)"],
"fsub":["float","(double, double)"],
"faddl":["float","(long double, long double)"],
"fdivl":["float","(long double, long double)"],
"ffmal":["float","(long double, long double, long double)"],
"fmull":["float","(long double, long double)"],
"fsqrtl":["float","(long double)"],
"fsubl":["float","(long double, long double)"],
"daddl":["double","(long double, long double)"],
"ddivl":["double","(long double, long double)"],
"dfmal":["double","(long double, long double, long double)"],
"dmull":["double","(long double, long double)"],
"dsqrtl":["double","(long double)"],
"dsubl":["double","(long double, long double)"],
"f32addf32x":["_Float32","(_Float32x, _Float32x)"],
"f32divf32x":["_Float32","(_Float32x, _Float32x)"],
"f32fmaf32x":["_Float32","(_Float32x, _Float32x, _Float32x)"],
"f32mulf32x":["_Float32","(_Float32x, _Float32x)"],
"f32sqrtf32x":["_Float32","(_Float32x)"],
"f32subf32x":["_Float32","(_Float32x, _Float32x)"],
"f32addf64":["_Float32","(_Float64, _Float64)"],
"f32divf64":["_Float32","(_Float64, _Float64)"],
"f32fmaf64":["_Float32","(_Float64, _Float64, _Float64)"],
"f32mulf64":["_Float32","(_Float64, _Float64)"],
"f32sqrtf64":["_Float32","(_Float64)"],
"f32subf64":["_Float32","(_Float64, _Float64)"],
"f32addf64x":["_Float32","(_Float64x, _Float64x)"],
"f32divf64x":["_Float32","(_Float64x, _Float64x)"],
"f32fmaf64x":["_Float32","(_Float64x, _Float64x, _Float64x)"],
"f32mulf64x":["_Float32","(_Float64x, _Float64x)"],
"f32sqrtf64x":["_Float32","(_Float64x)"],
"f32subf64x":["_Float32","(_Float64x, _Float64x)"],
"f32xaddf64":["_Float32x","(_Float64, _Float64)"],
"f32xdivf64":["_Float32x","(_Float64, _Float64)"],
"f32xfmaf64":["_Float32x","(_Float64, _Float64, _Float64)"],
"f32xmulf64":["_Float32x","(_Float64, _Float64)"],
"f32xsqrtf64":["_Float32x","(_Float64)"],
"f32xsubf64":["_Float32x","(_Float64, _Float64)"],
"f32xaddf64x":["_Float32x","(_Float64x, _Float64x)"],
"f32xdivf64x":["_Float32x","(_Float64x, _Float64x)"],
"f32xfmaf64x":["_Float32x","(_Float64x, _Float64x, _Float64x)"],
"f32xmulf64x":["_Float32x","(_Float64x, _Float64x)"],
"f32xsqrtf64x":["_Float32x","(_Float64x)"],
"f32xsubf64x":["_Float32x","(_Float64x, _Float64x)"],
"f64addf64x":["_Float64","(_Float64x, _Float64x)"],
"f64divf64x":["_Float64","(_Float64x, _Float64x)"],
"f64fmaf64x":["_Float64","(_Float64x, _Float64x, _Float64x)"],
"f64mulf64x":["_Float64","(_Float64x, _Float64x)"],
"f64sqrtf64x":["_Float64","(_Float64x)"],
"f64subf64x":["_Float64","(_Float64x, _Float64x)"],
"__iscanonicall":["int","(long double)"],
"iscanonical":"int",
"issignaling":"int",
"__call":"int",
"__ctype_get_mb_cur_max":["size_t","()"],
"atof":["double","(char const *)"],
"atoi":["int","(char const *)"],
"atol":["long","(char const *)"],
"atoll":["long long","(char const *)"],
"strtod":["double","(char const *__restrict, char **__restrict)"],
"strtof":["float","(char const *__restrict, char **__restrict)"],
"strtold":["long double","(char const *__restrict, char **__restrict)"],
"strtof32":["_Float32","(char const *__restrict, char **__restrict)"],
"strtof64":["_Float64","(char const *__restrict, char **__restrict)"],
"strtof32x":["_Float32x","(char const *__restrict, char **__restrict)"],
"strtof64x":["_Float64x","(char const *__restrict, char **__restrict)"],
"strtol":["long","(char const *__restrict, char **__restrict, int)"],
"strtoul":["unsigned long","(char const *__restrict, char **__restrict, int)"],
"strtoq":["long long","(char const *__restrict, char **__restrict, int)"],
"strtouq":["unsigned long long","(char const *__restrict, char **__restrict, int)"],
"strtoll":["long long","(char const *__restrict, char **__restrict, int)"],
"strtoull":["unsigned long long","(char const *__restrict, char **__restrict, int)"],
"strfromd":["int","(char *, size_t, char const *, double)"],
"strfromf":["int","(char *, size_t, char const *, float)"],
"strfroml":["int","(char *, size_t, char const *, long double)"],
"strfromf32":["int","(char *, size_t, char const *, _Float32)"],
"strfromf64":["int","(char *, size_t, char const *, _Float64)"],
"strfromf32x":["int","(char *, size_t, char const *, _Float32x)"],
"strfromf64x":["int","(char *, size_t, char const *, _Float64x)"],
"strtol_l":["long","(char const *__restrict, char **__restrict, int, locale_t)"],
"strtoul_l":["unsigned long","(char const *__restrict, char **__restrict, int, locale_t)"],
"strtoll_l":["long long","(char const *__restrict, char **__restrict, int, locale_t)"],
"strtoull_l":["unsigned long long","(char const *__restrict, char **__restrict, int, locale_t)"],
"strtod_l":["double","(char const *__restrict, char **__restrict, locale_t)"],
"strtof_l":["float","(char const *__restrict, char **__restrict, locale_t)"],
"strtold_l":["long double","(char const *__restrict, char **__restrict, locale_t)"],
"strtof32_l":["_Float32","(char const *__restrict, char **__restrict, locale_t)"],
"strtof64_l":["_Float64","(char const *__restrict, char **__restrict, locale_t)"],
"strtof32x_l":["_Float32x","(char const *__restrict, char **__restrict, locale_t)"],
"strtof64x_l":["_Float64x","(char const *__restrict, char **__restrict, locale_t)"],
"l64a":["char *","(long)"],
"a64l":["long","(char const *)"],
"__bswap_16":["__uint16_t","(__uint16_t)"],
"__bswap_32":["__uint32_t","(__uint32_t)"],
"__bswap_64":["__uint64_t","(__uint64_t)"],
"__uint16_identity":["__uint16_t","(__uint16_t)"],
"__uint32_identity":["__uint32_t","(__uint32_t)"],
"__uint64_identity":["__uint64_t","(__uint64_t)"],
"select":["int","(int, fd_set *__restrict, fd_set *__restrict, fd_set *__restrict, struct timeval *__restrict)"],
"pselect":["int","(int, fd_set *__restrict, fd_set *__restrict, fd_set *__restrict, const struct timespec *__restrict, const __sigset_t *__restrict)"],
"random":["long","()"],
"srandom":["void","(unsigned int)"],
"initstate":["char *","(unsigned int, char *, size_t)"],
"setstate":[("char *","(char *)"),("void","(std::ios_base::iostate)")],
"random_r":["int","(struct random_data *__restrict, int32_t *__restrict)"],
"srandom_r":["int","(unsigned int, struct random_data *)"],
"initstate_r":["int","(unsigned int, char *__restrict, size_t, struct random_data *__restrict)"],
"setstate_r":["int","(char *__restrict, struct random_data *__restrict)"],
"rand":["int","()"],
"srand":["void","(unsigned int)"],
"rand_r":["int","(unsigned int *)"],
"drand48":["double","()"],
"erand48":["double","(unsigned short *)"],
"lrand48":["long","()"],
"nrand48":["long","(unsigned short *)"],
"mrand48":["long","()"],
"jrand48":["long","(unsigned short *)"],
"srand48":["void","(long)"],
"seed48":["unsigned short *","(unsigned short *)"],
"lcong48":["void","(unsigned short *)"],
"drand48_r":["int","(struct drand48_data *__restrict, double *__restrict)"],
"erand48_r":["int","(unsigned short *, struct drand48_data *__restrict, double *__restrict)"],
"lrand48_r":["int","(struct drand48_data *__restrict, long *__restrict)"],
"nrand48_r":["int","(unsigned short *, struct drand48_data *__restrict, long *__restrict)"],
"mrand48_r":["int","(struct drand48_data *__restrict, long *__restrict)"],
"jrand48_r":["int","(unsigned short *, struct drand48_data *__restrict, long *__restrict)"],
"srand48_r":["int","(long, struct drand48_data *)"],
"seed48_r":["int","(unsigned short *, struct drand48_data *)"],
"lcong48_r":["int","(unsigned short *, struct drand48_data *)"],
"malloc":["void *","(size_t)"],
"calloc":["void *","(size_t, size_t)"],
"realloc":["void *","(void *, size_t)"],
"free":["void","(void *)"],
"reallocarray":"void *",
"alloca":["void *","(size_t)"],
"valloc":["void *","(size_t)"],
"posix_memalign":["int","(void **, size_t, size_t)"],
"aligned_alloc":["void *","(size_t, size_t)"],
"abort":["void","()"],
"atexit":["int","(void (*)())"],
"at_quick_exit":["int","(void (*)())"],
"on_exit":["int","(void (*)(int, void *), void *)"],
"exit":["void","(int)"],
"quick_exit":["void","(int)"],
"_Exit":["void","(int)"],
"getenv":["char *","(char const *)"],
"secure_getenv":["char *","(char const *)"],
"putenv":["int","(char *)"],
"setenv":["int","(char const *, char const *, int)"],
"unsetenv":["int","(char const *)"],
"clearenv":["int","()"],
"mktemp":["char *","(char *)"],
"mkstemp":["int","(char *)"],
"mkstemp64":["int","(char *)"],
"mkstemps":["int","(char *, int)"],
"mkstemps64":["int","(char *, int)"],
"mkdtemp":["char *","(char *)"],
"mkostemp":["int","(char *, int)"],
"mkostemp64":["int","(char *, int)"],
"mkostemps":["int","(char *, int, int)"],
"mkostemps64":["int","(char *, int, int)"],
"system":["int","(char const *)"],
"canonicalize_file_name":["char *","(char const *)"],
"realpath":["char *","(char const *__restrict, char *__restrict)"],
"bsearch":["void *","(void const*, void const*, size_t, size_t, __compar_fn_t)"],
"qsort":["void","(void *, size_t, size_t, __compar_fn_t)"],
"qsort_r":["void","(void *, size_t, size_t, __compar_d_fn_t, void *)"],
"abs":[("int","(int)"),("long","(long)"),("long long","(long long)"),("double","(double)"),("float","(float)"),("long double","(long double)"),("__int128","(__int128)"),("__float128","(__float128)")],
"labs":["long","(long)"],
"llabs":["long long","(long long)"],
"div":[("div_t","(int, int)"),("ldiv_t","(long, long)"),("lldiv_t","(long long, long long)")],
"ldiv":["ldiv_t","(long, long)"],
"lldiv":["lldiv_t","(long long, long long)"],
"ecvt":["char *","(double, int, int *__restrict, int *__restrict)"],
"fcvt":["char *","(double, int, int *__restrict, int *__restrict)"],
"gcvt":["char *","(double, int, char *)"],
"qecvt":["char *","(long double, int, int *__restrict, int *__restrict)"],
"qfcvt":["char *","(long double, int, int *__restrict, int *__restrict)"],
"qgcvt":["char *","(long double, int, char *)"],
"ecvt_r":["int","(double, int, int *__restrict, int *__restrict, char *__restrict, size_t)"],
"fcvt_r":["int","(double, int, int *__restrict, int *__restrict, char *__restrict, size_t)"],
"qecvt_r":["int","(long double, int, int *__restrict, int *__restrict, char *__restrict, size_t)"],
"qfcvt_r":["int","(long double, int, int *__restrict, int *__restrict, char *__restrict, size_t)"],
"mblen":["int","(char const *, size_t)"],
"mbtowc":["int","(wchar_t *__restrict, char const *__restrict, size_t)"],
"wctomb":["int","(char *, wchar_t)"],
"mbstowcs":["size_t","(wchar_t *__restrict, char const *__restrict, size_t)"],
"wcstombs":["size_t","(char *__restrict, const wchar_t *__restrict, size_t)"],
"rpmatch":["int","(char const *)"],
"getsubopt":["int","(char **__restrict, char *const *__restrict, char **__restrict)"],
"posix_openpt":["int","(int)"],
"grantpt":["int","(int)"],
"unlockpt":["int","(int)"],
"ptsname":["char *","(int)"],
"ptsname_r":["int","(int, char *, size_t)"],
"getpt":["int","()"],
"getloadavg":["int","(double *, int)"],
"fpclassify":"int",
"isfinite":"bool",
"isinf":"bool",
"isnan":"bool",
"isnormal":"bool",
"signbit":"bool",
"isgreater":"bool",
"isgreaterequal":"bool",
"isless":"bool",
"islessequal":"bool",
"islessgreater":"bool",
"isunordered":"bool",
"setjmp":["int","(struct __jmp_buf_tag *)"],
"__sigsetjmp":"int",
"_setjmp":["int","(struct __jmp_buf_tag *)"],
"longjmp":["void","(struct __jmp_buf_tag *, int)"],
"_longjmp":["void","(struct __jmp_buf_tag *, int)"],
"siglongjmp":["void","(struct __jmp_buf_tag *, int)"],
"__sysv_signal":["__sighandler_t","(int, __sighandler_t)"],
"sysv_signal":["__sighandler_t","(int, __sighandler_t)"],
"signal":["__sighandler_t","(int, __sighandler_t)"],
"kill":["int","(__pid_t, int)"],
"killpg":["int","(__pid_t, int)"],
"raise":["int","(int)"],
"ssignal":["__sighandler_t","(int, __sighandler_t)"],
"gsignal":["int","(int)"],
"psignal":["void","(int, char const *)"],
"psiginfo":["void","(const siginfo_t *, char const *)"],
"sigpause":["int","(int)"],
"sigblock":["int","(int)"],
"sigsetmask":["int","(int)"],
"siggetmask":["int","()"],
"sigemptyset":["int","(sigset_t *)"],
"sigfillset":["int","(sigset_t *)"],
"sigaddset":["int","(sigset_t *, int)"],
"sigdelset":["int","(sigset_t *, int)"],
"sigismember":["int","(const sigset_t *, int)"],
"sigisemptyset":["int","(const sigset_t *)"],
"sigandset":["int","(sigset_t *, const sigset_t *, const sigset_t *)"],
"sigorset":["int","(sigset_t *, const sigset_t *, const sigset_t *)"],
"sigprocmask":["int","(int, const sigset_t *__restrict, sigset_t *__restrict)"],
"sigsuspend":["int","(const sigset_t *)"],
"sigaction":["int","(int, const struct sigaction *__restrict, struct sigaction *__restrict)"],
"sigpending":["int","(sigset_t *)"],
"sigwait":["int","(const sigset_t *__restrict, int *__restrict)"],
"sigwaitinfo":["int","(const sigset_t *__restrict, siginfo_t *__restrict)"],
"sigtimedwait":["int","(const sigset_t *__restrict, siginfo_t *__restrict, const struct timespec *__restrict)"],
"sigqueue":["int","(__pid_t, int, const union sigval)"],
"sigreturn":["int","(struct sigcontext *)"],
"siginterrupt":["int","(int, int)"],
"access":["int","(char const *, int)"],
"euidaccess":["int","(char const *, int)"],
"eaccess":["int","(char const *, int)"],
"execveat":["int","(int, char const *, char *const *, char *const *, int)"],
"faccessat":["int","(int, char const *, int, int)"],
"lseek":["__off_t","(int, __off_t, int)"],
"lseek64":["__off64_t","(int, __off64_t, int)"],
"close":[("int","(int)"),("std::__basic_file<char> *","()"),("std::basic_filebuf::__filebuf_type *","()"),("void","()"),("std::basic_filebuf<_CharT, _Traits>::__filebuf_type *","()"),("void","(std::messages_base::catalog)")],
"closefrom":["void","(int)"],
"read":[("ssize_t","(int, void *, size_t)"),("std::istream &","(char *, long)"),("basic_istream<_CharT, _Traits> &","(char *, long)")],
"write":[("ssize_t","(int, void const*, size_t)"),("std::ostream &","(char const *, long)"),("basic_ostream<_CharT, _Traits> &","(const _CharT *, long)")],
"pread":["ssize_t","(int, void *, size_t, __off_t)"],
"pwrite":["ssize_t","(int, void const*, size_t, __off_t)"],
"pread64":["ssize_t","(int, void *, size_t, __off64_t)"],
"pwrite64":["ssize_t","(int, void const*, size_t, __off64_t)"],
"pipe":["int","(int *)"],
"pipe2":["int","(int *, int)"],
"alarm":["unsigned int","(unsigned int)"],
"sleep":["unsigned int","(unsigned int)"],
"ualarm":["__useconds_t","(__useconds_t, __useconds_t)"],
"usleep":["int","(__useconds_t)"],
"pause":["int","()"],
"chown":["int","(char const *, __uid_t, __gid_t)"],
"fchown":["int","(int, __uid_t, __gid_t)"],
"lchown":["int","(char const *, __uid_t, __gid_t)"],
"fchownat":["int","(int, char const *, __uid_t, __gid_t, int)"],
"chdir":["int","(char const *)"],
"fchdir":["int","(int)"],
"getcwd":["char *","(char *, size_t)"],
"get_current_dir_name":["char *","()"],
"getwd":["char *","(char *)"],
"dup":["int","(int)"],
"dup2":["int","(int, int)"],
"dup3":["int","(int, int, int)"],
"execve":["int","(char const *, char *const *, char *const *)"],
"fexecve":["int","(int, char *const *, char *const *)"],
"execv":["int","(char const *, char *const *)"],
"execle":["int","(char const *, char const *, ...)"],
"execl":["int","(char const *, char const *, ...)"],
"execvp":["int","(char const *, char *const *)"],
"execlp":["int","(char const *, char const *, ...)"],
"execvpe":["int","(char const *, char *const *, char *const *)"],
"nice":["int","(int)"],
"_exit":["void","(int)"],
"pathconf":["long","(char const *, int)"],
"fpathconf":["long","(int, int)"],
"sysconf":["long","(int)"],
"confstr":["size_t","(int, char *, size_t)"],
"getpid":["__pid_t","()"],
"getppid":["__pid_t","()"],
"getpgrp":["__pid_t","()"],
"__getpgid":["__pid_t","(__pid_t)"],
"getpgid":["__pid_t","(__pid_t)"],
"setpgid":["int","(__pid_t, __pid_t)"],
"setpgrp":["int","()"],
"setsid":["__pid_t","()"],
"getsid":["__pid_t","(__pid_t)"],
"getuid":["__uid_t","()"],
"geteuid":["__uid_t","()"],
"getgid":["__gid_t","()"],
"getegid":["__gid_t","()"],
"getgroups":["int","(int, __gid_t *)"],
"group_member":["int","(__gid_t)"],
"setuid":["int","(__uid_t)"],
"setreuid":["int","(__uid_t, __uid_t)"],
"seteuid":["int","(__uid_t)"],
"setgid":["int","(__gid_t)"],
"setregid":["int","(__gid_t, __gid_t)"],
"setegid":["int","(__gid_t)"],
"getresuid":["int","(__uid_t *, __uid_t *, __uid_t *)"],
"getresgid":["int","(__gid_t *, __gid_t *, __gid_t *)"],
"setresuid":["int","(__uid_t, __uid_t, __uid_t)"],
"setresgid":["int","(__gid_t, __gid_t, __gid_t)"],
"fork":["__pid_t","()"],
"vfork":["__pid_t","()"],
"_Fork":["__pid_t","()"],
"ttyname":["char *","(int)"],
"ttyname_r":["int","(int, char *, size_t)"],
"isatty":["int","(int)"],
"ttyslot":["int","()"],
"link":["int","(char const *, char const *)"],
"linkat":["int","(int, char const *, int, char const *, int)"],
"symlink":["int","(char const *, char const *)"],
"readlink":["ssize_t","(char const *__restrict, char *__restrict, size_t)"],
"symlinkat":["int","(char const *, int, char const *)"],
"readlinkat":["ssize_t","(int, char const *__restrict, char *__restrict, size_t)"],
"unlink":["int","(char const *)"],
"unlinkat":["int","(int, char const *, int)"],
"rmdir":["int","(char const *)"],
"tcgetpgrp":["__pid_t","(int)"],
"tcsetpgrp":["int","(int, __pid_t)"],
"getlogin":["char *","()"],
"getlogin_r":["int","(char *, size_t)"],
"setlogin":["int","(char const *)"],
"getopt":["int","(int, char *const *, char const *)"],
"gethostname":["int","(char *, size_t)"],
"sethostname":["int","(char const *, size_t)"],
"sethostid":["int","(long)"],
"getdomainname":["int","(char *, size_t)"],
"setdomainname":["int","(char const *, size_t)"],
"vhangup":["int","()"],
"revoke":["int","(char const *)"],
"profil":["int","(unsigned short *, size_t, size_t, unsigned int)"],
"acct":["int","(char const *)"],
"getusershell":["char *","()"],
"endusershell":["void","()"],
"setusershell":["void","()"],
"daemon":["int","(int, int)"],
"chroot":["int","(char const *)"],
"getpass":["char *","(char const *)"],
"fsync":["int","(int)"],
"syncfs":["int","(int)"],
"gethostid":["long","()"],
"sync":[("void","()"),("int","()")],
"getpagesize":["int","()"],
"getdtablesize":["int","()"],
"truncate":["int","(char const *, __off_t)"],
"truncate64":["int","(char const *, __off64_t)"],
"ftruncate":["int","(int, __off_t)"],
"ftruncate64":["int","(int, __off64_t)"],
"brk":["int","(void *)"],
"sbrk":["void *","(intptr_t)"],
"syscall":["long","(long, ...)"],
"lockf":["int","(int, int, __off_t)"],
"lockf64":["int","(int, int, __off64_t)"],
"copy_file_range":["ssize_t","(int, __off64_t *, int, __off64_t *, size_t, unsigned int)"],
"fdatasync":["int","(int)"],
"crypt":["char *","(char const *, char const *)"],
"swab":["void","(void const*__restrict, void *__restrict, ssize_t)"],
"getentropy":["int","(void *, size_t)"],
"close_range":["int","(unsigned int, unsigned int, int)"],
"gettid":["__pid_t","()"],
"sigaltstack":["int","(const stack_t *__restrict, stack_t *__restrict)"],
"sigstack":["int","(struct sigstack *, struct sigstack *)"],
"sighold":["int","(int)"],
"sigrelse":["int","(int)"],
"sigignore":["int","(int)"],
"sigset":["__sighandler_t","(int, __sighandler_t)"],
"pthread_sigmask":["int","(int, const __sigset_t *__restrict, __sigset_t *__restrict)"],
"pthread_kill":["int","(pthread_t, int)"],
"pthread_sigqueue":["int","(pthread_t, int, const union sigval)"],
"__libc_current_sigrtmin":["int","()"],
"__libc_current_sigrtmax":["int","()"],
"tgkill":["int","(__pid_t, __pid_t, int)"],
"remove":[("int","(char const *)"),("std::__cxx11::list::__remove_return_type","(const _Tp &)"),("std::list<_Tp, _Alloc>::__remove_return_type","(const std::__cxx11::list::value_type &)"),("std::forward_list::__remove_return_type","(const _Tp &)")],
"rename":["int","(char const *, char const *)"],
"renameat":["int","(int, char const *, int, char const *)"],
"renameat2":["int","(int, char const *, int, char const *, unsigned int)"],
"fclose":["int","(FILE *)"],
"tmpfile":["FILE *","()"],
"tmpfile64":["FILE *","()"],
"tmpnam":["char *","(char *)"],
"tmpnam_r":["char *","(char *)"],
"tempnam":["char *","(char const *, char const *)"],
"fflush":["int","(FILE *)"],
"fflush_unlocked":["int","(FILE *)"],
"fcloseall":["int","()"],
"fopen":["FILE *","(char const *__restrict, char const *__restrict)"],
"freopen":["FILE *","(char const *__restrict, char const *__restrict, FILE *__restrict)"],
"fopen64":["FILE *","(char const *__restrict, char const *__restrict)"],
"freopen64":["FILE *","(char const *__restrict, char const *__restrict, FILE *__restrict)"],
"fdopen":["FILE *","(int, char const *)"],
"fopencookie":["FILE *","(void *__restrict, char const *__restrict, cookie_io_functions_t)"],
"fmemopen":["FILE *","(void *, size_t, char const *)"],
"open_memstream":["FILE *","(char **, size_t *)"],
"setbuf":[("void","(FILE *__restrict, char *__restrict)"),("std::basic_streambuf<std::basic_streambuf::char_type, _Traits> *","(std::basic_streambuf::char_type *, long)"),("std::basic_streambuf *","(char *, long)"),("std::basic_filebuf::__streambuf_type *","(std::basic_filebuf::char_type *, long)"),("std::basic_filebuf<_CharT, _Traits>::__streambuf_type *","(std::basic_filebuf::char_type *, long)")],
"setvbuf":["int","(FILE *__restrict, char *__restrict, int, size_t)"],
"setbuffer":["void","(FILE *__restrict, char *__restrict, size_t)"],
"setlinebuf":["void","(FILE *)"],
"fprintf":["int","(FILE *__restrict, char const *__restrict, ...)"],
"printf":["int","(char const *__restrict, ...)"],
"sprintf":["int","(char *__restrict, char const *__restrict, ...)"],
"vfprintf":["int","(FILE *__restrict, char const *__restrict, __va_list_tag *)"],
"vprintf":["int","(char const *__restrict, __va_list_tag *)"],
"vsprintf":["int","(char *__restrict, char const *__restrict, __va_list_tag *)"],
"snprintf":["int","(char *__restrict, size_t, char const *__restrict, ...)"],
"vsnprintf":["int","(char *__restrict, size_t, char const *__restrict, __va_list_tag *)"],
"vasprintf":["int","(char **__restrict, char const *__restrict, __va_list_tag *)"],
"__asprintf":["int","(char **__restrict, char const *__restrict, ...)"],
"asprintf":["int","(char **__restrict, char const *__restrict, ...)"],
"vdprintf":["int","(int, char const *__restrict, __va_list_tag *)"],
"dprintf":["int","(int, char const *__restrict, ...)"],
"fscanf":"int",
"scanf":"int",
"sscanf":"int",
"vfscanf":"int",
"vscanf":"int",
"vsscanf":"int",
"fgetc":["int","(FILE *)"],
"getc":["int","(FILE *)"],
"getchar":["int","()"],
"getc_unlocked":["int","(FILE *)"],
"getchar_unlocked":["int","()"],
"fgetc_unlocked":["int","(FILE *)"],
"fputc":["int","(int, FILE *)"],
"putc":["int","(int, FILE *)"],
"putchar":["int","(int)"],
"fputc_unlocked":["int","(int, FILE *)"],
"putc_unlocked":["int","(int, FILE *)"],
"putchar_unlocked":["int","(int)"],
"getw":["int","(FILE *)"],
"putw":["int","(int, FILE *)"],
"fgets":["char *","(char *__restrict, int, FILE *__restrict)"],
"fgets_unlocked":["char *","(char *__restrict, int, FILE *__restrict)"],
"__getdelim":["__ssize_t","(char **__restrict, size_t *__restrict, int, FILE *__restrict)"],
"getdelim":["__ssize_t","(char **__restrict, size_t *__restrict, int, FILE *__restrict)"],
"getline":[("__ssize_t","(char **__restrict, size_t *__restrict, FILE *__restrict)"),("basic_istream<char> &","(basic_istream<char> &,std::basic_string<char> &, char)"),("basic_istream<wchar_t> &","(basic_istream<wchar_t> &,std::basic_string<wchar_t> &, wchar_t)"),("std::istream &","(char *, long, char)"),("std::istream &","(char *, long)"),("basic_istream<char> &","(std::istream<char, std::char_traits<char>>::char_type *, long, std::istream<char, std::char_traits<char>>::char_type)"),("basic_istream<wchar_t> &","(std::istream<wchar_t, std::char_traits<wchar_t>>::char_type *, long, std::istream<wchar_t, std::char_traits<wchar_t>>::char_type)"),("basic_istream<_CharT, _Traits> &","(char *, long, char)")],
"fputs":["int","(char const *__restrict, FILE *__restrict)"],
"puts":["int","(char const *)"],
"ungetc":["int","(int, FILE *)"],
"fread":["size_t","(void *__restrict, size_t, size_t, FILE *__restrict)"],
"fwrite":["size_t","(void const*__restrict, size_t, size_t, FILE *__restrict)"],
"fputs_unlocked":["int","(char const *__restrict, FILE *__restrict)"],
"fread_unlocked":["size_t","(void *__restrict, size_t, size_t, FILE *__restrict)"],
"fwrite_unlocked":["size_t","(void const*__restrict, size_t, size_t, FILE *__restrict)"],
"fseek":["int","(FILE *, long, int)"],
"ftell":["long","(FILE *)"],
"rewind":["void","(FILE *)"],
"fseeko":["int","(FILE *, __off_t, int)"],
"ftello":["__off_t","(FILE *)"],
"fgetpos":["int","(FILE *__restrict, fpos_t *__restrict)"],
"fsetpos":["int","(FILE *, const fpos_t *)"],
"fseeko64":["int","(FILE *, __off64_t, int)"],
"ftello64":["__off64_t","(FILE *)"],
"fgetpos64":["int","(FILE *__restrict, fpos64_t *__restrict)"],
"fsetpos64":["int","(FILE *, const fpos64_t *)"],
"clearerr":["void","(FILE *)"],
"feof":["int","(FILE *)"],
"ferror":["int","(FILE *)"],
"clearerr_unlocked":["void","(FILE *)"],
"feof_unlocked":["int","(FILE *)"],
"ferror_unlocked":["int","(FILE *)"],
"perror":["void","(char const *)"],
"fileno":["int","(FILE *)"],
"fileno_unlocked":["int","(FILE *)"],
"pclose":["int","(FILE *)"],
"popen":["FILE *","(char const *, char const *)"],
"ctermid":["char *","(char *)"],
"cuserid":["char *","(char *)"],
"obstack_printf":["int","(struct obstack *__restrict, char const *__restrict, ...)"],
"obstack_vprintf":["int","(struct obstack *__restrict, char const *__restrict, __va_list_tag *)"],
"flockfile":["void","(FILE *)"],
"ftrylockfile":["int","(FILE *)"],
"funlockfile":["void","(FILE *)"],
"__uflow":["int","(FILE *)"],
"__overflow":["int","(FILE *, int)"],
"memcpy":["void *","(void *__restrict, void const*__restrict, size_t)"],
"memmove":["void *","(void *, void const*, size_t)"],
"memccpy":["void *","(void *__restrict, void const*__restrict, int, size_t)"],
"memset":["void *","(void *, int, size_t)"],
"memcmp":["int","(void const*, void const*, size_t)"],
"__memcmpeq":["int","(void const*, void const*, size_t)"],
"memchr":[("void *","(void *, int, size_t)"),("void const*","(void const*, int, size_t)")],
"rawmemchr":[("void *","(void *, int)"),("void const*","(void const*, int)")],
"memrchr":[("void *","(void *, int, size_t)"),("void const*","(void const*, int, size_t)")],
"strcpy":["char *","(char *__restrict, char const *__restrict)"],
"strncpy":["char *","(char *__restrict, char const *__restrict, size_t)"],
"strcat":["char *","(char *__restrict, char const *__restrict)"],
"strncat":["char *","(char *__restrict, char const *__restrict, size_t)"],
"strcmp":["int","(char const *, char const *)"],
"strncmp":["int","(char const *, char const *, size_t)"],
"strcoll":["int","(char const *, char const *)"],
"strxfrm":["size_t","(char *__restrict, char const *__restrict, size_t)"],
"strcoll_l":["int","(char const *, char const *, locale_t)"],
"strxfrm_l":["size_t","(char *, char const *, size_t, locale_t)"],
"strdup":["char *","(char const *)"],
"strndup":["char *","(char const *, size_t)"],
"strchr":[("char *","(char *, int)"),("char const *","(char const *, int)")],
"strrchr":[("char *","(char *, int)"),("char const *","(char const *, int)")],
"strchrnul":[("char *","(char *, int)"),("char const *","(char const *, int)")],
"strcspn":["size_t","(char const *, char const *)"],
"strspn":["size_t","(char const *, char const *)"],
"strpbrk":[("char *","(char *, char const *)"),("char const *","(char const *, char const *)")],
"strstr":[("char *","(char *, char const *)"),("char const *","(char const *, char const *)")],
"strtok":["char *","(char *__restrict, char const *__restrict)"],
"__strtok_r":["char *","(char *__restrict, char const *__restrict, char **__restrict)"],
"strtok_r":["char *","(char *__restrict, char const *__restrict, char **__restrict)"],
"strcasestr":[("char *","(char *, char const *)"),("char const *","(char const *, char const *)")],
"memmem":["void *","(void const*, size_t, void const*, size_t)"],
"__mempcpy":["void *","(void *__restrict, void const*__restrict, size_t)"],
"mempcpy":["void *","(void *__restrict, void const*__restrict, size_t)"],
"strlen":["size_t","(char const *)"],
"strnlen":["size_t","(char const *, size_t)"],
"strerror":["char *","(int)"],
"strerror_r":["char *","(int, char *, size_t)"],
"strerrordesc_np":["char const *","(int)"],
"strerrorname_np":["char const *","(int)"],
"strerror_l":["char *","(int, locale_t)"],
"bcmp":["int","(void const*, void const*, size_t)"],
"bcopy":["void","(void const*, void *, size_t)"],
"bzero":["void","(void *, size_t)"],
"index":["char *","(char const *, int)"],
"rindex":["char *","(char const *, int)"],
"ffs":["int","(int)"],
"ffsl":["int","(long)"],
"ffsll":["int","(long long)"],
"strcasecmp":["int","(char const *, char const *)"],
"strncasecmp":["int","(char const *, char const *, size_t)"],
"strcasecmp_l":["int","(char const *, char const *, locale_t)"],
"strncasecmp_l":["int","(char const *, char const *, size_t, locale_t)"],
"explicit_bzero":["void","(void *, size_t)"],
"strsep":["char *","(char **__restrict, char const *__restrict)"],
"strsignal":["char *","(int)"],
"sigabbrev_np":["char const *","(int)"],
"sigdescr_np":["char const *","(int)"],
"__stpcpy":["char *","(char *__restrict, char const *__restrict)"],
"stpcpy":["char *","(char *__restrict, char const *__restrict)"],
"__stpncpy":["char *","(char *__restrict, char const *__restrict, size_t)"],
"stpncpy":["char *","(char *__restrict, char const *__restrict, size_t)"],
"strverscmp":["int","(char const *, char const *)"],
"strfry":["char *","(char *)"],
"memfrob":["void *","(void *, size_t)"],
"basename":[("char *","(char *)"),("char const *","(char const *)")],
"clock_adjtime":["int","(__clockid_t, struct timex *)"],
"clock":["clock_t","()"],
"time":["time_t","(time_t *)"],
"difftime":["double","(time_t, time_t)"],
"mktime":["time_t","(struct tm *)"],
"strftime":["size_t","(char *__restrict, size_t, char const *__restrict, const struct tm *__restrict)"],
"strptime":["char *","(char const *__restrict, char const *__restrict, struct tm *)"],
"strftime_l":["size_t","(char *__restrict, size_t, char const *__restrict, const struct tm *__restrict, locale_t)"],
"strptime_l":["char *","(char const *__restrict, char const *__restrict, struct tm *, locale_t)"],
"gmtime":["struct tm *","(const time_t *)"],
"localtime":["struct tm *","(const time_t *)"],
"gmtime_r":["struct tm *","(const time_t *__restrict, struct tm *__restrict)"],
"localtime_r":["struct tm *","(const time_t *__restrict, struct tm *__restrict)"],
"asctime":["char *","(const struct tm *)"],
"ctime":["char *","(const time_t *)"],
"asctime_r":["char *","(const struct tm *__restrict, char *__restrict)"],
"ctime_r":["char *","(const time_t *__restrict, char *__restrict)"],
"tzset":["void","()"],
"timegm":["time_t","(struct tm *)"],
"timelocal":["time_t","(struct tm *)"],
"dysize":["int","(int)"],
"nanosleep":["int","(const struct timespec *, struct timespec *)"],
"clock_getres":["int","(clockid_t, struct timespec *)"],
"clock_gettime":["int","(clockid_t, struct timespec *)"],
"clock_settime":["int","(clockid_t, const struct timespec *)"],
"clock_nanosleep":["int","(clockid_t, int, const struct timespec *, struct timespec *)"],
"clock_getcpuclockid":["int","(pid_t, clockid_t *)"],
"timer_create":["int","(clockid_t, struct sigevent *__restrict, timer_t *__restrict)"],
"timer_delete":["int","(timer_t)"],
"timer_settime":["int","(timer_t, int, const struct itimerspec *__restrict, struct itimerspec *__restrict)"],
"timer_gettime":["int","(timer_t, struct itimerspec *)"],
"timer_getoverrun":["int","(timer_t)"],
"timespec_get":["int","(struct timespec *, int)"],
"timespec_getres":["int","(struct timespec *, int)"],
"getdate":["struct tm *","(char const *)"],
"getdate_r":["int","(char const *__restrict, struct tm *__restrict)"],
"wcscpy":["wchar_t *","(wchar_t *__restrict, const wchar_t *__restrict)"],
"wcsncpy":["wchar_t *","(wchar_t *__restrict, const wchar_t *__restrict, size_t)"],
"wcscat":["wchar_t *","(wchar_t *__restrict, const wchar_t *__restrict)"],
"wcsncat":["wchar_t *","(wchar_t *__restrict, const wchar_t *__restrict, size_t)"],
"wcscmp":["int","(const wchar_t *, const wchar_t *)"],
"wcsncmp":["int","(const wchar_t *, const wchar_t *, size_t)"],
"wcscasecmp":["int","(const wchar_t *, const wchar_t *)"],
"wcsncasecmp":["int","(const wchar_t *, const wchar_t *, size_t)"],
"wcscasecmp_l":["int","(const wchar_t *, const wchar_t *, locale_t)"],
"wcsncasecmp_l":["int","(const wchar_t *, const wchar_t *, size_t, locale_t)"],
"wcscoll":["int","(const wchar_t *, const wchar_t *)"],
"wcsxfrm":["size_t","(wchar_t *__restrict, const wchar_t *__restrict, size_t)"],
"wcscoll_l":["int","(const wchar_t *, const wchar_t *, locale_t)"],
"wcsxfrm_l":["size_t","(wchar_t *, const wchar_t *, size_t, locale_t)"],
"wcsdup":["wchar_t *","(const wchar_t *)"],
"wcschr":"wchar_t *",
"wcsrchr":"wchar_t *",
"wcschrnul":["wchar_t *","(const wchar_t *, wchar_t)"],
"wcscspn":["size_t","(const wchar_t *, const wchar_t *)"],
"wcsspn":["size_t","(const wchar_t *, const wchar_t *)"],
"wcspbrk":"wchar_t *",
"wcsstr":"wchar_t *",
"wcstok":["wchar_t *","(wchar_t *__restrict, const wchar_t *__restrict, wchar_t **__restrict)"],
"wcslen":["size_t","(const wchar_t *)"],
"wcswcs":["wchar_t *","(const wchar_t *, const wchar_t *)"],
"wcsnlen":["size_t","(const wchar_t *, size_t)"],
"wmemchr":"wchar_t *",
"wmemcmp":["int","(const wchar_t *, const wchar_t *, size_t)"],
"wmemcpy":["wchar_t *","(wchar_t *__restrict, const wchar_t *__restrict, size_t)"],
"wmemmove":["wchar_t *","(wchar_t *, const wchar_t *, size_t)"],
"wmemset":["wchar_t *","(wchar_t *, wchar_t, size_t)"],
"wmempcpy":["wchar_t *","(wchar_t *__restrict, const wchar_t *__restrict, size_t)"],
"btowc":["wint_t","(int)"],
"wctob":["int","(wint_t)"],
"mbsinit":["int","(const mbstate_t *)"],
"mbrtowc":["size_t","(wchar_t *__restrict, char const *__restrict, size_t, mbstate_t *__restrict)"],
"wcrtomb":["size_t","(char *__restrict, wchar_t, mbstate_t *__restrict)"],
"__mbrlen":["size_t","(char const *__restrict, size_t, mbstate_t *__restrict)"],
"mbrlen":["size_t","(char const *__restrict, size_t, mbstate_t *__restrict)"],
"mbsrtowcs":["size_t","(wchar_t *__restrict, char const **__restrict, size_t, mbstate_t *__restrict)"],
"wcsrtombs":["size_t","(char *__restrict, const wchar_t **__restrict, size_t, mbstate_t *__restrict)"],
"mbsnrtowcs":["size_t","(wchar_t *__restrict, char const **__restrict, size_t, size_t, mbstate_t *__restrict)"],
"wcsnrtombs":["size_t","(char *__restrict, const wchar_t **__restrict, size_t, size_t, mbstate_t *__restrict)"],
"wcwidth":["int","(wchar_t)"],
"wcswidth":["int","(const wchar_t *, size_t)"],
"wcstod":["double","(const wchar_t *__restrict, wchar_t **__restrict)"],
"wcstof":["float","(const wchar_t *__restrict, wchar_t **__restrict)"],
"wcstold":["long double","(const wchar_t *__restrict, wchar_t **__restrict)"],
"wcstof32":["_Float32","(const wchar_t *__restrict, wchar_t **__restrict)"],
"wcstof64":["_Float64","(const wchar_t *__restrict, wchar_t **__restrict)"],
"wcstof32x":["_Float32x","(const wchar_t *__restrict, wchar_t **__restrict)"],
"wcstof64x":["_Float64x","(const wchar_t *__restrict, wchar_t **__restrict)"],
"wcstol":["long","(const wchar_t *__restrict, wchar_t **__restrict, int)"],
"wcstoul":["unsigned long","(const wchar_t *__restrict, wchar_t **__restrict, int)"],
"wcstoll":["long long","(const wchar_t *__restrict, wchar_t **__restrict, int)"],
"wcstoull":["unsigned long long","(const wchar_t *__restrict, wchar_t **__restrict, int)"],
"wcstoq":["long long","(const wchar_t *__restrict, wchar_t **__restrict, int)"],
"wcstouq":["unsigned long long","(const wchar_t *__restrict, wchar_t **__restrict, int)"],
"wcstol_l":["long","(const wchar_t *__restrict, wchar_t **__restrict, int, locale_t)"],
"wcstoul_l":["unsigned long","(const wchar_t *__restrict, wchar_t **__restrict, int, locale_t)"],
"wcstoll_l":["long long","(const wchar_t *__restrict, wchar_t **__restrict, int, locale_t)"],
"wcstoull_l":["unsigned long long","(const wchar_t *__restrict, wchar_t **__restrict, int, locale_t)"],
"wcstod_l":["double","(const wchar_t *__restrict, wchar_t **__restrict, locale_t)"],
"wcstof_l":["float","(const wchar_t *__restrict, wchar_t **__restrict, locale_t)"],
"wcstold_l":["long double","(const wchar_t *__restrict, wchar_t **__restrict, locale_t)"],
"wcstof32_l":["_Float32","(const wchar_t *__restrict, wchar_t **__restrict, locale_t)"],
"wcstof64_l":["_Float64","(const wchar_t *__restrict, wchar_t **__restrict, locale_t)"],
"wcstof32x_l":["_Float32x","(const wchar_t *__restrict, wchar_t **__restrict, locale_t)"],
"wcstof64x_l":["_Float64x","(const wchar_t *__restrict, wchar_t **__restrict, locale_t)"],
"wcpcpy":["wchar_t *","(wchar_t *__restrict, const wchar_t *__restrict)"],
"wcpncpy":["wchar_t *","(wchar_t *__restrict, const wchar_t *__restrict, size_t)"],
"open_wmemstream":["__FILE *","(wchar_t **, size_t *)"],
"fwide":["int","(__FILE *, int)"],
"fwprintf":["int","(__FILE *__restrict, const wchar_t *__restrict, ...)"],
"wprintf":["int","(const wchar_t *__restrict, ...)"],
"swprintf":["int","(wchar_t *__restrict, size_t, const wchar_t *__restrict, ...)"],
"vfwprintf":["int","(__FILE *__restrict, const wchar_t *__restrict, __va_list_tag *)"],
"vwprintf":["int","(const wchar_t *__restrict, __va_list_tag *)"],
"vswprintf":["int","(wchar_t *__restrict, size_t, const wchar_t *__restrict, __va_list_tag *)"],
"fwscanf":"int",
"wscanf":"int",
"swscanf":"int",
"vfwscanf":"int",
"vwscanf":"int",
"vswscanf":"int",
"fgetwc":["wint_t","(__FILE *)"],
"getwc":["wint_t","(__FILE *)"],
"getwchar":["wint_t","()"],
"fputwc":["wint_t","(wchar_t, __FILE *)"],
"putwc":["wint_t","(wchar_t, __FILE *)"],
"putwchar":["wint_t","(wchar_t)"],
"fgetws":["wchar_t *","(wchar_t *__restrict, int, __FILE *__restrict)"],
"fputws":["int","(const wchar_t *__restrict, __FILE *__restrict)"],
"ungetwc":["wint_t","(wint_t, __FILE *)"],
"getwc_unlocked":["wint_t","(__FILE *)"],
"getwchar_unlocked":["wint_t","()"],
"fgetwc_unlocked":["wint_t","(__FILE *)"],
"fputwc_unlocked":["wint_t","(wchar_t, __FILE *)"],
"putwc_unlocked":["wint_t","(wchar_t, __FILE *)"],
"putwchar_unlocked":["wint_t","(wchar_t)"],
"fgetws_unlocked":["wchar_t *","(wchar_t *__restrict, int, __FILE *__restrict)"],
"fputws_unlocked":["int","(const wchar_t *__restrict, __FILE *__restrict)"],
"wcsftime":["size_t","(wchar_t *__restrict, size_t, const wchar_t *__restrict, const struct tm *__restrict)"],
"wcsftime_l":["size_t","(wchar_t *__restrict, size_t, const wchar_t *__restrict, const struct tm *__restrict, locale_t)"],
"iswalnum":["int","(wint_t)"],
"iswalpha":["int","(wint_t)"],
"iswcntrl":["int","(wint_t)"],
"iswdigit":["int","(wint_t)"],
"iswgraph":["int","(wint_t)"],
"iswlower":["int","(wint_t)"],
"iswprint":["int","(wint_t)"],
"iswpunct":["int","(wint_t)"],
"iswspace":["int","(wint_t)"],
"iswupper":["int","(wint_t)"],
"iswxdigit":["int","(wint_t)"],
"iswblank":["int","(wint_t)"],
"wctype":["wctype_t","(char const *)"],
"iswctype":["int","(wint_t, wctype_t)"],
"towlower":["wint_t","(wint_t)"],
"towupper":["wint_t","(wint_t)"],
"wctrans":["wctrans_t","(char const *)"],
"towctrans":["wint_t","(wint_t, wctrans_t)"],
"iswalnum_l":["int","(wint_t, locale_t)"],
"iswalpha_l":["int","(wint_t, locale_t)"],
"iswcntrl_l":["int","(wint_t, locale_t)"],
"iswdigit_l":["int","(wint_t, locale_t)"],
"iswgraph_l":["int","(wint_t, locale_t)"],
"iswlower_l":["int","(wint_t, locale_t)"],
"iswprint_l":["int","(wint_t, locale_t)"],
"iswpunct_l":["int","(wint_t, locale_t)"],
"iswspace_l":["int","(wint_t, locale_t)"],
"iswupper_l":["int","(wint_t, locale_t)"],
"iswxdigit_l":["int","(wint_t, locale_t)"],
"iswblank_l":["int","(wint_t, locale_t)"],
"wctype_l":["wctype_t","(char const *, locale_t)"],
"iswctype_l":["int","(wint_t, wctype_t, locale_t)"],
"towlower_l":["wint_t","(wint_t, locale_t)"],
"towupper_l":["wint_t","(wint_t, locale_t)"],
"wctrans_l":["wctrans_t","(char const *, locale_t)"],
"towctrans_l":["wint_t","(wint_t, wctrans_t, locale_t)"],
"operator=":[("fpos<_StateT> &","(const fpos<_StateT> &)"),("std::exception &","(const std::exception &)"),("std::exception &","(std::exception &&)"),("std::type_info &","(const std::type_info &)"),("std::bad_alloc &","(const std::bad_alloc &)"),("std::__exception_ptr::exception_ptr &","(const std::__exception_ptr::exception_ptr &)"),("std::__exception_ptr::exception_ptr &","(std::__exception_ptr::exception_ptr &&)"),("std::__exception_ptr::exception_ptr &","(const std::__exception_ptr::exception_ptr &)"),("void","(const std::__nonesuch &)"),("std::nested_exception &","(const std::nested_exception &)"),("__pair_base<_U1, _U2> &","(const __pair_base<_U1, _U2> &)"),("pair<_T1, _T2> &","(std::conditional<__and_<is_copy_assignable<_T1>, is_copy_assignable<_T2>>::value, const pair<_T1, _T2> &, const __nonesuch &>::type)"),("pair<_T1, _T2> &","(std::conditional<__and_<is_move_assignable<_T1>, is_move_assignable<_T2>>::value, pair<_T1, _T2> &&, __nonesuch &&>::type)"),("reverse_iterator<_Iterator> &","(const reverse_iterator<_Iterator> &)"),("back_insert_iterator<_Container> &","(const std::_Container::value_type &)"),("back_insert_iterator<_Container> &","(std::_Container::value_type &&)"),("front_insert_iterator<_Container> &","(const std::_Container::value_type &)"),("front_insert_iterator<_Container> &","(std::_Container::value_type &&)"),("insert_iterator<_Container> &","(const std::_Container::value_type &)"),("insert_iterator<_Container> &","(std::_Container::value_type &&)"),("allocator<type-parameter-0-0> &","(const allocator<type-parameter-0-0> &)"),("std::basic_string<_CharT, _Traits, _Alloc> &","(conststd::basic_string<_CharT, _Traits, _Alloc> &)"),("std::basic_string<_CharT, _Traits, _Alloc> &","(const _CharT *)"),("std::basic_string<_CharT, _Traits, _Alloc> &","(_CharT)"),("std::basic_string<_CharT, _Traits, _Alloc> &","std::basic_string<_CharT, _Traits, _Alloc> &&)"),("std::basic_string<_CharT, _Traits, _Alloc> &","(initializer_list<_CharT>)"),("std::locale const&","(std::locale const&)"),("std::locale::facet &","(const std::locale::facet &)"),("void","(const std::locale::id &)"),("void","(const std::locale::_Impl &)"),("std::__cow_string &","(const std::__cow_string &)"),("std::__cow_string &","(std::__cow_string &&)"),("std::logic_error &","(std::logic_error &&)"),("std::logic_error &","(const std::logic_error &)"),("std::domain_error &","(const std::domain_error &)"),("std::domain_error &","(std::domain_error &&)"),("std::invalid_argument &","(const std::invalid_argument &)"),("std::invalid_argument &","(std::invalid_argument &&)"),("std::length_error &","(const std::length_error &)"),("std::length_error &","(std::length_error &&)"),("std::out_of_range &","(const std::out_of_range &)"),("std::out_of_range &","(std::out_of_range &&)"),("std::runtime_error &","(std::runtime_error &&)"),("std::runtime_error &","(const std::runtime_error &)"),("std::range_error &","(const std::range_error &)"),("std::range_error &","(std::range_error &&)"),("std::overflow_error &","(const std::overflow_error &)"),("std::overflow_error &","(std::overflow_error &&)"),("std::underflow_error &","(const std::underflow_error &)"),("std::underflow_error &","(std::underflow_error &&)"),("std::_V2::error_category &","(const std::_V2::error_category &)"),("std::system_error &","(const std::system_error &)"),("std::ios_base::Init &","(const std::ios_base::Init &)"),("std::ios_base &","(const std::ios_base &)"),("std::basic_streambuf<_CharT, _Traits> &","(const basic_streambuf<_CharT, _Traits> &)"),("std::basic_streambuf<_CharT, _Traits> &","(const basic_streambuf<_CharT, _Traits> &)"),("istreambuf_iterator<_CharT, _Traits> &","(const istreambuf_iterator<_CharT, _Traits> &)"),("ostreambuf_iterator<_CharT, _Traits> &","(_CharT)"),("__numpunct_cache<_CharT> &","(const __numpunct_cache<_CharT> &)"),("basic_ios<_CharT, _Traits> &","(const basic_ios<_CharT, _Traits> &)"),("basic_ostream<_CharT, _Traits> &","(const basic_ostream<_CharT, _Traits> &)"),("basic_ostream<_CharT, _Traits> &","(basic_ostream<_CharT, _Traits> &&)"),("basic_istream<_CharT, _Traits> &","(const basic_istream<_CharT, _Traits> &)"),("basic_istream<_CharT, _Traits> &","(basic_istream<_CharT, _Traits> &&)"),("basic_iostream<_CharT, _Traits> &","(const basic_iostream<_CharT, _Traits> &)"),("basic_iostream<_CharT, _Traits> &","(basic_iostream<_CharT, _Traits> &&)"),("basic_stringbuf<_CharT, _Traits, _Alloc> &","(const basic_stringbuf<_CharT, _Traits, _Alloc> &)"),("basic_stringbuf<_CharT, _Traits, _Alloc> &","(basic_stringbuf<_CharT, _Traits, _Alloc> &&)"),("basic_istringstream<_CharT, _Traits, _Alloc> &","(const basic_istringstream<_CharT, _Traits, _Alloc> &)"),("basic_istringstream<_CharT, _Traits, _Alloc> &","(basic_istringstream<_CharT, _Traits, _Alloc> &&)"),("basic_ostringstream<_CharT, _Traits, _Alloc> &","(const basic_ostringstream<_CharT, _Traits, _Alloc> &)"),("basic_ostringstream<_CharT, _Traits, _Alloc> &","(basic_ostringstream<_CharT, _Traits, _Alloc> &&)"),("basic_stringstream<_CharT, _Traits, _Alloc> &","(const basic_stringstream<_CharT, _Traits, _Alloc> &)"),("basic_stringstream<_CharT, _Traits, _Alloc> &","(basic_stringstream<_CharT, _Traits, _Alloc> &&)"),("complex<_Tp> &","(const _Tp &)"),("complex<_Tp> &","(const complex<_Tp> &)"),("complex<_Tp> &","(const _Tp &)"),("std::complex<float> &","(float)"),("std::complex<float> &","(const std::complex<float> &)"),("std::complex<double> &","(double)"),("std::complex<double> &","(const std::complex<double> &)"),("std::complex<long double> &","(long double)"),("std::complex<long double> &","(const std::complex<long double> &)"),("void","(const _Temporary_buffer<_ForwardIterator, _Tp> &)"),("std::bitset::reference &","(bool)"),("std::bitset::reference &","(const std::bitset::reference &)"),("_Deque_iterator<_Tp, _Ref, _Ptr> &","(const _Deque_iterator<_Tp, _Ref, _Ptr> &)"),("std::_Deque_base::_Deque_impl_data &","(const std::_Deque_base::_Deque_impl_data &)"),("deque<_Tp, _Alloc> &","(const deque<_Tp, _Alloc> &)"),("deque<_Tp, _Alloc> &","(deque<_Tp, _Alloc> &&)"),("deque<_Tp, _Alloc> &","(initializer_list<std::deque::value_type>)"),("deque<_Tp, _Alloc> &","(const deque<_Tp, _Alloc> &)"),("std::__basic_file<char> &","(const std::__basic_file<char> &)"),("std::__basic_file<char> &","(std::__basic_file<char> &&)"),("basic_filebuf<_CharT, _Traits> &","(const basic_filebuf<_CharT, _Traits> &)"),("basic_filebuf<_CharT, _Traits> &","(basic_filebuf<_CharT, _Traits> &&)"),("basic_ifstream<_CharT, _Traits> &","(const basic_ifstream<_CharT, _Traits> &)"),("basic_ifstream<_CharT, _Traits> &","(basic_ifstream<_CharT, _Traits> &&)"),("basic_ofstream<_CharT, _Traits> &","(const basic_ofstream<_CharT, _Traits> &)"),("basic_ofstream<_CharT, _Traits> &","(basic_ofstream<_CharT, _Traits> &&)"),("basic_fstream<_CharT, _Traits> &","(const basic_fstream<_CharT, _Traits> &)"),("basic_fstream<_CharT, _Traits> &","(basic_fstream<_CharT, _Traits> &&)"),("basic_filebuf<_CharT, _Traits> &","(basic_filebuf<_CharT, _Traits> &&)"),("void","(void const*)"),("_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...> &","(const _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...> &)"),("_Tuple_impl<_Idx, type-parameter-0-1> &","(const _Tuple_impl<_Idx, type-parameter-0-1> &)"),("tuple<_Elements...> &","(std::conditional<__assignable<const _Elements &...>(), const tuple<_Elements...> &, const __nonesuch &>::type)"),("tuple<_Elements...> &","(std::conditional<__assignable<_Elements...>(), tuple<_Elements...> &&, __nonesuch &&>::type)"),("tuple<type-parameter-0-0, type-parameter-0-1> &","(std::conditional<__assignable<const _T1 &, const _T2 &>(), const tuple<type-parameter-0-0, type-parameter-0-1> &, const __nonesuch &>::type)"),("tuple<type-parameter-0-0, type-parameter-0-1> &","(std::conditional<__assignable<_T1, _T2>(), tuple<type-parameter-0-0, type-parameter-0-1> &&, __nonesuch &&>::type)"),("reference_wrapper<_Tp> &","(const reference_wrapper<_Tp> &)"),("function<type-parameter-0-0 (type-parameter-0-1...)> &","(const function<type-parameter-0-0 (type-parameter-0-1...)> &)"),("function<type-parameter-0-0 (type-parameter-0-1...)> &","(function<type-parameter-0-0 (type-parameter-0-1...)> &&)"),("function<type-parameter-0-0 (type-parameter-0-1...)> &","(std::nullptr_t)"),("__timepunct_cache<_CharT> &","(const __timepunct_cache<_CharT> &)"),("__moneypunct_cache<_CharT, _Intl> &","(const __moneypunct_cache<_CharT, _Intl> &)"),("__uniq_ptr_impl<_Tp, _Dp> &","(__uniq_ptr_impl<_Tp, _Dp> &&)"),("__uniq_ptr_data<_Tp, _Dp, , > &","(__uniq_ptr_data<_Tp, _Dp, , > &&)"),("__uniq_ptr_data<type-parameter-0-0, type-parameter-0-1, true, false> &","(__uniq_ptr_data<type-parameter-0-0, type-parameter-0-1, true, false> &&)"),("__uniq_ptr_data<type-parameter-0-0, type-parameter-0-1, false, true> &","(__uniq_ptr_data<type-parameter-0-0, type-parameter-0-1, false, true> &&)"),("__uniq_ptr_data<type-parameter-0-0, type-parameter-0-1, false, false> &","(__uniq_ptr_data<type-parameter-0-0, type-parameter-0-1, false, false> &&)"),("unique_ptr<_Tp, _Dp> &","(unique_ptr<_Tp, _Dp> &&)"),("unique_ptr<_Tp, _Dp> &","(std::nullptr_t)"),("unique_ptr<_Tp, _Dp> &","(const unique_ptr<_Tp, _Dp> &)"),("unique_ptr<type-parameter-0-0 [], type-parameter-0-1> &","(unique_ptr<type-parameter-0-0 [], type-parameter-0-1> &&)"),("unique_ptr<type-parameter-0-0 [], type-parameter-0-1> &","(std::nullptr_t)"),("unique_ptr<type-parameter-0-0 [], type-parameter-0-1> &","(const unique_ptr<type-parameter-0-0 [], type-parameter-0-1> &)"),("wstring_convert<_Codecvt, _Elem, _Wide_alloc, _Byte_alloc> &","(const wstring_convert<_Codecvt, _Elem, _Wide_alloc, _Byte_alloc> &)"),("wbuffer_convert<_Codecvt, _Elem, _Tr> &","(const wbuffer_convert<_Codecvt, _Elem, _Tr> &)"),("_Quoted_string<_String, _CharT> &","(_Quoted_string<_String, _CharT> &)"),("istream_iterator<_Tp, _CharT, _Traits, _Dist> &","(const istream_iterator<_Tp, _CharT, _Traits, _Dist> &)"),("ostream_iterator<_Tp, _CharT, _Traits> &","(const ostream_iterator<_Tp, _CharT, _Traits> &)"),("ostream_iterator<_Tp, _CharT, _Traits> &","(const _Tp &)"),("__allocated_ptr<_Alloc> &","(std::nullptr_t)"),("list<_Tp, _Alloc> &","(const list<_Tp, _Alloc> &)"),("list<_Tp, _Alloc> &","(list<_Tp, _Alloc> &&)"),("list<_Tp, _Alloc> &","(initializer_list<std::__cxx11::list::value_type>)"),("list<_Tp, _Alloc> &","(const list<_Tp, _Alloc> &)"),("_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &","(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &)"),("_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &","(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &&)"),("_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &","(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &)"),("map<_Key, _Tp, _Compare, _Alloc> &","(const map<_Key, _Tp, _Compare, _Alloc> &)"),("map<_Key, _Tp, _Compare, _Alloc> &","(map<_Key, _Tp, _Compare, _Alloc> &&)"),("map<_Key, _Tp, _Compare, _Alloc> &","(initializer_list<std::map::value_type>)"),("multimap<_Key, _Tp, _Compare, _Alloc> &","(const multimap<_Key, _Tp, _Compare, _Alloc> &)"),("multimap<_Key, _Tp, _Compare, _Alloc> &","(multimap<_Key, _Tp, _Compare, _Alloc> &&)"),("multimap<_Key, _Tp, _Compare, _Alloc> &","(initializer_list<std::multimap::value_type>)"),("raw_storage_iterator<_OutputIterator, _Tp> &","(const _Tp &)"),("raw_storage_iterator<_OutputIterator, _Tp> &","(_Tp &&)"),("__gnu_cxx::__mutex &","(const __gnu_cxx::__mutex &)"),("__gnu_cxx::__recursive_mutex &","(const __gnu_cxx::__recursive_mutex &)"),("__gnu_cxx::__scoped_lock &","(const __gnu_cxx::__scoped_lock &)"),("__gnu_cxx::__cond &","(const __gnu_cxx::__cond &)"),("_Sp_counted_base<_Lp> &","(const _Sp_counted_base<_Lp> &)"),("_Sp_counted_ptr<_Ptr, _Lp> &","(const _Sp_counted_ptr<_Ptr, _Lp> &)"),("__shared_count<_Lp> &","(const __shared_count<_Lp> &)"),("__weak_count<_Lp> &","(const __shared_count<_Lp> &)"),("__weak_count<_Lp> &","(const __weak_count<_Lp> &)"),("__weak_count<_Lp> &","(__weak_count<_Lp> &&)"),("__shared_ptr<_Tp, _Lp> &","(const __shared_ptr<_Tp, _Lp> &)"),("__shared_ptr<_Tp, _Lp> &","(__shared_ptr<_Tp, _Lp> &&)"),("__weak_ptr<_Tp, _Lp> &","(const __weak_ptr<_Tp, _Lp> &)"),("__weak_ptr<_Tp, _Lp> &","(__weak_ptr<_Tp, _Lp> &&)"),("__enable_shared_from_this<_Tp, _Lp> &","(const __enable_shared_from_this<_Tp, _Lp> &)"),("shared_ptr<_Tp> &","(const shared_ptr<_Tp> &)"),("shared_ptr<_Tp> &","(shared_ptr<_Tp> &&)"),("weak_ptr<_Tp> &","(const weak_ptr<_Tp> &)"),("weak_ptr<_Tp> &","(weak_ptr<_Tp> &&)"),("enable_shared_from_this<_Tp> &","(const enable_shared_from_this<_Tp> &)"),("std::atomic_flag &","(const std::atomic_flag &)"),("__atomic_base<_IntTp> &","(const __atomic_base<_IntTp> &)"),("std::__atomic_base::__int_type","(std::__atomic_base::__int_type)"),("__atomic_base<type-parameter-0-0 *> &","(const __atomic_base<type-parameter-0-0 *> &)"),("std::__atomic_base<type-parameter-0-0 *>::__pointer_type","(std::__atomic_base<type-parameter-0-0 *>::__pointer_type)"),("std::_Sp_locker &","(const std::_Sp_locker &)"),("auto_ptr<type-parameter-0-0> &","(auto_ptr<type-parameter-0-0> &)"),("auto_ptr<type-parameter-0-0> &","(auto_ptr_ref<std::auto_ptr::element_type>)"),("vector<_Tp, _Alloc> &","(const vector<_Tp, _Alloc> &)"),("vector<_Tp, _Alloc> &","(vector<_Tp, _Alloc> &&)"),("vector<_Tp, _Alloc> &","(initializer_list<std::vector::value_type>)"),("std::_Bit_reference &","(bool)"),("std::_Bit_reference &","(const std::_Bit_reference &)"),("std::_Bvector_base::_Bvector_impl_data &","(const std::_Bvector_base::_Bvector_impl_data &)"),("vector<bool, type-parameter-0-0> &","(const vector<bool, type-parameter-0-0> &)"),("vector<bool, type-parameter-0-0> &","(vector<bool, type-parameter-0-0> &&)"),("vector<bool, type-parameter-0-0> &","(initializer_list<bool>)"),("vector<_Tp, _Alloc> &","(const vector<_Tp, _Alloc> &)"),("set<_Key, _Compare, _Alloc> &","(const set<_Key, _Compare, _Alloc> &)"),("set<_Key, _Compare, _Alloc> &","(set<_Key, _Compare, _Alloc> &&)"),("set<_Key, _Compare, _Alloc> &","(initializer_list<std::set::value_type>)"),("multiset<_Key, _Compare, _Alloc> &","(const multiset<_Key, _Compare, _Alloc> &)"),("multiset<_Key, _Compare, _Alloc> &","(multiset<_Key, _Compare, _Alloc> &&)"),("multiset<_Key, _Compare, _Alloc> &","(initializer_list<std::multiset::value_type>)"),("slice_array<_Tp> &","(const slice_array<_Tp> &)"),("void","(const valarray<_Tp> &)"),("void","(const _Tp &)"),("slice_array<_Tp> &","(const slice_array<_Tp> &)"),("void","(const _Tp &)"),("void","(const valarray<_Tp> &)"),("valarray<_Tp> &","(const valarray<_Tp> &)"),("valarray<_Tp> &","(valarray<_Tp> &&)"),("valarray<_Tp> &","(const _Tp &)"),("valarray<_Tp> &","(const slice_array<_Tp> &)"),("valarray<_Tp> &","(const gslice_array<_Tp> &)"),("valarray<_Tp> &","(const mask_array<_Tp> &)"),("valarray<_Tp> &","(const indirect_array<_Tp> &)"),("valarray<_Tp> &","(initializer_list<_Tp>)"),("std::gslice &","(const std::gslice &)"),("gslice_array<_Tp> &","(const gslice_array<_Tp> &)"),("void","(const valarray<_Tp> &)"),("void","(const _Tp &)"),("gslice_array<_Tp> &","(const gslice_array<_Tp> &)"),("void","(const _Tp &)"),("void","(const valarray<_Tp> &)"),("mask_array<_Tp> &","(const mask_array<_Tp> &)"),("void","(const valarray<_Tp> &)"),("void","(const _Tp &)"),("mask_array<_Tp> &","(const mask_array<_Tp> &)"),("void","(const _Tp &)"),("void","(const valarray<_Tp> &)"),("indirect_array<_Tp> &","(const indirect_array<_Tp> &)"),("void","(const valarray<_Tp> &)"),("void","(const _Tp &)"),("indirect_array<_Tp> &","(const indirect_array<_Tp> &)"),("void","(const _Tp &)"),("void","(const valarray<_Tp> &)"),("valarray<_Tp> &","(const valarray<_Tp> &)"),("valarray<_Tp> &","(valarray<_Tp> &&)"),("valarray<_Tp> &","(initializer_list<_Tp>)"),("valarray<_Tp> &","(const _Tp &)"),("valarray<_Tp> &","(const slice_array<_Tp> &)"),("valarray<_Tp> &","(const gslice_array<_Tp> &)"),("valarray<_Tp> &","(const mask_array<_Tp> &)"),("valarray<_Tp> &","(const indirect_array<_Tp> &)"),("std::atomic<bool> &","(const std::atomic<bool> &)"),("bool","(bool)"),("atomic<_Tp> &","(const atomic<_Tp> &)"),("_Tp","(_Tp)"),("atomic<type-parameter-0-0 *> &","(const atomic<type-parameter-0-0 *> &)"),("std::atomic<type-parameter-0-0 *>::__pointer_type","(std::atomic<type-parameter-0-0 *>::__pointer_type)"),("std::atomic<char> &","(const std::atomic<char> &)"),("std::atomic<signed char> &","(const std::atomic<signed char> &)"),("std::atomic<unsigned char> &","(const std::atomic<unsigned char> &)"),("std::atomic<short> &","(const std::atomic<short> &)"),("std::atomic<unsigned short> &","(const std::atomic<unsigned short> &)"),("std::atomic<int> &","(const std::atomic<int> &)"),("std::atomic<unsigned int> &","(const std::atomic<unsigned int> &)"),("std::atomic<long> &","(const std::atomic<long> &)"),("std::atomic<unsigned long> &","(const std::atomic<unsigned long> &)"),("std::atomic<long long> &","(const std::atomic<long long> &)"),("std::atomic<unsigned long long> &","(const std::atomic<unsigned long long> &)"),("std::atomic<wchar_t> &","(const std::atomic<wchar_t> &)"),("std::atomic<char16_t> &","(const std::atomic<char16_t> &)"),("std::atomic<char32_t> &","(const std::atomic<char32_t> &)"),("duration<_Rep, _Period> &","(const duration<_Rep, _Period> &)"),("std::__mutex_base &","(const std::__mutex_base &)"),("std::mutex &","(const std::mutex &)"),("std::__condvar &","(const std::__condvar &)"),("lock_guard<_Mutex> &","(const lock_guard<_Mutex> &)"),("unique_lock<_Mutex> &","(const unique_lock<_Mutex> &)"),("unique_lock<_Mutex> &","(unique_lock<_Mutex> &&)"),("std::condition_variable &","(const std::condition_variable &)"),("_Unlock<_Lock> &","(const _Unlock<_Lock> &)"),("std::_V2::condition_variable_any &","(const std::_V2::condition_variable_any &)"),("std::_Fwd_list_node_base &","(const std::_Fwd_list_node_base &)"),("std::_Fwd_list_node_base &","(std::_Fwd_list_node_base &&)"),("forward_list<_Tp, _Alloc> &","(const forward_list<_Tp, _Alloc> &)"),("forward_list<_Tp, _Alloc> &","(forward_list<_Tp, _Alloc> &&)"),("forward_list<_Tp, _Alloc> &","(std::initializer_list<_Tp>)"),("forward_list<_Tp, _Alloc> &","(const forward_list<_Tp, _Alloc> &)"),("std::__recursive_mutex_base &","(const std::__recursive_mutex_base &)"),("std::recursive_mutex &","(const std::recursive_mutex &)"),("std::timed_mutex &","(const std::timed_mutex &)"),("std::recursive_timed_mutex &","(const std::recursive_timed_mutex &)"),("std::once_flag &","(const std::once_flag &)"),("std::once_flag::_Prepare_execution &","(const std::once_flag::_Prepare_execution &)"),("std::thread &","(const std::thread &)"),("std::thread &","(std::thread &&)"),("std::__future_base::_Result_base &","(const std::__future_base::_Result_base &)"),("std::__future_base::_State_baseV2 &","(const std::__future_base::_State_baseV2 &)"),("__basic_future<_Res> &","(const __basic_future<_Res> &)"),("future<_Res> &","(const future<_Res> &)"),("future<_Res> &","(future<_Res> &&)"),("future<type-parameter-0-0 &> &","(const future<type-parameter-0-0 &> &)"),("future<type-parameter-0-0 &> &","(future<type-parameter-0-0 &> &&)"),("std::future<void> &","(const std::future<void> &)"),("std::future<void> &","(std::future<void> &&)"),("shared_future<_Res> &","(const shared_future<_Res> &)"),("shared_future<_Res> &","(shared_future<_Res> &&)"),("shared_future<type-parameter-0-0 &> &","(const shared_future<type-parameter-0-0 &> &)"),("shared_future<type-parameter-0-0 &> &","(shared_future<type-parameter-0-0 &> &&)"),("std::shared_future<void> &","(const std::shared_future<void> &)"),("std::shared_future<void> &","(std::shared_future<void> &&)"),("promise<_Res> &","(promise<_Res> &&)"),("promise<_Res> &","(const promise<_Res> &)"),("promise<type-parameter-0-0 &> &","(promise<type-parameter-0-0 &> &&)"),("promise<type-parameter-0-0 &> &","(const promise<type-parameter-0-0 &> &)"),("std::promise<void> &","(std::promise<void> &&)"),("std::promise<void> &","(const std::promise<void> &)"),("packaged_task<type-parameter-0-0 (type-parameter-0-1...)> &","(const packaged_task<type-parameter-0-0 (type-parameter-0-1...)> &)"),("packaged_task<type-parameter-0-0 (type-parameter-0-1...)> &","(packaged_task<type-parameter-0-0 (type-parameter-0-1...)> &&)"),("void","(const std::random_device &)"),("std::discrete_distribution::param_type &","(const std::discrete_distribution::param_type &)"),("std::piecewise_constant_distribution::param_type &","(const std::piecewise_constant_distribution::param_type &)"),("std::piecewise_linear_distribution::param_type &","(const std::piecewise_linear_distribution::param_type &)"),("std::seed_seq &","(const std::seed_seq &)"),("_State<_Char_type> &","(const _State<_Char_type> &)"),("basic_regex<type-parameter-0-0, type-parameter-0-1> &","(const basic_regex<type-parameter-0-0, type-parameter-0-1> &)"),("basic_regex<type-parameter-0-0, type-parameter-0-1> &","(basic_regex<type-parameter-0-0, type-parameter-0-1> &&)"),("basic_regex<type-parameter-0-0, type-parameter-0-1> &","(const _Ch_type *)"),("basic_regex<type-parameter-0-0, type-parameter-0-1> &","(initializer_list<_Ch_type>)"),("match_results<_Bi_iter, _Alloc> &","(const match_results<_Bi_iter, _Alloc> &)"),("match_results<_Bi_iter, _Alloc> &","(match_results<_Bi_iter, _Alloc> &&)"),("regex_iterator<_Bi_iter, _Ch_type, _Rx_traits> &","(const regex_iterator<_Bi_iter, _Ch_type, _Rx_traits> &)"),("regex_token_iterator<_Bi_iter, _Ch_type, _Rx_traits> &","(const regex_token_iterator<_Bi_iter, _Ch_type, _Rx_traits> &)"),("__inner_type_impl<type-parameter-0-0> &","(const __inner_type_impl<type-parameter-0-0> &)"),("__inner_type_impl<type-parameter-0-0> &","(__inner_type_impl<type-parameter-0-0> &&)"),("__inner_type_impl<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2...> &","(const __inner_type_impl<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2...> &)"),("__inner_type_impl<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2...> &","(__inner_type_impl<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2...> &&)"),("scoped_allocator_adaptor<_OuterAlloc, _InnerAllocs...> &","(const scoped_allocator_adaptor<_OuterAlloc, _InnerAllocs...> &)"),("scoped_allocator_adaptor<_OuterAlloc, _InnerAllocs...> &","(scoped_allocator_adaptor<_OuterAlloc, _InnerAllocs...> &&)"),("_Local_iterator_base<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4, type-parameter-0-5, false> &","(const _Local_iterator_base<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4, type-parameter-0-5, false> &)"),("_Enable_default_constructor<_Switch, _Tag> &","(const _Enable_default_constructor<_Switch, _Tag> &)"),("_Enable_default_constructor<_Switch, _Tag> &","(_Enable_default_constructor<_Switch, _Tag> &&)"),("_Enable_default_constructor<false, type-parameter-0-0> &","(const _Enable_default_constructor<false, type-parameter-0-0> &)"),("_Enable_default_constructor<false, type-parameter-0-0> &","(_Enable_default_constructor<false, type-parameter-0-0> &&)"),("_Enable_copy_move<false, true, true, true, type-parameter-0-0> &","(const _Enable_copy_move<false, true, true, true, type-parameter-0-0> &)"),("_Enable_copy_move<false, true, true, true, type-parameter-0-0> &","(_Enable_copy_move<false, true, true, true, type-parameter-0-0> &&)"),("_Enable_copy_move<true, false, true, true, type-parameter-0-0> &","(const _Enable_copy_move<true, false, true, true, type-parameter-0-0> &)"),("_Enable_copy_move<true, false, true, true, type-parameter-0-0> &","(_Enable_copy_move<true, false, true, true, type-parameter-0-0> &&)"),("_Enable_copy_move<false, false, true, true, type-parameter-0-0> &","(const _Enable_copy_move<false, false, true, true, type-parameter-0-0> &)"),("_Enable_copy_move<false, false, true, true, type-parameter-0-0> &","(_Enable_copy_move<false, false, true, true, type-parameter-0-0> &&)"),("_Enable_copy_move<true, true, false, true, type-parameter-0-0> &","(const _Enable_copy_move<true, true, false, true, type-parameter-0-0> &)"),("_Enable_copy_move<true, true, false, true, type-parameter-0-0> &","(_Enable_copy_move<true, true, false, true, type-parameter-0-0> &&)"),("_Enable_copy_move<false, true, false, true, type-parameter-0-0> &","(const _Enable_copy_move<false, true, false, true, type-parameter-0-0> &)"),("_Enable_copy_move<false, true, false, true, type-parameter-0-0> &","(_Enable_copy_move<false, true, false, true, type-parameter-0-0> &&)"),("_Enable_copy_move<true, false, false, true, type-parameter-0-0> &","(const _Enable_copy_move<true, false, false, true, type-parameter-0-0> &)"),("_Enable_copy_move<true, false, false, true, type-parameter-0-0> &","(_Enable_copy_move<true, false, false, true, type-parameter-0-0> &&)"),("_Enable_copy_move<false, false, false, true, type-parameter-0-0> &","(const _Enable_copy_move<false, false, false, true, type-parameter-0-0> &)"),("_Enable_copy_move<false, false, false, true, type-parameter-0-0> &","(_Enable_copy_move<false, false, false, true, type-parameter-0-0> &&)"),("_Enable_copy_move<true, true, true, false, type-parameter-0-0> &","(const _Enable_copy_move<true, true, true, false, type-parameter-0-0> &)"),("_Enable_copy_move<true, true, true, false, type-parameter-0-0> &","(_Enable_copy_move<true, true, true, false, type-parameter-0-0> &&)"),("_Enable_copy_move<false, true, true, false, type-parameter-0-0> &","(const _Enable_copy_move<false, true, true, false, type-parameter-0-0> &)"),("_Enable_copy_move<false, true, true, false, type-parameter-0-0> &","(_Enable_copy_move<false, true, true, false, type-parameter-0-0> &&)"),("_Enable_copy_move<true, false, true, false, type-parameter-0-0> &","(const _Enable_copy_move<true, false, true, false, type-parameter-0-0> &)"),("_Enable_copy_move<true, false, true, false, type-parameter-0-0> &","(_Enable_copy_move<true, false, true, false, type-parameter-0-0> &&)"),("_Enable_copy_move<false, false, true, false, type-parameter-0-0> &","(const _Enable_copy_move<false, false, true, false, type-parameter-0-0> &)"),("_Enable_copy_move<false, false, true, false, type-parameter-0-0> &","(_Enable_copy_move<false, false, true, false, type-parameter-0-0> &&)"),("_Enable_copy_move<true, true, false, false, type-parameter-0-0> &","(const _Enable_copy_move<true, true, false, false, type-parameter-0-0> &)"),("_Enable_copy_move<true, true, false, false, type-parameter-0-0> &","(_Enable_copy_move<true, true, false, false, type-parameter-0-0> &&)"),("_Enable_copy_move<false, true, false, false, type-parameter-0-0> &","(const _Enable_copy_move<false, true, false, false, type-parameter-0-0> &)"),("_Enable_copy_move<false, true, false, false, type-parameter-0-0> &","(_Enable_copy_move<false, true, false, false, type-parameter-0-0> &&)"),("_Enable_copy_move<true, false, false, false, type-parameter-0-0> &","(const _Enable_copy_move<true, false, false, false, type-parameter-0-0> &)"),("_Enable_copy_move<true, false, false, false, type-parameter-0-0> &","(_Enable_copy_move<true, false, false, false, type-parameter-0-0> &&)"),("_Enable_copy_move<false, false, false, false, type-parameter-0-0> &","(const _Enable_copy_move<false, false, false, false, type-parameter-0-0> &)"),("_Enable_copy_move<false, false, false, false, type-parameter-0-0> &","(_Enable_copy_move<false, false, false, false, type-parameter-0-0> &&)"),("std::_Hashtable::_Scoped_node &","(const std::_Hashtable::_Scoped_node &)"),("_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> &","(const _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> &)"),("_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> &","(_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> &&)"),("_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> &","(initializer_list<std::_Hashtable::value_type>)"),("_Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> &","(const _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits> &)"),("unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc> &","(const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc> &)"),("unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc> &","(unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc> &&)"),("unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc> &","(initializer_list<std::unordered_map::value_type>)"),("unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc> &","(const unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc> &)"),("unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc> &","(unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc> &&)"),("unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc> &","(initializer_list<std::unordered_multimap::value_type>)"),("unordered_set<_Value, _Hash, _Pred, _Alloc> &","(const unordered_set<_Value, _Hash, _Pred, _Alloc> &)"),("unordered_set<_Value, _Hash, _Pred, _Alloc> &","(unordered_set<_Value, _Hash, _Pred, _Alloc> &&)"),("unordered_set<_Value, _Hash, _Pred, _Alloc> &","(initializer_list<std::unordered_set::value_type>)"),("unordered_multiset<_Value, _Hash, _Pred, _Alloc> &","(const unordered_multiset<_Value, _Hash, _Pred, _Alloc> &)"),("unordered_multiset<_Value, _Hash, _Pred, _Alloc> &","(unordered_multiset<_Value, _Hash, _Pred, _Alloc> &&)"),("unordered_multiset<_Value, _Hash, _Pred, _Alloc> &","(initializer_list<std::unordered_multiset::value_type>)"),("std::__shared_mutex_pthread &","(const std::__shared_mutex_pthread &)"),("std::shared_timed_mutex &","(const std::shared_timed_mutex &)"),("shared_lock<_Mutex> &","(const shared_lock<_Mutex> &)"),("shared_lock<_Mutex> &","(shared_lock<_Mutex> &&)")],
"state":[("void","(_StateT)"),("_StateT","()"),("std::__cxx11::wstring_convert::state_type","()"),("std::wbuffer_convert::state_type","()")],
"operator+=":[("fpos<_StateT> &","(std::streamoff)"),("reverse_iterator<_Iterator> &","(std::reverse_iterator::difference_type)"),("__normal_iterator<_Iterator, _Container> &","(__gnu_cxx::__normal_iterator::difference_type)"),("move_iterator<_Iterator> &","(std::move_iterator::difference_type)"),("std::basic_string<_CharT, _Traits, _Alloc> &","(conststd::basic_string<_CharT, _Traits, _Alloc> &)"),("std::basic_string<_CharT, _Traits, _Alloc> &","(const _CharT *)"),("std::basic_string<_CharT, _Traits, _Alloc> &","(_CharT)"),("std::basic_string<_CharT, _Traits, _Alloc> &","(initializer_list<_CharT>)"),("complex<_Tp> &","(const _Tp &)"),("std::complex<float> &","(float)"),("std::complex<double> &","(double)"),("std::complex<long double> &","(long double)"),("std::_Deque_iterator::_Self &","(std::_Deque_iterator::difference_type)"),("std::__atomic_base::__int_type","(std::__atomic_base::__int_type)"),("std::__atomic_base<type-parameter-0-0 *>::__pointer_type","(std::ptrdiff_t)"),("std::_Bit_iterator::iterator &","(std::iterator<std::random_access_iterator_tag, bool, long, bool *, bool &>::difference_type)"),("std::_Bit_const_iterator::const_iterator &","(std::iterator<std::random_access_iterator_tag, bool, long, bool *, bool &>::difference_type)"),("void","(const valarray<_Tp> &)"),("valarray<_Tp> &","(const _Tp &)"),("valarray<_Tp> &","(const valarray<_Tp> &)"),("void","(const valarray<_Tp> &)"),("valarray<_Tp> &","(const _Tp &)"),("valarray<_Tp> &","(const valarray<_Tp> &)"),("std::atomic<type-parameter-0-0 *>::__pointer_type","(std::ptrdiff_t)"),("duration<_Rep, _Period> &","(const duration<_Rep, _Period> &)"),("time_point<_Clock, _Dur> &","(const std::chrono::time_point::duration &)")],
"operator-=":[("fpos<_StateT> &","(std::streamoff)"),("reverse_iterator<_Iterator> &","(std::reverse_iterator::difference_type)"),("__normal_iterator<_Iterator, _Container> &","(__gnu_cxx::__normal_iterator::difference_type)"),("move_iterator<_Iterator> &","(std::move_iterator::difference_type)"),("complex<_Tp> &","(const _Tp &)"),("std::complex<float> &","(float)"),("std::complex<double> &","(double)"),("std::complex<long double> &","(long double)"),("std::_Deque_iterator::_Self &","(std::_Deque_iterator::difference_type)"),("std::__atomic_base::__int_type","(std::__atomic_base::__int_type)"),("std::__atomic_base<type-parameter-0-0 *>::__pointer_type","(std::ptrdiff_t)"),("std::_Bit_iterator::iterator &","(std::iterator<std::random_access_iterator_tag, bool, long, bool *, bool &>::difference_type)"),("std::_Bit_const_iterator::const_iterator &","(std::iterator<std::random_access_iterator_tag, bool, long, bool *, bool &>::difference_type)"),("void","(const valarray<_Tp> &)"),("valarray<_Tp> &","(const _Tp &)"),("valarray<_Tp> &","(const valarray<_Tp> &)"),("void","(const valarray<_Tp> &)"),("valarray<_Tp> &","(const _Tp &)"),("valarray<_Tp> &","(const valarray<_Tp> &)"),("std::atomic<type-parameter-0-0 *>::__pointer_type","(std::ptrdiff_t)"),("duration<_Rep, _Period> &","(const duration<_Rep, _Period> &)"),("time_point<_Clock, _Dur> &","(const std::chrono::time_point::duration &)")],
"operator+":[("fpos<_StateT>","(std::streamoff)"),("reverse_iterator<_Iterator>","(std::reverse_iterator::difference_type)"),("__normal_iterator<_Iterator, _Container>","(__gnu_cxx::__normal_iterator::difference_type)"),("move_iterator<_Iterator>","(std::move_iterator::difference_type)"),("std::_Deque_iterator::_Self","(const std::_Deque_iterator::_Self &, std::_Deque_iterator::difference_type)"),("std::_Deque_iterator::_Self","(std::_Deque_iterator::difference_type, const std::_Deque_iterator::_Self &)"),("std::_Bit_iterator::iterator","(const std::_Bit_iterator::iterator &, std::iterator<std::random_access_iterator_tag, bool, long, bool *, bool &>::difference_type)"),("std::_Bit_iterator::iterator","(std::iterator<std::random_access_iterator_tag, bool, long, bool *, bool &>::difference_type, const std::_Bit_iterator::iterator &)"),("std::_Bit_const_iterator::const_iterator","(const std::_Bit_const_iterator::const_iterator &, std::iterator<std::random_access_iterator_tag, bool, long, bool *, bool &>::difference_type)"),("std::_Bit_const_iterator::const_iterator","(std::iterator<std::random_access_iterator_tag, bool, long, bool *, bool &>::difference_type, const std::_Bit_const_iterator::const_iterator &)"),("std::_UnaryOp<__unary_plus>::_Rt","()"),("_Expr<_UnClos<std::__unary_plus, std::_Expr, _Clos>, std::_Expr::value_type>","()"),("_Expr<_UnClos<struct std::__unary_plus, std::_Expr, _Dom>, _Tp>","()"),("std::valarray<_Tp>::_UnaryOp<__unary_plus>::_Rt","()"),("duration<std::common_type<rep>::type, std::chrono::duration::period>","()")],
"operator-":[("fpos<_StateT>","(std::streamoff)"),("std::streamoff","(const fpos<_StateT> &)"),("reverse_iterator<_Iterator>","(std::reverse_iterator::difference_type)"),("__normal_iterator<_Iterator, _Container>","(__gnu_cxx::__normal_iterator::difference_type)"),("move_iterator<_Iterator>","(std::move_iterator::difference_type)"),("std::_Deque_iterator::difference_type","(const std::_Deque_iterator::_Self &, const std::_Deque_iterator::_Self &)"),("std::_Deque_iterator::_Self","(const std::_Deque_iterator::_Self &, std::_Deque_iterator::difference_type)"),("std::ptrdiff_t","(const std::_Bit_iterator_base &, const std::_Bit_iterator_base &)"),("std::_Bit_iterator::iterator","(const std::_Bit_iterator::iterator &, std::iterator<std::random_access_iterator_tag, bool, long, bool *, bool &>::difference_type)"),("std::_Bit_const_iterator::const_iterator","(const std::_Bit_const_iterator::const_iterator &, std::iterator<std::random_access_iterator_tag, bool, long, bool *, bool &>::difference_type)"),("std::_UnaryOp<__negate>::_Rt","()"),("_Expr<_UnClos<std::__negate, std::_Expr, _Clos>, std::_Expr::value_type>","()"),("_Expr<_UnClos<struct std::__negate, std::_Expr, _Dom>, _Tp>","()"),("std::valarray<_Tp>::_UnaryOp<__negate>::_Rt","()"),("duration<std::common_type<rep>::type, std::chrono::duration::period>","()")],
"what":"char const *",
"set_terminate":["std::terminate_handler","(std::terminate_handler)"],
"get_terminate":["std::terminate_handler","()"],
"terminate":["void","()"],
"set_unexpected":["std::unexpected_handler","(std::unexpected_handler)"],
"get_unexpected":["std::unexpected_handler","()"],
"unexpected":["void","()"],
"uncaught_exception":["bool","()"],
"uncaught_exceptions":["int","()"],
"__verbose_terminate_handler":["void","()"],
"__cxa_allocate_exception":["void *","(size_t)"],
"__cxa_free_exception":["void","(void *)"],
"__cxa_init_primary_exception":["__cxxabiv1::__cxa_refcounted_exception *","(void *, std::type_info *, void (*)(void *))"],
"_Hash_bytes":["std::size_t","(void const*, std::size_t, std::size_t)"],
"_Fnv_hash_bytes":["std::size_t","(void const*, std::size_t, std::size_t)"],
"name":[("char const *","()"),("std::string","()"),("char const *","()")],
"before":["bool","(const std::type_info &)"],
"operator==":"bool",
"operator!=":"bool",
"hash_code":"std::size_t",
"__is_pointer_p":["bool","()"],
"__is_function_p":["bool","()"],
"__do_catch":["bool","(const std::type_info *, void **, unsigned int)"],
"__do_upcast":["bool","(const __cxxabiv1::__class_type_info *, void **)"],
"set_new_handler":["std::new_handler","(std::new_handler)"],
"get_new_handler":["std::new_handler","()"],
"operator new":"void *",
"operator new[]":"void *",
"operator delete":"void",
"operator delete[]":"void",
"current_exception":"std::__exception_ptr::exception_ptr",
"rethrow_exception":"void",
"_M_addref":["void","()"],
"_M_release":"void",
"_M_get":[("void *","()"),("std::istreambuf_iterator::int_type","()"),("std::__shared_ptr_access::element_type *","()"),("std::__shared_ptr_access<type-parameter-0-0, _Lp, true, false>::element_type *","()"),("_Res &","()"),("std::__inner_type_impl<type-parameter-0-0>::__type &","(std::__inner_type_impl<type-parameter-0-0>::__type *)"),("const std::__inner_type_impl<type-parameter-0-0>::__type &","(const std::__inner_type_impl<type-parameter-0-0>::__type *)"),("std::__inner_type_impl<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2...>::__type &","(void *)"),("const std::__inner_type_impl<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2...>::__type &","(void const*)"),("_Tp &","()")],
"swap":"void",
"__cxa_exception_type":["const class std::type_info *","()"],
"operator()":[("std::integral_constant::value_type","()()"),("_Tp","()(const _Tp &, const _Tp &)"),("_Tp","()(const _Tp &)"),("bool","()(const _Tp &, const _Tp &)"),("bool","()(_Tp *, _Tp *)"),("bool","()(const _Tp &, const _Tp &)"),("bool","()(const _Tp &)"),("_Tp","()(const _Tp &, const _Tp &)"),("_Tp","()(const _Tp &)"),("bool","()(const std::_Predicate::argument_type &)"),("bool","()(const std::_Predicate::first_argument_type &, const std::_Predicate::second_argument_type &)"),("_Result","()(_Arg)"),("_Result","()(_Arg1, _Arg2)"),("_Tp &","()(_Tp &)"),("const _Tp &","()(const _Tp &)"),("std::_Pair::first_type &","()(_Pair &)"),("const std::_Pair::first_type &","()(const _Pair &)"),("std::_Pair::second_type &","()(_Pair &)"),("const std::_Pair::second_type &","()(const _Pair &)"),("_Ret","()(_Tp *)"),("_Ret","()(const _Tp *)"),("_Ret","()(_Tp &)"),("_Ret","()(const _Tp &)"),("_Ret","()(_Tp *, _Arg)"),("_Ret","()(const _Tp *, _Arg)"),("_Ret","()(_Tp &, _Arg)"),("_Ret","()(const _Tp &, _Arg)"),("std::_Operation::result_type","()(const std::_Operation::second_argument_type &)"),("std::_Operation::result_type","()(std::_Operation::second_argument_type &)"),("std::_Operation::result_type","()(const std::_Operation::first_argument_type &)"),("std::_Operation::result_type","()(std::_Operation::first_argument_type &)"),("std::size_t","()(_Tp)"),("std::size_t","()(_Tp *)"),("std::size_t","()(bool)"),("std::size_t","()(char)"),("std::size_t","()(signed char)"),("std::size_t","()(unsigned char)"),("std::size_t","()(wchar_t)"),("std::size_t","()(char16_t)"),("std::size_t","()(char32_t)"),("std::size_t","()(short)"),("std::size_t","()(int)"),("std::size_t","()(long)"),("std::size_t","()(long long)"),("std::size_t","()(unsigned short)"),("std::size_t","()(unsigned int)"),("std::size_t","()(unsigned long)"),("std::size_t","()(unsigned long long)"),("std::size_t","()(__int128)"),("std::size_t","()(unsigned __int128)"),("std::size_t","()(float)"),("std::size_t","()(double)"),("std::size_t","()(long double)"),("std::size_t","()(const std::string &)"),("std::size_t","()(const std::wstring &)"),("std::size_t","()(const std::u16string &)"),("std::size_t","()(const std::u32string &)"),("std::size_t","()(const std::error_code &)"),("const _Facet *","()(std::locale const&)"),("const __numpunct_cache<_CharT> *","()(std::locale const&)"),("std::size_t","()(const std::bitset<_Nb> &)"),("std::size_t","()(const std::bitset<0> &)"),("_Res","()(_ArgTypes...)"),("const __moneypunct_cache<_CharT, _Intl> *","()(std::locale const&)"),("void","()(_Tp *)"),("std::size_t","()(const _Up &)"),("bool","()(const std::map::value_type &, const std::map::value_type &)"),("bool","()(const std::multimap::value_type &, const std::multimap::value_type &)"),("bool","()(const _Tp &, const _Tp &)"),("bool","()(const _Tp &, const _Tp1 &)"),("bool","()(const _Tp1 &, const _Tp &)"),("std::size_t","()(const __shared_ptr<_Tp, _Lp> &)"),("std::size_t","()(const shared_ptr<_Tp> &)"),("std::size_t","()(const std::vector<bool, _Alloc> &)"),("const _Clos &","()()"),("std::__result<_Tuple>::type","()()"),("std::size_t","()(const thread::id &)"),("void","()(std::__future_base::_Result_base *)"),("std::promise<_Res>::_Ptr_type","()()"),("_Ptr_type","()()"),("void","()(_ArgTypes...)"),("_DInputType","()()"),("std::linear_congruential_engine::result_type","()()"),("std::mersenne_twister_engine::result_type","()()"),("std::subtract_with_carry_engine::result_type","()()"),("std::discard_block_engine::result_type","()()"),("std::independent_bits_engine::result_type","()()"),("std::shuffle_order_engine::result_type","()()"),("std::random_device::result_type","()()"),("std::mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>::result_type","()()"),("std::subtract_with_carry_engine<_UIntType, __w, __s, __r>::result_type","()()"),("std::discard_block_engine<_RandomNumberEngine, __p, __r>::result_type","()()"),("std::independent_bits_engine<_RandomNumberEngine, __w, _UIntType>::result_type","()()"),("std::shuffle_order_engine<_RandomNumberEngine, __k>::result_type","()()"),("bool","()(std::__detail::_AnyMatcher<type-parameter-0-0, false, __icase, __collate>::_CharT)"),("bool","()(std::__detail::_AnyMatcher<type-parameter-0-0, true, __icase, __collate>::_CharT)"),("bool","()(std::__detail::_CharMatcher::_CharT)"),("bool","()(std::__detail::_BracketMatcher::_CharT)"),("std::size_t","()(const std::type_index &)"),("std::__detail::_Mod_range_hashing::result_type","()(std::__detail::_Mod_range_hashing::first_argument_type, std::__detail::_Mod_range_hashing::second_argument_type)"),("std::__detail::_Mask_range_hashing::result_type","()(std::__detail::_Mask_range_hashing::first_argument_type, std::__detail::_Mask_range_hashing::second_argument_type)")],
"__test":["std::false_type","(...)"],
"_S_get":[("std::_Result::type","()"),("_Tp &","(_Sp_ebo_helper<_Nm, type-parameter-0-1, true> &)"),("_Tp &","(_Sp_ebo_helper<_Nm, type-parameter-0-1, false> &)")],
"rethrow_nested":["void","()"],
"nested_ptr":["std::__exception_ptr::exception_ptr","()"],
"__rethrow_if_nested_impl":["void","(void const*)"],
"__throw_bad_exception":["void","()"],
"__throw_bad_alloc":["void","()"],
"__throw_bad_array_new_length":["void","()"],
"__throw_bad_cast":["void","()"],
"__throw_bad_typeid":["void","()"],
"__throw_logic_error":["void","(char const *)"],
"__throw_domain_error":["void","(char const *)"],
"__throw_invalid_argument":["void","(char const *)"],
"__throw_length_error":["void","(char const *)"],
"__throw_out_of_range":["void","(char const *)"],
"__throw_out_of_range_fmt":["void","(char const *, ...)"],
"__throw_runtime_error":["void","(char const *)"],
"__throw_range_error":["void","(char const *)"],
"__throw_overflow_error":["void","(char const *)"],
"__throw_underflow_error":["void","(char const *)"],
"__throw_ios_failure":"void",
"__throw_system_error":["void","(int)"],
"__throw_future_error":"void",
"__throw_bad_function_call":["void","()"],
"pointer_to":[("std::__ptr_traits_elem_1<<type-parameter-0-1, type-parameter-0-2...>>::pointer","(__make_not_void<std::__ptr_traits_elem_1<<type-parameter-0-1, type-parameter-0-2...>>::element_type> &)"),("_Ptr","(__make_not_void<std::__ptr_traits_elem<type-parameter-0-0, void>::element_type> &)"),("std::pointer_traits<type-parameter-0-0 *>::pointer","(__make_not_void<std::pointer_traits<type-parameter-0-0 *>::element_type> &)")],
"base":[("std::reverse_iterator::iterator_type","()"),("const _Iterator &","()"),("std::move_iterator::iterator_type","()"),("_OutputIterator","()"),("const _RandomNumberEngine &","()")],
"operator*":[("std::reverse_iterator::reference","()"),("back_insert_iterator<_Container> &","()"),("front_insert_iterator<_Container> &","()"),("insert_iterator<_Container> &","()"),("__gnu_cxx::__normal_iterator::reference","()"),("std::move_iterator::reference","()"),("std::istreambuf_iterator::char_type","()"),("ostreambuf_iterator<_CharT, _Traits> &","()"),("std::_Deque_iterator::reference","()"),("std::add_lvalue_reference<element_type>::type","()"),("const _Tp &","()"),("ostream_iterator<_Tp, _CharT, _Traits> &","()"),("std::_List_iterator::reference","()"),("std::_List_const_iterator::reference","()"),("std::_Rb_tree_iterator::reference","()"),("std::_Rb_tree_const_iterator::reference","()"),("raw_storage_iterator<_OutputIterator, _Tp> &","()"),("std::__shared_ptr_access::element_type &","()"),("std::__shared_ptr_access<type-parameter-0-0, _Lp, true, false>::element_type &","()"),("std::auto_ptr::element_type &","()"),("std::_Bit_iterator::reference","()"),("std::_Bit_const_iterator::const_reference","()"),("std::_Fwd_list_iterator::reference","()"),("std::_Fwd_list_const_iterator::reference","()"),("const std::__cxx11::regex_iterator::value_type &","()"),("const std::__cxx11::regex_token_iterator::value_type &","()"),("std::__detail::_Node_iterator::reference","()"),("std::__detail::_Node_const_iterator::reference","()"),("std::__detail::_Local_iterator::reference","()"),("std::__detail::_Local_const_iterator::reference","()")],
"operator->":[("std::reverse_iterator::pointer","()"),("__gnu_cxx::__normal_iterator::pointer","()"),("std::move_iterator::pointer","()"),("std::_Deque_iterator::pointer","()"),("std::unique_ptr::pointer","()"),("const _Tp *","()"),("std::_List_iterator::pointer","()"),("std::_List_const_iterator::pointer","()"),("std::_Rb_tree_iterator::pointer","()"),("std::_Rb_tree_const_iterator::pointer","()"),("std::__shared_ptr_access::element_type *","()"),("std::__shared_ptr_access<type-parameter-0-0, _Lp, false, true>::element_type *","()"),("std::__shared_ptr_access<type-parameter-0-0, _Lp, true, false>::element_type *","()"),("std::auto_ptr::element_type *","()"),("std::_Fwd_list_iterator::pointer","()"),("std::_Fwd_list_const_iterator::pointer","()"),("const std::__cxx11::regex_iterator::value_type *","()"),("const std::__cxx11::regex_token_iterator::value_type *","()"),("std::__detail::_Node_iterator::pointer","()"),("std::__detail::_Node_const_iterator::pointer","()"),("std::__detail::_Local_iterator::pointer","()"),("std::__detail::_Local_const_iterator::pointer","()")],
"operator++":[("reverse_iterator<_Iterator> &","()"),("reverse_iterator<_Iterator>","(int)"),("back_insert_iterator<_Container> &","()"),("back_insert_iterator<_Container>","(int)"),("front_insert_iterator<_Container> &","()"),("front_insert_iterator<_Container>","(int)"),("insert_iterator<_Container> &","()"),("insert_iterator<_Container> &","(int)"),("__normal_iterator<_Iterator, _Container> &","()"),("__normal_iterator<_Iterator, _Container>","(int)"),("move_iterator<_Iterator> &","()"),("move_iterator<_Iterator>","(int)"),("istreambuf_iterator<_CharT, _Traits> &","()"),("istreambuf_iterator<_CharT, _Traits>","(int)"),("ostreambuf_iterator<_CharT, _Traits> &","(int)"),("ostreambuf_iterator<_CharT, _Traits> &","()"),("std::_Deque_iterator::_Self &","()"),("std::_Deque_iterator::_Self","(int)"),("istream_iterator<_Tp, _CharT, _Traits, _Dist> &","()"),("istream_iterator<_Tp, _CharT, _Traits, _Dist>","(int)"),("ostream_iterator<_Tp, _CharT, _Traits> &","()"),("ostream_iterator<_Tp, _CharT, _Traits> &","(int)"),("std::_List_iterator::_Self &","()"),("std::_List_iterator::_Self","(int)"),("std::_List_const_iterator::_Self &","()"),("std::_List_const_iterator::_Self","(int)"),("std::_Rb_tree_iterator::_Self &","()"),("std::_Rb_tree_iterator::_Self","(int)"),("std::_Rb_tree_const_iterator::_Self &","()"),("std::_Rb_tree_const_iterator::_Self","(int)"),("raw_storage_iterator<_OutputIterator, _Tp> &","()"),("raw_storage_iterator<_OutputIterator, _Tp>","(int)"),("std::__atomic_base::__int_type","(int)"),("std::__atomic_base::__int_type","()"),("std::__atomic_base<type-parameter-0-0 *>::__pointer_type","(int)"),("std::__atomic_base<type-parameter-0-0 *>::__pointer_type","()"),("std::_Bit_iterator::iterator &","()"),("std::_Bit_iterator::iterator","(int)"),("std::_Bit_const_iterator::const_iterator &","()"),("std::_Bit_const_iterator::const_iterator","(int)"),("std::atomic<type-parameter-0-0 *>::__pointer_type","(int)"),("std::atomic<type-parameter-0-0 *>::__pointer_type","()"),("duration<_Rep, _Period> &","()"),("duration<_Rep, _Period>","(int)"),("std::_Fwd_list_iterator::_Self &","()"),("std::_Fwd_list_iterator::_Self","(int)"),("std::_Fwd_list_const_iterator::_Self &","()"),("std::_Fwd_list_const_iterator::_Self","(int)"),("regex_iterator<_Bi_iter, _Ch_type, _Rx_traits> &","()"),("regex_iterator<_Bi_iter, _Ch_type, _Rx_traits>","(int)"),("regex_token_iterator<_Bi_iter, _Ch_type, _Rx_traits> &","()"),("regex_token_iterator<_Bi_iter, _Ch_type, _Rx_traits>","(int)"),("regex_iterator<_Bi_iter, _Ch_type, _Rx_traits> &","()"),("regex_token_iterator<_Bi_iter, _Ch_type, _Rx_traits> &","()"),("_Node_iterator<_Value, __constant_iterators, __cache> &","()"),("_Node_iterator<_Value, __constant_iterators, __cache>","(int)"),("_Node_const_iterator<_Value, __constant_iterators, __cache> &","()"),("_Node_const_iterator<_Value, __constant_iterators, __cache>","(int)"),("_Local_iterator<_Key, _Value, _ExtractKey, _Hash, _RangeHash, _Unused, __constant_iterators, __cache> &","()"),("_Local_iterator<_Key, _Value, _ExtractKey, _Hash, _RangeHash, _Unused, __constant_iterators, __cache>","(int)"),("_Local_const_iterator<_Key, _Value, _ExtractKey, _Hash, _RangeHash, _Unused, __constant_iterators, __cache> &","()"),("_Local_const_iterator<_Key, _Value, _ExtractKey, _Hash, _RangeHash, _Unused, __constant_iterators, __cache>","(int)")],
"operator--":[("reverse_iterator<_Iterator> &","()"),("reverse_iterator<_Iterator>","(int)"),("__normal_iterator<_Iterator, _Container> &","()"),("__normal_iterator<_Iterator, _Container>","(int)"),("move_iterator<_Iterator> &","()"),("move_iterator<_Iterator>","(int)"),("std::_Deque_iterator::_Self &","()"),("std::_Deque_iterator::_Self","(int)"),("std::_List_iterator::_Self &","()"),("std::_List_iterator::_Self","(int)"),("std::_List_const_iterator::_Self &","()"),("std::_List_const_iterator::_Self","(int)"),("std::_Rb_tree_iterator::_Self &","()"),("std::_Rb_tree_iterator::_Self","(int)"),("std::_Rb_tree_const_iterator::_Self &","()"),("std::_Rb_tree_const_iterator::_Self","(int)"),("std::__atomic_base::__int_type","(int)"),("std::__atomic_base::__int_type","()"),("std::__atomic_base<type-parameter-0-0 *>::__pointer_type","(int)"),("std::__atomic_base<type-parameter-0-0 *>::__pointer_type","()"),("std::_Bit_iterator::iterator &","()"),("std::_Bit_iterator::iterator","(int)"),("std::_Bit_const_iterator::const_iterator &","()"),("std::_Bit_const_iterator::const_iterator","(int)"),("std::atomic<type-parameter-0-0 *>::__pointer_type","(int)"),("std::atomic<type-parameter-0-0 *>::__pointer_type","()"),("duration<_Rep, _Period> &","()"),("duration<_Rep, _Period>","(int)")],
"operator[]":[("std::reverse_iterator::reference","(std::reverse_iterator::difference_type)"),("__gnu_cxx::__normal_iterator::reference","(__gnu_cxx::__normal_iterator::difference_type)"),("std::move_iterator::reference","(std::move_iterator::difference_type)"),("std::__cxx11::basic_string::const_reference","(unsigned long)"),("std::__cxx11::basic_string::reference","(unsigned long)"),("std::bitset::reference","(std::size_t)"),("bool","(std::size_t)"),("std::_Deque_iterator::reference","(std::_Deque_iterator::difference_type)"),("std::deque::reference","(std::deque::size_type)"),("std::deque::const_reference","(std::deque::size_type)"),("std::array::reference","(std::array::size_type)"),("std::array::const_reference","(std::array::size_type)"),("std::std::add_lvalue_reference<element_type>::type","(std::size_t)"),("std::map::mapped_type &","(const std::map::key_type &)"),("std::map::mapped_type &","(std::map::key_type &&)"),("std::__shared_ptr_access<type-parameter-0-0, _Lp, true, false>::element_type &","(std::ptrdiff_t)"),("std::vector::reference","(std::vector::size_type)"),("std::vector::const_reference","(std::vector::size_type)"),("std::_Bit_iterator::reference","(std::iterator<std::random_access_iterator_tag, bool, long, bool *, bool &>::difference_type)"),("std::_Bit_const_iterator::const_reference","(std::iterator<std::random_access_iterator_tag, bool, long, bool *, bool &>::difference_type)"),("std::vector<bool, type-parameter-0-0>::reference","(std::vector<bool, type-parameter-0-0>::size_type)"),("std::vector<bool, type-parameter-0-0>::const_reference","(std::vector<bool, type-parameter-0-0>::size_type)"),("std::__detail::_FunBase::value_type","(std::size_t)"),("std::__detail::_UnBase::value_type","(std::size_t)"),("std::__detail::_BinBase::value_type","(std::size_t)"),("std::__detail::_BinBase2::value_type","(std::size_t)"),("std::__detail::_BinBase1::value_type","(std::size_t)"),("std::__detail::_SBase::value_type","(std::size_t)"),("std::__detail::_SBase<_Array<type-parameter-0-0>>::value_type","(std::size_t)"),("_Tp &","(std::size_t)"),("const _Tp &","(std::size_t)"),("_Expr<_SClos<_ValArray, _Tp>, _Tp>","(std::slice)"),("slice_array<_Tp>","(std::slice)"),("_Expr<_GClos<_ValArray, _Tp>, _Tp>","(const std::gslice &)"),("gslice_array<_Tp>","(const std::gslice &)"),("valarray<_Tp>","(const valarray<bool> &)"),("mask_array<_Tp>","(const valarray<bool> &)"),("_Expr<_IClos<_ValArray, _Tp>, _Tp>","(const valarray<std::size_t> &)"),("indirect_array<_Tp>","(const valarray<std::size_t> &)"),("const _Tp &","(std::size_t)"),("_Tp &","(std::size_t)"),("std::__detail::_GBase::value_type","(std::size_t)"),("std::__detail::_GBase<_Array<type-parameter-0-0>>::value_type","(std::size_t)"),("std::__detail::_IBase::value_type","(std::size_t)"),("std::_Expr::value_type","(std::size_t)"),("valarray<std::_Expr::value_type>","(std::slice)"),("valarray<std::_Expr::value_type>","(const std::gslice &)"),("valarray<std::_Expr::value_type>","(const valarray<bool> &)"),("valarray<std::_Expr::value_type>","(const valarray<std::size_t> &)"),("_Tp","(std::size_t)"),("valarray<_Tp>","(std::slice)"),("valarray<_Tp>","(const std::gslice &)"),("valarray<_Tp>","(const valarray<bool> &)"),("valarray<_Tp>","(const valarray<std::size_t> &)"),("_Expr<_SClos<_ValArray, _Tp>, _Tp>","(std::slice)"),("slice_array<_Tp>","(std::slice)"),("_Expr<_GClos<_ValArray, _Tp>, _Tp>","(const std::gslice &)"),("gslice_array<_Tp>","(const std::gslice &)"),("valarray<_Tp>","(const valarray<bool> &)"),("mask_array<_Tp>","(const valarray<bool> &)"),("_Expr<_IClos<_ValArray, _Tp>, _Tp>","(const valarray<std::size_t> &)"),("indirect_array<_Tp>","(const valarray<std::size_t> &)"),("std::__cxx11::match_results::const_reference","(std::__cxx11::match_results::size_type)"),("std::__detail::_Map_base<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, std::__detail::_Select1st, type-parameter-0-3, type-parameter-0-4, type-parameter-0-5, type-parameter-0-6, type-parameter-0-7, type-parameter-0-8, true>::mapped_type &","(const std::__detail::_Map_base<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, std::__detail::_Select1st, type-parameter-0-3, type-parameter-0-4, type-parameter-0-5, type-parameter-0-6, type-parameter-0-7, type-parameter-0-8, true>::key_type &)"),("std::__detail::_Map_base<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, std::__detail::_Select1st, type-parameter-0-3, type-parameter-0-4, type-parameter-0-5, type-parameter-0-6, type-parameter-0-7, type-parameter-0-8, true>::mapped_type &","(std::__detail::_Map_base<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, std::__detail::_Select1st, type-parameter-0-3, type-parameter-0-4, type-parameter-0-5, type-parameter-0-6, type-parameter-0-7, type-parameter-0-8, true>::key_type &&)"),("std::__detail::_Map_base<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, std::__detail::_Select1st, type-parameter-0-3, type-parameter-0-4, type-parameter-0-5, type-parameter-0-6, type-parameter-0-7, type-parameter-0-8, true>::mapped_type &","(const std::__detail::_Map_base<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, std::__detail::_Select1st, type-parameter-0-3, type-parameter-0-4, type-parameter-0-5, type-parameter-0-6, type-parameter-0-7, type-parameter-0-8, true>::key_type &)"),("std::__detail::_Map_base<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, std::__detail::_Select1st, type-parameter-0-3, type-parameter-0-4, type-parameter-0-5, type-parameter-0-6, type-parameter-0-7, type-parameter-0-8, true>::mapped_type &","(std::__detail::_Map_base<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, std::__detail::_Select1st, type-parameter-0-3, type-parameter-0-4, type-parameter-0-5, type-parameter-0-6, type-parameter-0-7, type-parameter-0-8, true>::key_type &&)"),("std::unordered_map::mapped_type &","(const std::unordered_map::key_type &)"),("std::unordered_map::mapped_type &","(std::unordered_map::key_type &&)")],
"__iter_less_iter":["__gnu_cxx::__ops::_Iter_less_iter","()"],
"__iter_less_val":["__gnu_cxx::__ops::_Iter_less_val","()"],
"__iter_comp_val":[("__gnu_cxx::__ops::_Iter_less_val","(__gnu_cxx::__ops::_Iter_less_iter)"),("__gnu_cxx::__ops::_Iter_equal_to_val","(__gnu_cxx::__ops::_Iter_equal_to_iter)")],
"__val_less_iter":["__gnu_cxx::__ops::_Val_less_iter","()"],
"__val_comp_iter":["__gnu_cxx::__ops::_Val_less_iter","(__gnu_cxx::__ops::_Iter_less_iter)"],
"__iter_equal_to_iter":["__gnu_cxx::__ops::_Iter_equal_to_iter","()"],
"__iter_equal_to_val":["__gnu_cxx::__ops::_Iter_equal_to_val","()"],
"__fill_a1":"void",
"__size_to_integer":[("int","(int)"),("unsigned int","(unsigned int)"),("long","(long)"),("unsigned long","(unsigned long)"),("long long","(long long)"),("unsigned long long","(unsigned long long)"),("__int128","(__int128)"),("unsigned __int128","(unsigned __int128)"),("long long","(float)"),("long long","(double)"),("long long","(long double)"),("long long","(__float128)")],
"__lg":[("int","(int)"),("unsigned int","(unsigned int)"),("long","(long)"),("unsigned long","(unsigned long)"),("long long","(long long)"),("unsigned long long","(unsigned long long)")],
"assign":[("void","(__gnu_cxx::char_traits::char_type &, const __gnu_cxx::char_traits::char_type &)"),("__gnu_cxx::char_traits::char_type *","(__gnu_cxx::char_traits::char_type *, std::size_t, __gnu_cxx::char_traits::char_type)"),("std::char_traits<_CharT>::char_type *","(__gnu_cxx::char_traits::char_type *, std::size_t, __gnu_cxx::char_traits::char_type)"),("void","(std::char_traits<char>::char_type &, const std::char_traits<char>::char_type &)"),("std::char_traits<char>::char_type *","(std::char_traits<char>::char_type *, std::size_t, std::char_traits<char>::char_type)"),("void","(std::char_traits<wchar_t>::char_type &, const std::char_traits<wchar_t>::char_type &)"),("std::char_traits<wchar_t>::char_type *","(std::char_traits<wchar_t>::char_type *, std::size_t, std::char_traits<wchar_t>::char_type)"),("void","(std::char_traits<char16_t>::char_type &, const std::char_traits<char16_t>::char_type &)"),("std::char_traits<char16_t>::char_type *","(std::char_traits<char16_t>::char_type *, std::size_t, std::char_traits<char16_t>::char_type)"),("void","(std::char_traits<char32_t>::char_type &, const std::char_traits<char32_t>::char_type &)"),("std::char_traits<char32_t>::char_type *","(std::char_traits<char32_t>::char_type *, std::size_t, std::char_traits<char32_t>::char_type)"),("std::basic_string<_CharT, _Traits, _Alloc> &","(conststd::basic_string<_CharT, _Traits, _Alloc> &)"),("std::basic_string<_CharT, _Traits, _Alloc> &","std::basic_string<_CharT, _Traits, _Alloc> &&)"),("std::basic_string<_CharT, _Traits, _Alloc> &","(conststd::basic_string<_CharT, _Traits, _Alloc> &, unsigned long, unsigned long)"),("std::basic_string<_CharT, _Traits, _Alloc> &","(const _CharT *, unsigned long)"),("std::basic_string<_CharT, _Traits, _Alloc> &","(const _CharT *)"),("std::basic_string<_CharT, _Traits, _Alloc> &","(unsigned long, _CharT)"),("std::basic_string<_CharT, _Traits, _Alloc> &","(initializer_list<_CharT>)"),("void","(int, const std::_V2::error_category &)"),("void","(std::deque::size_type, const std::deque::value_type &)"),("void","(initializer_list<std::deque::value_type>)"),("void","(std::__cxx11::list::size_type, const std::__cxx11::list::value_type &)"),("void","(initializer_list<std::__cxx11::list::value_type>)"),("void","(std::vector::size_type, const std::vector::value_type &)"),("void","(initializer_list<std::vector::value_type>)"),("void","(std::vector<bool, type-parameter-0-0>::size_type, const bool &)"),("void","(initializer_list<bool>)"),("void","(std::forward_list::size_type, const _Tp &)"),("void","(std::initializer_list<_Tp>)"),("basic_regex<type-parameter-0-0, type-parameter-0-1> &","(const basic_regex<type-parameter-0-0, type-parameter-0-1> &)"),("basic_regex<type-parameter-0-0, type-parameter-0-1> &","(basic_regex<type-parameter-0-0, type-parameter-0-1> &&)"),("basic_regex<type-parameter-0-0, type-parameter-0-1> &","(const _Ch_type *, std::__cxx11::basic_regex::flag_type)"),("basic_regex<type-parameter-0-0, type-parameter-0-1> &","(const _Ch_type *, std::size_t, std::__cxx11::basic_regex::flag_type)"),("basic_regex<type-parameter-0-0, type-parameter-0-1> &","(initializer_list<_Ch_type>, std::__cxx11::basic_regex::flag_type)")],
"eq":"bool",
"lt":"bool",
"compare":"int",
"length":[("std::size_t","(const __gnu_cxx::char_traits::char_type *)"),("std::size_t","(const std::char_traits<char>::char_type *)"),("std::size_t","(const std::char_traits<wchar_t>::char_type *)"),("std::size_t","(const std::char_traits<char16_t>::char_type *)"),("std::size_t","(const std::char_traits<char32_t>::char_type *)"),("unsigned long","()"),("int","(std::__codecvt_abstract_base::state_type &, const std::__codecvt_abstract_base::extern_type *, const std::__codecvt_abstract_base::extern_type *, std::size_t)"),("std::size_t","(const std::__cxx11::regex_traits::char_type *)"),("std::__cxx11::sub_match::difference_type","()"),("std::__cxx11::match_results::difference_type","(std::__cxx11::match_results::size_type)")],
"find":[("const __gnu_cxx::char_traits::char_type *","(const __gnu_cxx::char_traits::char_type *, std::size_t, const __gnu_cxx::char_traits::char_type &)"),("const std::char_traits<_CharT>::char_type *","(const __gnu_cxx::char_traits::char_type *, std::size_t, const __gnu_cxx::char_traits::char_type &)"),("const std::char_traits<char>::char_type *","(const std::char_traits<char>::char_type *, std::size_t, const std::char_traits<char>::char_type &)"),("const std::char_traits<wchar_t>::char_type *","(const std::char_traits<wchar_t>::char_type *, std::size_t, const std::char_traits<wchar_t>::char_type &)"),("const std::char_traits<char16_t>::char_type *","(const std::char_traits<char16_t>::char_type *, std::size_t, const std::char_traits<char16_t>::char_type &)"),("const std::char_traits<char32_t>::char_type *","(const std::char_traits<char32_t>::char_type *, std::size_t, const std::char_traits<char32_t>::char_type &)"),("unsigned long","(const _CharT *, unsigned long, unsigned long)"),("unsigned long","(conststd::basic_string<_CharT, _Traits, _Alloc> &, unsigned long)"),("unsigned long","(const _CharT *, unsigned long)"),("unsigned long","(_CharT, unsigned long)"),("std::basic_string<_CharT, _Traits, _Alloc>::size_type","(const _CharT *, unsigned long, unsigned long)"),("std::basic_string<_CharT, _Traits, _Alloc>::size_type","(_CharT, unsigned long)"),("std::_Rb_tree::iterator","(const std::_Rb_tree::key_type &)"),("std::_Rb_tree::const_iterator","(const std::_Rb_tree::key_type &)"),("std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator","(const _Key &)"),("std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator","(const _Key &)"),("std::map::iterator","(const std::map::key_type &)"),("std::map::const_iterator","(const std::map::key_type &)"),("std::multimap::iterator","(const std::multimap::key_type &)"),("std::multimap::const_iterator","(const std::multimap::key_type &)"),("std::set::iterator","(const std::set::key_type &)"),("std::set::const_iterator","(const std::set::key_type &)"),("std::multiset::iterator","(const std::multiset::key_type &)"),("std::multiset::const_iterator","(const std::multiset::key_type &)"),("std::_Hashtable::iterator","(const std::_Hashtable::key_type &)"),("std::_Hashtable::const_iterator","(const std::_Hashtable::key_type &)"),("std::_Hashtable::iterator","(const std::_Hashtable::key_type &)"),("std::_Hashtable::const_iterator","(const std::_Hashtable::key_type &)"),("std::unordered_map::iterator","(const std::unordered_map::key_type &)"),("std::unordered_map::const_iterator","(const std::unordered_map::key_type &)"),("std::unordered_multimap::iterator","(const std::unordered_multimap::key_type &)"),("std::unordered_multimap::const_iterator","(const std::unordered_multimap::key_type &)"),("std::unordered_set::iterator","(const std::unordered_set::key_type &)"),("std::unordered_set::const_iterator","(const std::unordered_set::key_type &)"),("std::unordered_multiset::iterator","(const std::unordered_multiset::key_type &)"),("std::unordered_multiset::const_iterator","(const std::unordered_multiset::key_type &)")],
"move":[("__gnu_cxx::char_traits::char_type *","(__gnu_cxx::char_traits::char_type *, const __gnu_cxx::char_traits::char_type *, std::size_t)"),("std::char_traits<_CharT>::char_type *","(__gnu_cxx::char_traits::char_type *, const __gnu_cxx::char_traits::char_type *, std::size_t)"),("std::char_traits<char>::char_type *","(std::char_traits<char>::char_type *, const std::char_traits<char>::char_type *, std::size_t)"),("std::char_traits<wchar_t>::char_type *","(std::char_traits<wchar_t>::char_type *, const std::char_traits<wchar_t>::char_type *, std::size_t)"),("std::char_traits<char16_t>::char_type *","(std::char_traits<char16_t>::char_type *, const std::char_traits<char16_t>::char_type *, std::size_t)"),("std::char_traits<char32_t>::char_type *","(std::char_traits<char32_t>::char_type *, const std::char_traits<char32_t>::char_type *, std::size_t)"),("void","(basic_ios<_CharT, _Traits> &)"),("void","(basic_ios<_CharT, _Traits> &&)")],
"copy":[("__gnu_cxx::char_traits::char_type *","(__gnu_cxx::char_traits::char_type *, const __gnu_cxx::char_traits::char_type *, std::size_t)"),("std::char_traits<_CharT>::char_type *","(__gnu_cxx::char_traits::char_type *, const __gnu_cxx::char_traits::char_type *, std::size_t)"),("std::char_traits<char>::char_type *","(std::char_traits<char>::char_type *, const std::char_traits<char>::char_type *, std::size_t)"),("std::char_traits<wchar_t>::char_type *","(std::char_traits<wchar_t>::char_type *, const std::char_traits<wchar_t>::char_type *, std::size_t)"),("std::char_traits<char16_t>::char_type *","(std::char_traits<char16_t>::char_type *, const std::char_traits<char16_t>::char_type *, std::size_t)"),("std::char_traits<char32_t>::char_type *","(std::char_traits<char32_t>::char_type *, const std::char_traits<char32_t>::char_type *, std::size_t)"),("unsigned long","(_CharT *, unsigned long, unsigned long)"),("std::basic_string<_CharT, _Traits, _Alloc>::size_type","(_CharT *, unsigned long, unsigned long)")],
"to_char_type":[("__gnu_cxx::char_traits::char_type","(const __gnu_cxx::char_traits::int_type &)"),("std::char_traits<char>::char_type","(const std::char_traits<char>::int_type &)"),("std::char_traits<wchar_t>::char_type","(const std::char_traits<wchar_t>::int_type &)"),("std::char_traits<char16_t>::char_type","(const std::char_traits<char16_t>::int_type &)"),("std::char_traits<char32_t>::char_type","(const std::char_traits<char32_t>::int_type &)")],
"to_int_type":[("__gnu_cxx::char_traits::int_type","(const __gnu_cxx::char_traits::char_type &)"),("std::char_traits<char>::int_type","(const std::char_traits<char>::char_type &)"),("std::char_traits<wchar_t>::int_type","(const std::char_traits<wchar_t>::char_type &)"),("std::char_traits<char16_t>::int_type","(const std::char_traits<char16_t>::char_type &)"),("std::char_traits<char32_t>::int_type","(const std::char_traits<char32_t>::char_type &)")],
"eq_int_type":"bool",
"eof":[("__gnu_cxx::char_traits::int_type","()"),("std::char_traits<char>::int_type","()"),("std::char_traits<wchar_t>::int_type","()"),("std::char_traits<char16_t>::int_type","()"),("std::char_traits<char32_t>::int_type","()"),("bool","()")],
"not_eof":[("__gnu_cxx::char_traits::int_type","(const __gnu_cxx::char_traits::int_type &)"),("std::char_traits<char>::int_type","(const std::char_traits<char>::int_type &)"),("std::char_traits<wchar_t>::int_type","(const std::char_traits<wchar_t>::int_type &)"),("std::char_traits<char16_t>::int_type","(const std::char_traits<char16_t>::int_type &)"),("std::char_traits<char32_t>::int_type","(const std::char_traits<char32_t>::int_type &)")],
"__uselocale":["locale_t","(locale_t)"],
"__convert_from_v":["int","(const std::__c_locale &, char *, const int, char const *, ...)"],
"clone":["int","(int (*)(void *), void *, int, void *, ...)"],
"unshare":["int","(int)"],
"sched_getcpu":["int","()"],
"getcpu":["int","(unsigned int *, unsigned int *)"],
"setns":["int","(int, int)"],
"__sched_cpucount":["int","(size_t, const cpu_set_t *)"],
"__sched_cpualloc":["cpu_set_t *","(size_t)"],
"__sched_cpufree":["void","(cpu_set_t *)"],
"sched_setparam":["int","(__pid_t, const struct sched_param *)"],
"sched_getparam":["int","(__pid_t, struct sched_param *)"],
"sched_setscheduler":["int","(__pid_t, int, const struct sched_param *)"],
"sched_getscheduler":["int","(__pid_t)"],
"sched_yield":["int","()"],
"sched_get_priority_max":["int","(int)"],
"sched_get_priority_min":["int","(int)"],
"sched_rr_get_interval":["int","(__pid_t, struct timespec *)"],
"sched_setaffinity":["int","(__pid_t, size_t, const cpu_set_t *)"],
"sched_getaffinity":["int","(__pid_t, size_t, cpu_set_t *)"],
"pthread_create":["int","(pthread_t *__restrict, const pthread_attr_t *__restrict, void *(*)(void *), void *__restrict)"],
"pthread_exit":["void","(void *)"],
"pthread_join":["int","(pthread_t, void **)"],
"pthread_tryjoin_np":["int","(pthread_t, void **)"],
"pthread_timedjoin_np":["int","(pthread_t, void **, const struct timespec *)"],
"pthread_clockjoin_np":["int","(pthread_t, void **, clockid_t, const struct timespec *)"],
"pthread_detach":["int","(pthread_t)"],
"pthread_self":["pthread_t","()"],
"pthread_equal":["int","(pthread_t, pthread_t)"],
"pthread_attr_init":["int","(pthread_attr_t *)"],
"pthread_attr_destroy":["int","(pthread_attr_t *)"],
"pthread_attr_getdetachstate":["int","(const pthread_attr_t *, int *)"],
"pthread_attr_setdetachstate":["int","(pthread_attr_t *, int)"],
"pthread_attr_getguardsize":["int","(const pthread_attr_t *, size_t *)"],
"pthread_attr_setguardsize":["int","(pthread_attr_t *, size_t)"],
"pthread_attr_getschedparam":["int","(const pthread_attr_t *__restrict, struct sched_param *__restrict)"],
"pthread_attr_setschedparam":["int","(pthread_attr_t *__restrict, const struct sched_param *__restrict)"],
"pthread_attr_getschedpolicy":["int","(const pthread_attr_t *__restrict, int *__restrict)"],
"pthread_attr_setschedpolicy":["int","(pthread_attr_t *, int)"],
"pthread_attr_getinheritsched":["int","(const pthread_attr_t *__restrict, int *__restrict)"],
"pthread_attr_setinheritsched":["int","(pthread_attr_t *, int)"],
"pthread_attr_getscope":["int","(const pthread_attr_t *__restrict, int *__restrict)"],
"pthread_attr_setscope":["int","(pthread_attr_t *, int)"],
"pthread_attr_getstackaddr":["int","(const pthread_attr_t *__restrict, void **__restrict)"],
"pthread_attr_setstackaddr":["int","(pthread_attr_t *, void *)"],
"pthread_attr_getstacksize":["int","(const pthread_attr_t *__restrict, size_t *__restrict)"],
"pthread_attr_setstacksize":["int","(pthread_attr_t *, size_t)"],
"pthread_attr_getstack":["int","(const pthread_attr_t *__restrict, void **__restrict, size_t *__restrict)"],
"pthread_attr_setstack":["int","(pthread_attr_t *, void *, size_t)"],
"pthread_attr_setaffinity_np":["int","(pthread_attr_t *, size_t, const cpu_set_t *)"],
"pthread_attr_getaffinity_np":["int","(const pthread_attr_t *, size_t, cpu_set_t *)"],
"pthread_getattr_default_np":["int","(pthread_attr_t *)"],
"pthread_attr_setsigmask_np":["int","(pthread_attr_t *, const __sigset_t *)"],
"pthread_attr_getsigmask_np":["int","(const pthread_attr_t *, __sigset_t *)"],
"pthread_setattr_default_np":["int","(const pthread_attr_t *)"],
"pthread_getattr_np":["int","(pthread_t, pthread_attr_t *)"],
"pthread_setschedparam":["int","(pthread_t, int, const struct sched_param *)"],
"pthread_getschedparam":["int","(pthread_t, int *__restrict, struct sched_param *__restrict)"],
"pthread_setschedprio":["int","(pthread_t, int)"],
"pthread_getname_np":["int","(pthread_t, char *, size_t)"],
"pthread_setname_np":["int","(pthread_t, char const *)"],
"pthread_getconcurrency":["int","()"],
"pthread_setconcurrency":["int","(int)"],
"pthread_yield":"int",
"pthread_setaffinity_np":["int","(pthread_t, size_t, const cpu_set_t *)"],
"pthread_getaffinity_np":["int","(pthread_t, size_t, cpu_set_t *)"],
"pthread_once":["int","(pthread_once_t *, void (*)())"],
"pthread_setcancelstate":["int","(int, int *)"],
"pthread_setcanceltype":["int","(int, int *)"],
"pthread_cancel":["int","(pthread_t)"],
"pthread_testcancel":["void","()"],
"__setdoit":["void","(int)"],
"__defer":["void","()"],
"__restore":["void","()"],
"pthread_mutex_init":["int","(pthread_mutex_t *, const pthread_mutexattr_t *)"],
"pthread_mutex_destroy":["int","(pthread_mutex_t *)"],
"pthread_mutex_trylock":["int","(pthread_mutex_t *)"],
"pthread_mutex_lock":["int","(pthread_mutex_t *)"],
"pthread_mutex_timedlock":["int","(pthread_mutex_t *__restrict, const struct timespec *__restrict)"],
"pthread_mutex_clocklock":["int","(pthread_mutex_t *__restrict, clockid_t, const struct timespec *__restrict)"],
"pthread_mutex_unlock":["int","(pthread_mutex_t *)"],
"pthread_mutex_getprioceiling":["int","(const pthread_mutex_t *__restrict, int *__restrict)"],
"pthread_mutex_setprioceiling":["int","(pthread_mutex_t *__restrict, int, int *__restrict)"],
"pthread_mutex_consistent":["int","(pthread_mutex_t *)"],
"pthread_mutex_consistent_np":["int","(pthread_mutex_t *)"],
"pthread_mutexattr_init":["int","(pthread_mutexattr_t *)"],
"pthread_mutexattr_destroy":["int","(pthread_mutexattr_t *)"],
"pthread_mutexattr_getpshared":["int","(const pthread_mutexattr_t *__restrict, int *__restrict)"],
"pthread_mutexattr_setpshared":["int","(pthread_mutexattr_t *, int)"],
"pthread_mutexattr_gettype":["int","(const pthread_mutexattr_t *__restrict, int *__restrict)"],
"pthread_mutexattr_settype":["int","(pthread_mutexattr_t *, int)"],
"pthread_mutexattr_getprotocol":["int","(const pthread_mutexattr_t *__restrict, int *__restrict)"],
"pthread_mutexattr_setprotocol":["int","(pthread_mutexattr_t *, int)"],
"pthread_mutexattr_getprioceiling":["int","(const pthread_mutexattr_t *__restrict, int *__restrict)"],
"pthread_mutexattr_setprioceiling":["int","(pthread_mutexattr_t *, int)"],
"pthread_mutexattr_getrobust":["int","(const pthread_mutexattr_t *, int *)"],
"pthread_mutexattr_getrobust_np":["int","(pthread_mutexattr_t *, int *)"],
"pthread_mutexattr_setrobust":["int","(pthread_mutexattr_t *, int)"],
"pthread_mutexattr_setrobust_np":["int","(pthread_mutexattr_t *, int)"],
"pthread_rwlock_init":["int","(pthread_rwlock_t *__restrict, const pthread_rwlockattr_t *__restrict)"],
"pthread_rwlock_destroy":["int","(pthread_rwlock_t *)"],
"pthread_rwlock_rdlock":["int","(pthread_rwlock_t *)"],
"pthread_rwlock_tryrdlock":["int","(pthread_rwlock_t *)"],
"pthread_rwlock_timedrdlock":["int","(pthread_rwlock_t *__restrict, const struct timespec *__restrict)"],
"pthread_rwlock_clockrdlock":["int","(pthread_rwlock_t *__restrict, clockid_t, const struct timespec *__restrict)"],
"pthread_rwlock_wrlock":["int","(pthread_rwlock_t *)"],
"pthread_rwlock_trywrlock":["int","(pthread_rwlock_t *)"],
"pthread_rwlock_timedwrlock":["int","(pthread_rwlock_t *__restrict, const struct timespec *__restrict)"],
"pthread_rwlock_clockwrlock":["int","(pthread_rwlock_t *__restrict, clockid_t, const struct timespec *__restrict)"],
"pthread_rwlock_unlock":["int","(pthread_rwlock_t *)"],
"pthread_rwlockattr_init":["int","(pthread_rwlockattr_t *)"],
"pthread_rwlockattr_destroy":["int","(pthread_rwlockattr_t *)"],
"pthread_rwlockattr_getpshared":["int","(const pthread_rwlockattr_t *__restrict, int *__restrict)"],
"pthread_rwlockattr_setpshared":["int","(pthread_rwlockattr_t *, int)"],
"pthread_rwlockattr_getkind_np":["int","(const pthread_rwlockattr_t *__restrict, int *__restrict)"],
"pthread_rwlockattr_setkind_np":["int","(pthread_rwlockattr_t *, int)"],
"pthread_cond_init":["int","(pthread_cond_t *__restrict, const pthread_condattr_t *__restrict)"],
"pthread_cond_destroy":["int","(pthread_cond_t *)"],
"pthread_cond_signal":["int","(pthread_cond_t *)"],
"pthread_cond_broadcast":["int","(pthread_cond_t *)"],
"pthread_cond_wait":["int","(pthread_cond_t *__restrict, pthread_mutex_t *__restrict)"],
"pthread_cond_timedwait":["int","(pthread_cond_t *__restrict, pthread_mutex_t *__restrict, const struct timespec *__restrict)"],
"pthread_cond_clockwait":["int","(pthread_cond_t *__restrict, pthread_mutex_t *__restrict, __clockid_t, const struct timespec *__restrict)"],
"pthread_condattr_init":["int","(pthread_condattr_t *)"],
"pthread_condattr_destroy":["int","(pthread_condattr_t *)"],
"pthread_condattr_getpshared":["int","(const pthread_condattr_t *__restrict, int *__restrict)"],
"pthread_condattr_setpshared":["int","(pthread_condattr_t *, int)"],
"pthread_condattr_getclock":["int","(const pthread_condattr_t *__restrict, __clockid_t *__restrict)"],
"pthread_condattr_setclock":["int","(pthread_condattr_t *, __clockid_t)"],
"pthread_spin_init":["int","(pthread_spinlock_t *, int)"],
"pthread_spin_destroy":["int","(pthread_spinlock_t *)"],
"pthread_spin_lock":["int","(pthread_spinlock_t *)"],
"pthread_spin_trylock":["int","(pthread_spinlock_t *)"],
"pthread_spin_unlock":["int","(pthread_spinlock_t *)"],
"pthread_barrier_init":["int","(pthread_barrier_t *__restrict, const pthread_barrierattr_t *__restrict, unsigned int)"],
"pthread_barrier_destroy":["int","(pthread_barrier_t *)"],
"pthread_barrier_wait":["int","(pthread_barrier_t *)"],
"pthread_barrierattr_init":["int","(pthread_barrierattr_t *)"],
"pthread_barrierattr_destroy":["int","(pthread_barrierattr_t *)"],
"pthread_barrierattr_getpshared":["int","(const pthread_barrierattr_t *__restrict, int *__restrict)"],
"pthread_barrierattr_setpshared":["int","(pthread_barrierattr_t *, int)"],
"pthread_key_create":["int","(pthread_key_t *, void (*)(void *))"],
"pthread_key_delete":["int","(pthread_key_t)"],
"pthread_getspecific":["void *","(pthread_key_t)"],
"pthread_setspecific":["int","(pthread_key_t, void const*)"],
"pthread_getcpuclockid":["int","(pthread_t, __clockid_t *)"],
"pthread_atfork":["int","(void (*)(), void (*)(), void (*)())"],
"__gthread_active_p":["int","()"],
"__gthread_create":["int","(__gthread_t *, void *(*)(void *), void *)"],
"__gthread_join":["int","(__gthread_t, void **)"],
"__gthread_detach":["int","(__gthread_t)"],
"__gthread_equal":["int","(__gthread_t, __gthread_t)"],
"__gthread_self":["__gthread_t","()"],
"__gthread_yield":["int","()"],
"__gthread_once":["int","(__gthread_once_t *, void (*)())"],
"__gthread_key_create":["int","(__gthread_key_t *, void (*)(void *))"],
"__gthread_key_delete":["int","(__gthread_key_t)"],
"__gthread_getspecific":["void *","(__gthread_key_t)"],
"__gthread_setspecific":["int","(__gthread_key_t, void const*)"],
"__gthread_mutex_init_function":["void","(__gthread_mutex_t *)"],
"__gthread_mutex_destroy":["int","(__gthread_mutex_t *)"],
"__gthread_mutex_lock":["int","(__gthread_mutex_t *)"],
"__gthread_mutex_trylock":["int","(__gthread_mutex_t *)"],
"__gthread_mutex_timedlock":["int","(__gthread_mutex_t *, const __gthread_time_t *)"],
"__gthread_mutex_unlock":["int","(__gthread_mutex_t *)"],
"__gthread_recursive_mutex_lock":["int","(__gthread_recursive_mutex_t *)"],
"__gthread_recursive_mutex_trylock":["int","(__gthread_recursive_mutex_t *)"],
"__gthread_recursive_mutex_timedlock":["int","(__gthread_recursive_mutex_t *, const __gthread_time_t *)"],
"__gthread_recursive_mutex_unlock":["int","(__gthread_recursive_mutex_t *)"],
"__gthread_recursive_mutex_destroy":["int","(__gthread_recursive_mutex_t *)"],
"__gthread_cond_broadcast":["int","(__gthread_cond_t *)"],
"__gthread_cond_signal":["int","(__gthread_cond_t *)"],
"__gthread_cond_wait":["int","(__gthread_cond_t *, __gthread_mutex_t *)"],
"__gthread_cond_timedwait":["int","(__gthread_cond_t *, __gthread_mutex_t *, const __gthread_time_t *)"],
"__gthread_cond_wait_recursive":["int","(__gthread_cond_t *, __gthread_recursive_mutex_t *)"],
"__gthread_cond_destroy":["int","(__gthread_cond_t *)"],
"__is_single_threaded":["bool","()"],
"__exchange_and_add":["_Atomic_word","(volatile _Atomic_word *, int)"],
"__atomic_add":["void","(volatile _Atomic_word *, int)"],
"__exchange_and_add_single":["_Atomic_word","(_Atomic_word *, int)"],
"__atomic_add_single":["void","(_Atomic_word *, int)"],
"__exchange_and_add_dispatch":["_Atomic_word","(_Atomic_word *, int)"],
"__atomic_add_dispatch":["void","(_Atomic_word *, int)"],
"address":[("__gnu_cxx::new_allocator::pointer","(__gnu_cxx::new_allocator::reference)"),("__gnu_cxx::new_allocator::const_pointer","(__gnu_cxx::new_allocator::const_reference)")],
"allocate":[("_Tp *","(__gnu_cxx::new_allocator::size_type, void const*)"),("std::allocator_traits::pointer","(_Alloc &, std::allocator_traits::size_type)"),("std::allocator_traits::pointer","(_Alloc &, std::allocator_traits::size_type, std::allocator_traits::const_void_pointer)"),("std::allocator_traits<allocator<type-parameter-0-0>>::pointer","(std::allocator_traits<allocator<type-parameter-0-0>>::allocator_type &, std::allocator_traits<allocator<type-parameter-0-0>>::size_type)"),("std::allocator_traits<allocator<type-parameter-0-0>>::pointer","(std::allocator_traits<allocator<type-parameter-0-0>>::allocator_type &, std::allocator_traits<allocator<type-parameter-0-0>>::size_type, std::allocator_traits<allocator<type-parameter-0-0>>::const_void_pointer)"),("void *","(std::allocator_traits<std::allocator<void>>::allocator_type &, std::allocator_traits<std::allocator<void>>::size_type, void const*)"),("std::scoped_allocator_adaptor::pointer","(std::scoped_allocator_adaptor::size_type)"),("std::scoped_allocator_adaptor::pointer","(std::scoped_allocator_adaptor::size_type, std::scoped_allocator_adaptor::const_void_pointer)")],
"deallocate":"void",
"max_size":[("__gnu_cxx::new_allocator::size_type","()"),("std::allocator_traits::size_type","(const _Alloc &)"),("std::allocator_traits<allocator<type-parameter-0-0>>::size_type","(const std::allocator_traits<allocator<type-parameter-0-0>>::allocator_type &)"),("std::allocator_traits<std::allocator<void>>::size_type","(const std::allocator_traits<std::allocator<void>>::allocator_type &)"),("unsigned long","()"),("std::deque::size_type","()"),("std::array::size_type","()"),("std::__cxx11::list::size_type","()"),("std::_Rb_tree::size_type","()"),("std::map::size_type","()"),("std::multimap::size_type","()"),("std::vector::size_type","()"),("std::vector<bool, type-parameter-0-0>::size_type","()"),("std::set::size_type","()"),("std::multiset::size_type","()"),("std::forward_list::size_type","()"),("std::__cxx11::match_results::size_type","()"),("std::scoped_allocator_adaptor::size_type","()"),("std::_Hashtable::size_type","()"),("std::unordered_map::size_type","()"),("std::unordered_multimap::size_type","()"),("std::unordered_set::size_type","()"),("std::unordered_multiset::size_type","()")],
"_M_max_size":["__gnu_cxx::new_allocator::size_type","()"],
"_S_do_it":[("void","(_Alloc &, _Alloc &)"),("bool","(const _Alloc &, const _Alloc &)"),("bool","(_Tp &)"),("void","(_Tp *, _Tp *)"),("void","(_Tp *, _Tp *, const _Tp)"),("void","(const _Tp *, const _Tp *, _Tp *__restrict)"),("void","(const _Tp *__restrict, std::size_t, _Tp *__restrict)")],
"__pure_dummy":["void","()"],
"size":[("std::initializer_list::size_type","()"),("unsigned long","()"),("std::size_t","()"),("std::_Temporary_buffer::size_type","()"),("std::size_t","()"),("std::deque::size_type","()"),("std::array::size_type","()"),("std::__cxx11::list::size_type","()"),("std::_Rb_tree::size_type","()"),("std::map::size_type","()"),("std::multimap::size_type","()"),("std::vector::size_type","()"),("std::vector<bool, type-parameter-0-0>::size_type","()"),("std::queue::size_type","()"),("std::priority_queue::size_type","()"),("std::set::size_type","()"),("std::multiset::size_type","()"),("std::stack::size_type","()"),("std::size_t","()"),("valarray<std::size_t>","()"),("std::size_t","()"),("std::__cxx11::match_results::size_type","()"),("std::_Hashtable::size_type","()"),("std::unordered_map::size_type","()"),("std::unordered_multimap::size_type","()"),("std::unordered_set::size_type","()"),("std::unordered_multiset::size_type","()")],
"begin":[("std::initializer_list::const_iterator","()"),("std::__cxx11::basic_string::iterator","()"),("std::__cxx11::basic_string::const_iterator","()"),("std::_Temporary_buffer::iterator","()"),("std::deque::iterator","()"),("std::deque::const_iterator","()"),("std::array::iterator","()"),("std::array::const_iterator","()"),("std::__cxx11::list::iterator","()"),("std::__cxx11::list::const_iterator","()"),("std::_Rb_tree::iterator","()"),("std::_Rb_tree::const_iterator","()"),("std::map::iterator","()"),("std::map::const_iterator","()"),("std::multimap::iterator","()"),("std::multimap::const_iterator","()"),("std::vector::iterator","()"),("std::vector::const_iterator","()"),("std::vector<bool, type-parameter-0-0>::iterator","()"),("std::vector<bool, type-parameter-0-0>::const_iterator","()"),("std::set::iterator","()"),("std::multiset::iterator","()"),("_Tp *","()"),("std::forward_list::iterator","()"),("std::forward_list::const_iterator","()"),("std::__cxx11::match_results::const_iterator","()"),("std::_Hashtable::iterator","()"),("std::_Hashtable::const_iterator","()"),("std::_Hashtable::local_iterator","(std::_Hashtable::size_type)"),("std::_Hashtable::const_local_iterator","(std::_Hashtable::size_type)"),("std::unordered_map::iterator","()"),("std::unordered_map::const_iterator","()"),("std::unordered_map::local_iterator","(std::unordered_map::size_type)"),("std::unordered_map::const_local_iterator","(std::unordered_map::size_type)"),("std::unordered_multimap::iterator","()"),("std::unordered_multimap::const_iterator","()"),("std::unordered_multimap::local_iterator","(std::unordered_multimap::size_type)"),("std::unordered_multimap::const_local_iterator","(std::unordered_multimap::size_type)"),("std::unordered_set::iterator","()"),("std::unordered_set::const_iterator","()"),("std::unordered_set::local_iterator","(std::unordered_set::size_type)"),("std::unordered_set::const_local_iterator","(std::unordered_set::size_type)"),("std::unordered_multiset::iterator","()"),("std::unordered_multiset::const_iterator","()"),("std::unordered_multiset::local_iterator","(std::unordered_multiset::size_type)"),("std::unordered_multiset::const_local_iterator","(std::unordered_multiset::size_type)")],
"end":[("std::initializer_list::const_iterator","()"),("std::__cxx11::basic_string::iterator","()"),("std::__cxx11::basic_string::const_iterator","()"),("std::_Temporary_buffer::iterator","()"),("std::deque::iterator","()"),("std::deque::const_iterator","()"),("std::array::iterator","()"),("std::array::const_iterator","()"),("std::__cxx11::list::iterator","()"),("std::__cxx11::list::const_iterator","()"),("std::_Rb_tree::iterator","()"),("std::_Rb_tree::const_iterator","()"),("std::map::iterator","()"),("std::map::const_iterator","()"),("std::multimap::iterator","()"),("std::multimap::const_iterator","()"),("std::vector::iterator","()"),("std::vector::const_iterator","()"),("std::vector<bool, type-parameter-0-0>::iterator","()"),("std::vector<bool, type-parameter-0-0>::const_iterator","()"),("std::set::iterator","()"),("std::multiset::iterator","()"),("std::forward_list::iterator","()"),("std::forward_list::const_iterator","()"),("std::__cxx11::match_results::const_iterator","()"),("std::_Hashtable::iterator","()"),("std::_Hashtable::const_iterator","()"),("std::_Hashtable::local_iterator","(std::_Hashtable::size_type)"),("std::_Hashtable::const_local_iterator","(std::_Hashtable::size_type)"),("std::unordered_map::iterator","()"),("std::unordered_map::const_iterator","()"),("std::unordered_map::local_iterator","(std::unordered_map::size_type)"),("std::unordered_map::const_local_iterator","(std::unordered_map::size_type)"),("std::unordered_multimap::iterator","()"),("std::unordered_multimap::const_iterator","()"),("std::unordered_multimap::local_iterator","(std::unordered_multimap::size_type)"),("std::unordered_multimap::const_local_iterator","(std::unordered_multimap::size_type)"),("std::unordered_set::iterator","()"),("std::unordered_set::const_iterator","()"),("std::unordered_set::local_iterator","(std::unordered_set::size_type)"),("std::unordered_set::const_local_iterator","(std::unordered_set::size_type)"),("std::unordered_multiset::iterator","()"),("std::unordered_multiset::const_iterator","()"),("std::unordered_multiset::local_iterator","(std::unordered_multiset::size_type)"),("std::unordered_multiset::const_local_iterator","(std::unordered_multiset::size_type)")],
"select_on_container_copy_construction":[("_Alloc","(const _Alloc &)"),("std::allocator_traits<allocator<type-parameter-0-0>>::allocator_type","(const std::allocator_traits<allocator<type-parameter-0-0>>::allocator_type &)"),("std::allocator_traits<std::allocator<void>>::allocator_type","(const std::allocator_traits<std::allocator<void>>::allocator_type &)"),("scoped_allocator_adaptor<_OuterAlloc, _InnerAllocs...>","()")],
"_S_select_on_copy":["_Alloc","(const _Alloc &)"],
"_S_on_swap":["void","(_Alloc &, _Alloc &)"],
"_S_propagate_on_copy_assign":["bool","()"],
"_S_propagate_on_move_assign":["bool","()"],
"_S_propagate_on_swap":["bool","()"],
"_S_always_equal":["bool","()"],
"_S_nothrow_move":["bool","()"],
"_M_data":[("void","(char*)"),("char*","()")],
"_M_length":["void","(unsigned long)"],
"_M_local_data":[("char*","()"),("std::__cxx11::basic_string::const_pointer","()")],
"_M_capacity":["void","(unsigned long)"],
"_M_set_length":["void","(unsigned long)"],
"_M_is_local":["bool","()"],
"_M_create":[("char*","(unsigned long &, unsigned long)"),("std::basic_string<_CharT, _Traits, _Alloc>::pointer","(unsigned long &, unsigned long)")],
"_M_dispose":"void",
"_M_destroy":"void",
"_M_construct_aux_2":["void","(unsigned long, _CharT)"],
"_M_construct":"void",
"_M_get_allocator":[("std::__cxx11::basic_string::allocator_type &","()"),("const std::__cxx11::basic_string::allocator_type &","()")],
"_M_check":[("unsigned long","(unsigned long, char const *)"),("void","(std::size_t, char const *)")],
"_M_check_length":["void","(unsigned long, unsigned long, char const *)"],
"_M_limit":["unsigned long","(unsigned long, unsigned long)"],
"_M_disjunct":["bool","(const _CharT *)"],
"_S_copy":["void","(_CharT *, const _CharT *, unsigned long)"],
"_S_move":["void","(_CharT *, const _CharT *, unsigned long)"],
"_S_assign":["void","(_CharT *, unsigned long, _CharT)"],
"_S_copy_chars":"void",
"_S_compare":["int","(unsigned long, unsigned long)"],
"_M_assign":"void",
"_M_mutate":"void",
"_M_erase":[("void","(unsigned long, unsigned long)"),("std::deque::iterator","(std::deque::iterator)"),("std::deque::iterator","(std::deque::iterator, std::deque::iterator)"),("std::deque<_Tp, _Alloc>::iterator","(std::deque::iterator)"),("std::deque<_Tp, _Alloc>::iterator","(std::deque::iterator, std::deque::iterator)"),("void","(std::__cxx11::list::iterator)"),("void","(std::_Rb_tree::_Link_type)"),("std::vector::iterator","(std::vector::iterator)"),("std::vector::iterator","(std::vector::iterator, std::vector::iterator)"),("std::vector<bool, type-parameter-0-0>::iterator","(std::vector<bool, type-parameter-0-0>::iterator)"),("std::vector<bool, type-parameter-0-0>::iterator","(std::vector<bool, type-parameter-0-0>::iterator, std::vector<bool, type-parameter-0-0>::iterator)"),("std::vector<_Tp, _Alloc>::iterator","(std::vector::iterator)"),("std::vector<_Tp, _Alloc>::iterator","(std::vector::iterator, std::vector::iterator)"),("std::vector<bool, _Alloc>::iterator","(std::vector<bool, type-parameter-0-0>::iterator)"),("std::vector<bool, _Alloc>::iterator","(std::vector<bool, type-parameter-0-0>::iterator, std::vector<bool, type-parameter-0-0>::iterator)"),("std::_Hashtable::size_type","(std::true_type, const std::_Hashtable::key_type &)"),("std::_Hashtable::size_type","(std::false_type, const std::_Hashtable::key_type &)"),("std::_Hashtable::iterator","(std::_Hashtable::size_type, std::_Hashtable::__node_base_ptr, std::_Hashtable::__node_ptr)"),("std::_Hashtable::size_type","(std::true_type, const std::_Hashtable::key_type &)"),("std::_Hashtable::size_type","(std::false_type, const std::_Hashtable::key_type &)")],
"rbegin":[("std::__cxx11::basic_string::reverse_iterator","()"),("std::__cxx11::basic_string::const_reverse_iterator","()"),("std::deque::reverse_iterator","()"),("std::deque::const_reverse_iterator","()"),("std::array::reverse_iterator","()"),("std::array::const_reverse_iterator","()"),("std::__cxx11::list::reverse_iterator","()"),("std::__cxx11::list::const_reverse_iterator","()"),("std::_Rb_tree::reverse_iterator","()"),("std::_Rb_tree::const_reverse_iterator","()"),("std::map::reverse_iterator","()"),("std::map::const_reverse_iterator","()"),("std::multimap::reverse_iterator","()"),("std::multimap::const_reverse_iterator","()"),("std::vector::reverse_iterator","()"),("std::vector::const_reverse_iterator","()"),("std::vector<bool, type-parameter-0-0>::reverse_iterator","()"),("std::vector<bool, type-parameter-0-0>::const_reverse_iterator","()"),("std::set::reverse_iterator","()"),("std::multiset::reverse_iterator","()")],
"rend":[("std::__cxx11::basic_string::reverse_iterator","()"),("std::__cxx11::basic_string::const_reverse_iterator","()"),("std::deque::reverse_iterator","()"),("std::deque::const_reverse_iterator","()"),("std::array::reverse_iterator","()"),("std::array::const_reverse_iterator","()"),("std::__cxx11::list::reverse_iterator","()"),("std::__cxx11::list::const_reverse_iterator","()"),("std::_Rb_tree::reverse_iterator","()"),("std::_Rb_tree::const_reverse_iterator","()"),("std::map::reverse_iterator","()"),("std::map::const_reverse_iterator","()"),("std::multimap::reverse_iterator","()"),("std::multimap::const_reverse_iterator","()"),("std::vector::reverse_iterator","()"),("std::vector::const_reverse_iterator","()"),("std::vector<bool, type-parameter-0-0>::reverse_iterator","()"),("std::vector<bool, type-parameter-0-0>::const_reverse_iterator","()"),("std::set::reverse_iterator","()"),("std::multiset::reverse_iterator","()")],
"cbegin":[("std::__cxx11::basic_string::const_iterator","()"),("std::deque::const_iterator","()"),("std::array::const_iterator","()"),("std::__cxx11::list::const_iterator","()"),("std::map::const_iterator","()"),("std::multimap::const_iterator","()"),("std::vector::const_iterator","()"),("std::vector<bool, type-parameter-0-0>::const_iterator","()"),("std::set::iterator","()"),("std::multiset::iterator","()"),("std::forward_list::const_iterator","()"),("std::__cxx11::match_results::const_iterator","()"),("std::_Hashtable::const_iterator","()"),("std::_Hashtable::const_local_iterator","(std::_Hashtable::size_type)"),("std::unordered_map::const_iterator","()"),("std::unordered_map::const_local_iterator","(std::unordered_map::size_type)"),("std::unordered_multimap::const_iterator","()"),("std::unordered_multimap::const_local_iterator","(std::unordered_multimap::size_type)"),("std::unordered_set::const_iterator","()"),("std::unordered_set::const_local_iterator","(std::unordered_set::size_type)"),("std::unordered_multiset::const_iterator","()"),("std::unordered_multiset::const_local_iterator","(std::unordered_multiset::size_type)")],
"cend":[("std::__cxx11::basic_string::const_iterator","()"),("std::deque::const_iterator","()"),("std::array::const_iterator","()"),("std::__cxx11::list::const_iterator","()"),("std::map::const_iterator","()"),("std::multimap::const_iterator","()"),("std::vector::const_iterator","()"),("std::vector<bool, type-parameter-0-0>::const_iterator","()"),("std::set::iterator","()"),("std::multiset::iterator","()"),("std::forward_list::const_iterator","()"),("std::__cxx11::match_results::const_iterator","()"),("std::_Hashtable::const_iterator","()"),("std::_Hashtable::const_local_iterator","(std::_Hashtable::size_type)"),("std::unordered_map::const_iterator","()"),("std::unordered_map::const_local_iterator","(std::unordered_map::size_type)"),("std::unordered_multimap::const_iterator","()"),("std::unordered_multimap::const_local_iterator","(std::unordered_multimap::size_type)"),("std::unordered_set::const_iterator","()"),("std::unordered_set::const_local_iterator","(std::unordered_set::size_type)"),("std::unordered_multiset::const_iterator","()"),("std::unordered_multiset::const_local_iterator","(std::unordered_multiset::size_type)")],
"crbegin":[("std::__cxx11::basic_string::const_reverse_iterator","()"),("std::deque::const_reverse_iterator","()"),("std::array::const_reverse_iterator","()"),("std::__cxx11::list::const_reverse_iterator","()"),("std::map::const_reverse_iterator","()"),("std::multimap::const_reverse_iterator","()"),("std::vector::const_reverse_iterator","()"),("std::vector<bool, type-parameter-0-0>::const_reverse_iterator","()"),("std::set::reverse_iterator","()"),("std::multiset::reverse_iterator","()")],
"crend":[("std::__cxx11::basic_string::const_reverse_iterator","()"),("std::deque::const_reverse_iterator","()"),("std::array::const_reverse_iterator","()"),("std::__cxx11::list::const_reverse_iterator","()"),("std::map::const_reverse_iterator","()"),("std::multimap::const_reverse_iterator","()"),("std::vector::const_reverse_iterator","()"),("std::vector<bool, type-parameter-0-0>::const_reverse_iterator","()"),("std::set::reverse_iterator","()"),("std::multiset::reverse_iterator","()")],
"resize":"void",
"shrink_to_fit":"void",
"capacity":[("unsigned long","()"),("std::vector::size_type","()"),("std::vector<bool, type-parameter-0-0>::size_type","()")],
"reserve":"void",
"clear":"void",
"empty":"bool",
"at":[("std::__cxx11::basic_string::const_reference","(unsigned long)"),("std::__cxx11::basic_string::reference","(unsigned long)"),("std::deque::reference","(std::deque::size_type)"),("std::deque::const_reference","(std::deque::size_type)"),("std::array::reference","(std::array::size_type)"),("std::array::const_reference","(std::array::size_type)"),("std::map::mapped_type &","(const std::map::key_type &)"),("const std::map::mapped_type &","(const std::map::key_type &)"),("std::vector::reference","(std::vector::size_type)"),("std::vector::const_reference","(std::vector::size_type)"),("std::vector<bool, type-parameter-0-0>::reference","(std::vector<bool, type-parameter-0-0>::size_type)"),("std::vector<bool, type-parameter-0-0>::const_reference","(std::vector<bool, type-parameter-0-0>::size_type)"),("std::__detail::_Map_base<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, std::__detail::_Select1st, type-parameter-0-3, type-parameter-0-4, type-parameter-0-5, type-parameter-0-6, type-parameter-0-7, type-parameter-0-8, true>::mapped_type &","(const std::__detail::_Map_base<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, std::__detail::_Select1st, type-parameter-0-3, type-parameter-0-4, type-parameter-0-5, type-parameter-0-6, type-parameter-0-7, type-parameter-0-8, true>::key_type &)"),("const std::__detail::_Map_base<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, std::__detail::_Select1st, type-parameter-0-3, type-parameter-0-4, type-parameter-0-5, type-parameter-0-6, type-parameter-0-7, type-parameter-0-8, true>::mapped_type &","(const std::__detail::_Map_base<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, std::__detail::_Select1st, type-parameter-0-3, type-parameter-0-4, type-parameter-0-5, type-parameter-0-6, type-parameter-0-7, type-parameter-0-8, true>::key_type &)"),("std::__detail::_Map_base<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, std::__detail::_Select1st, type-parameter-0-3, type-parameter-0-4, type-parameter-0-5, type-parameter-0-6, type-parameter-0-7, type-parameter-0-8, true>::mapped_type &","(const std::__detail::_Map_base<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, std::__detail::_Select1st, type-parameter-0-3, type-parameter-0-4, type-parameter-0-5, type-parameter-0-6, type-parameter-0-7, type-parameter-0-8, true>::key_type &)"),("const std::__detail::_Map_base<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, std::__detail::_Select1st, type-parameter-0-3, type-parameter-0-4, type-parameter-0-5, type-parameter-0-6, type-parameter-0-7, type-parameter-0-8, true>::mapped_type &","(const std::__detail::_Map_base<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, std::__detail::_Select1st, type-parameter-0-3, type-parameter-0-4, type-parameter-0-5, type-parameter-0-6, type-parameter-0-7, type-parameter-0-8, true>::key_type &)"),("std::unordered_map::mapped_type &","(const std::unordered_map::key_type &)"),("const std::unordered_map::mapped_type &","(const std::unordered_map::key_type &)")],
"front":[("std::__cxx11::basic_string::reference","()"),("std::__cxx11::basic_string::const_reference","()"),("std::deque::reference","()"),("std::deque::const_reference","()"),("std::array::reference","()"),("std::array::const_reference","()"),("std::__cxx11::list::reference","()"),("std::__cxx11::list::const_reference","()"),("std::vector::reference","()"),("std::vector::const_reference","()"),("std::vector<bool, type-parameter-0-0>::reference","()"),("std::vector<bool, type-parameter-0-0>::const_reference","()"),("std::queue::reference","()"),("std::queue::const_reference","()"),("std::forward_list::reference","()"),("std::forward_list::const_reference","()")],
"back":[("std::__cxx11::basic_string::reference","()"),("std::__cxx11::basic_string::const_reference","()"),("std::deque::reference","()"),("std::deque::const_reference","()"),("std::array::reference","()"),("std::array::const_reference","()"),("std::__cxx11::list::reference","()"),("std::__cxx11::list::const_reference","()"),("std::vector::reference","()"),("std::vector::const_reference","()"),("std::vector<bool, type-parameter-0-0>::reference","()"),("std::vector<bool, type-parameter-0-0>::const_reference","()"),("std::queue::reference","()"),("std::queue::const_reference","()")],
"append":"std::basic_string<_CharT, _Traits, _Alloc> &",
"push_back":"void",
"insert":[("std::__cxx11::basic_string::iterator","(std::__cxx11::basic_string::const_iterator, unsigned long, _CharT)"),("std::__cxx11::basic_string::iterator","(std::__cxx11::basic_string::const_iterator, initializer_list<_CharT>)"),("std::basic_string<_CharT, _Traits, _Alloc> &","(unsigned long, conststd::basic_string<_CharT, _Traits, _Alloc> &)"),("std::basic_string<_CharT, _Traits, _Alloc> &","(unsigned long, conststd::basic_string<_CharT, _Traits, _Alloc> &, unsigned long, unsigned long)"),("std::basic_string<_CharT, _Traits, _Alloc> &","(unsigned long, const _CharT *, unsigned long)"),("std::basic_string<_CharT, _Traits, _Alloc> &","(unsigned long, const _CharT *)"),("std::basic_string<_CharT, _Traits, _Alloc> &","(unsigned long, unsigned long, _CharT)"),("std::__cxx11::basic_string::iterator","(std::__cxx11::basic_string::__const_iterator, _CharT)"),("std::deque::iterator","(std::deque::const_iterator, const std::deque::value_type &)"),("std::deque::iterator","(std::deque::const_iterator, std::deque::value_type &&)"),("std::deque::iterator","(std::deque::const_iterator, initializer_list<std::deque::value_type>)"),("std::deque::iterator","(std::deque::const_iterator, std::deque::size_type, const std::deque::value_type &)"),("std::deque<_Tp, _Alloc>::iterator","(std::deque::const_iterator, const std::deque::value_type &)"),("std::__cxx11::list::iterator","(std::__cxx11::list::const_iterator, const std::__cxx11::list::value_type &)"),("std::__cxx11::list::iterator","(std::__cxx11::list::const_iterator, std::__cxx11::list::value_type &&)"),("std::__cxx11::list::iterator","(std::__cxx11::list::const_iterator, initializer_list<std::__cxx11::list::value_type>)"),("std::__cxx11::list::iterator","(std::__cxx11::list::const_iterator, std::__cxx11::list::size_type, const std::__cxx11::list::value_type &)"),("std::list<_Tp, _Alloc>::iterator","(std::__cxx11::list::const_iterator, const std::__cxx11::list::value_type &)"),("std::list<_Tp, _Alloc>::iterator","(std::__cxx11::list::const_iterator, std::__cxx11::list::size_type, const std::__cxx11::list::value_type &)"),("std::pair<iterator, bool>","(const std::map::value_type &)"),("std::pair<iterator, bool>","(std::map::value_type &&)"),("void","(std::initializer_list<value_type>)"),("std::map::iterator","(std::map::const_iterator, const std::map::value_type &)"),("std::map::iterator","(std::map::const_iterator, std::map::value_type &&)"),("std::multimap::iterator","(const std::multimap::value_type &)"),("std::multimap::iterator","(std::multimap::value_type &&)"),("std::multimap::iterator","(std::multimap::const_iterator, const std::multimap::value_type &)"),("std::multimap::iterator","(std::multimap::const_iterator, std::multimap::value_type &&)"),("void","(initializer_list<std::multimap::value_type>)"),("std::vector::iterator","(std::vector::const_iterator, const std::vector::value_type &)"),("std::vector::iterator","(std::vector::const_iterator, std::vector::value_type &&)"),("std::vector::iterator","(std::vector::const_iterator, initializer_list<std::vector::value_type>)"),("std::vector::iterator","(std::vector::const_iterator, std::vector::size_type, const std::vector::value_type &)"),("std::vector<bool, type-parameter-0-0>::iterator","(std::vector<bool, type-parameter-0-0>::const_iterator, const bool &)"),("std::vector<bool, type-parameter-0-0>::iterator","(std::vector<bool, type-parameter-0-0>::const_iterator, std::vector<bool, type-parameter-0-0>::size_type, const bool &)"),("std::vector<bool, type-parameter-0-0>::iterator","(std::vector<bool, type-parameter-0-0>::const_iterator, initializer_list<bool>)"),("std::vector<_Tp, _Alloc>::iterator","(std::vector::const_iterator, const std::vector::value_type &)"),("std::pair<iterator, bool>","(const std::set::value_type &)"),("std::pair<iterator, bool>","(std::set::value_type &&)"),("std::set::iterator","(std::set::const_iterator, const std::set::value_type &)"),("std::set::iterator","(std::set::const_iterator, std::set::value_type &&)"),("void","(initializer_list<std::set::value_type>)"),("std::multiset::iterator","(const std::multiset::value_type &)"),("std::multiset::iterator","(std::multiset::value_type &&)"),("std::multiset::iterator","(std::multiset::const_iterator, const std::multiset::value_type &)"),("std::multiset::iterator","(std::multiset::const_iterator, std::multiset::value_type &&)"),("void","(initializer_list<std::multiset::value_type>)"),("std::__detail::_Insert_base::__ireturn_type","(const std::__detail::_Insert_base::value_type &)"),("std::__detail::_Insert_base::iterator","(std::__detail::_Insert_base::const_iterator, const std::__detail::_Insert_base::value_type &)"),("void","(initializer_list<std::__detail::_Insert_base::value_type>)"),("std::__detail::_Insert<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4, type-parameter-0-5, type-parameter-0-6, type-parameter-0-7, type-parameter-0-8, type-parameter-0-9, true>::__ireturn_type","(std::__detail::_Insert<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4, type-parameter-0-5, type-parameter-0-6, type-parameter-0-7, type-parameter-0-8, type-parameter-0-9, true>::value_type &&)"),("std::__detail::_Insert<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4, type-parameter-0-5, type-parameter-0-6, type-parameter-0-7, type-parameter-0-8, type-parameter-0-9, true>::iterator","(std::__detail::_Insert<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4, type-parameter-0-5, type-parameter-0-6, type-parameter-0-7, type-parameter-0-8, type-parameter-0-9, true>::const_iterator, std::__detail::_Insert<type-parameter-0-0, type-parameter-0-1, type-parameter-0-2, type-parameter-0-3, type-parameter-0-4, type-parameter-0-5, type-parameter-0-6, type-parameter-0-7, type-parameter-0-8, type-parameter-0-9, true>::value_type &&)"),("std::pair<iterator, bool>","(const std::unordered_map::value_type &)"),("std::pair<iterator, bool>","(std::unordered_map::value_type &&)"),("std::unordered_map::iterator","(std::unordered_map::const_iterator, const std::unordered_map::value_type &)"),("std::unordered_map::iterator","(std::unordered_map::const_iterator, std::unordered_map::value_type &&)"),("void","(initializer_list<std::unordered_map::value_type>)"),("std::unordered_multimap::iterator","(const std::unordered_multimap::value_type &)"),("std::unordered_multimap::iterator","(std::unordered_multimap::value_type &&)"),("std::unordered_multimap::iterator","(std::unordered_multimap::const_iterator, const std::unordered_multimap::value_type &)"),("std::unordered_multimap::iterator","(std::unordered_multimap::const_iterator, std::unordered_multimap::value_type &&)"),("void","(initializer_list<std::unordered_multimap::value_type>)"),("std::pair<iterator, bool>","(const std::unordered_set::value_type &)"),("std::pair<iterator, bool>","(std::unordered_set::value_type &&)"),("std::unordered_set::iterator","(std::unordered_set::const_iterator, const std::unordered_set::value_type &)"),("std::unordered_set::iterator","(std::unordered_set::const_iterator, std::unordered_set::value_type &&)"),("void","(initializer_list<std::unordered_set::value_type>)"),("std::unordered_multiset::iterator","(const std::unordered_multiset::value_type &)"),("std::unordered_multiset::iterator","(std::unordered_multiset::value_type &&)"),("std::unordered_multiset::iterator","(std::unordered_multiset::const_iterator, const std::unordered_multiset::value_type &)"),("std::unordered_multiset::iterator","(std::unordered_multiset::const_iterator, std::unordered_multiset::value_type &&)"),("void","(initializer_list<std::unordered_multiset::value_type>)")],
"erase":[("std::basic_string<_CharT, _Traits, _Alloc> &","(unsigned long, unsigned long)"),("std::__cxx11::basic_string::iterator","(std::__cxx11::basic_string::__const_iterator)"),("std::__cxx11::basic_string::iterator","(std::__cxx11::basic_string::__const_iterator, std::__cxx11::basic_string::__const_iterator)"),("std::deque::iterator","(std::deque::const_iterator)"),("std::deque::iterator","(std::deque::const_iterator, std::deque::const_iterator)"),("std::__cxx11::list::iterator","(std::__cxx11::list::const_iterator)"),("std::__cxx11::list::iterator","(std::__cxx11::list::const_iterator, std::__cxx11::list::const_iterator)"),("std::list<_Tp, _Alloc>::iterator","(std::__cxx11::list::const_iterator)"),("std::_Rb_tree::iterator","(std::_Rb_tree::const_iterator)"),("std::_Rb_tree::iterator","(std::_Rb_tree::iterator)"),("std::_Rb_tree::size_type","(const std::_Rb_tree::key_type &)"),("std::_Rb_tree::iterator","(std::_Rb_tree::const_iterator, std::_Rb_tree::const_iterator)"),("std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type","(const _Key &)"),("std::map::iterator","(std::map::const_iterator)"),("std::map::iterator","(std::map::iterator)"),("std::map::size_type","(const std::map::key_type &)"),("std::map::iterator","(std::map::const_iterator, std::map::const_iterator)"),("std::multimap::iterator","(std::multimap::const_iterator)"),("std::multimap::iterator","(std::multimap::iterator)"),("std::multimap::size_type","(const std::multimap::key_type &)"),("std::multimap::iterator","(std::multimap::const_iterator, std::multimap::const_iterator)"),("std::vector::iterator","(std::vector::const_iterator)"),("std::vector::iterator","(std::vector::const_iterator, std::vector::const_iterator)"),("std::vector<bool, type-parameter-0-0>::iterator","(std::vector<bool, type-parameter-0-0>::const_iterator)"),("std::vector<bool, type-parameter-0-0>::iterator","(std::vector<bool, type-parameter-0-0>::const_iterator, std::vector<bool, type-parameter-0-0>::const_iterator)"),("std::set::iterator","(std::set::const_iterator)"),("std::set::size_type","(const std::set::key_type &)"),("std::set::iterator","(std::set::const_iterator, std::set::const_iterator)"),("std::multiset::iterator","(std::multiset::const_iterator)"),("std::multiset::size_type","(const std::multiset::key_type &)"),("std::multiset::iterator","(std::multiset::const_iterator, std::multiset::const_iterator)"),("std::_Hashtable::iterator","(std::_Hashtable::const_iterator)"),("std::_Hashtable::iterator","(std::_Hashtable::iterator)"),("std::_Hashtable::size_type","(const std::_Hashtable::key_type &)"),("std::_Hashtable::iterator","(std::_Hashtable::const_iterator, std::_Hashtable::const_iterator)"),("std::_Hashtable::iterator","(std::_Hashtable::const_iterator)"),("std::_Hashtable::iterator","(std::_Hashtable::const_iterator, std::_Hashtable::const_iterator)"),("std::unordered_map::iterator","(std::unordered_map::const_iterator)"),("std::unordered_map::iterator","(std::unordered_map::iterator)"),("std::unordered_map::size_type","(const std::unordered_map::key_type &)"),("std::unordered_map::iterator","(std::unordered_map::const_iterator, std::unordered_map::const_iterator)"),("std::unordered_multimap::iterator","(std::unordered_multimap::const_iterator)"),("std::unordered_multimap::iterator","(std::unordered_multimap::iterator)"),("std::unordered_multimap::size_type","(const std::unordered_multimap::key_type &)"),("std::unordered_multimap::iterator","(std::unordered_multimap::const_iterator, std::unordered_multimap::const_iterator)"),("std::unordered_set::iterator","(std::unordered_set::const_iterator)"),("std::unordered_set::iterator","(std::unordered_set::iterator)"),("std::unordered_set::size_type","(const std::unordered_set::key_type &)"),("std::unordered_set::iterator","(std::unordered_set::const_iterator, std::unordered_set::const_iterator)"),("std::unordered_multiset::iterator","(std::unordered_multiset::const_iterator)"),("std::unordered_multiset::iterator","(std::unordered_multiset::iterator)"),("std::unordered_multiset::size_type","(const std::unordered_multiset::key_type &)"),("std::unordered_multiset::iterator","(std::unordered_multiset::const_iterator, std::unordered_multiset::const_iterator)")],
"pop_back":"void",
"replace":"std::basic_string<_CharT, _Traits, _Alloc> &",
"_M_replace_aux":"std::basic_string<_CharT, _Traits, _Alloc> &",
"_M_replace":"std::basic_string<_CharT, _Traits, _Alloc> &",
"_M_append":[("std::basic_string<_CharT, _Traits, _Alloc> &","(const _CharT *, unsigned long)"),("void","(std::__detail::_StateIdT)"),("void","(const _StateSeq<_TraitsT> &)")],
"c_str":["const _CharT *","()"],
"data":[("const _CharT *","()"),("std::array::pointer","()"),("std::array::const_pointer","()"),("_Tp *","()"),("const _Tp *","()"),("void","()")],
"get_allocator":[("std::__cxx11::basic_string::allocator_type","()"),("std::_Deque_base::allocator_type","()"),("std::deque::allocator_type","()"),("std::__cxx11::list::allocator_type","()"),("std::_Rb_tree::allocator_type","()"),("std::map::allocator_type","()"),("std::multimap::allocator_type","()"),("std::_Vector_base::allocator_type","()"),("std::_Bvector_base::allocator_type","()"),("std::vector<bool, type-parameter-0-0>::allocator_type","()"),("std::set::allocator_type","()"),("std::multiset::allocator_type","()"),("std::forward_list::allocator_type","()"),("std::__cxx11::match_results::allocator_type","()"),("std::_Hashtable::allocator_type","()"),("std::unordered_map::allocator_type","()"),("std::unordered_multimap::allocator_type","()"),("std::unordered_set::allocator_type","()"),("std::unordered_multiset::allocator_type","()")],
"rfind":[("unsigned long","(conststd::basic_string<_CharT, _Traits, _Alloc> &, unsigned long)"),("unsigned long","(const _CharT *, unsigned long, unsigned long)"),("unsigned long","(const _CharT *, unsigned long)"),("unsigned long","(_CharT, unsigned long)"),("std::basic_string<_CharT, _Traits, _Alloc>::size_type","(const _CharT *, unsigned long, unsigned long)"),("std::basic_string<_CharT, _Traits, _Alloc>::size_type","(_CharT, unsigned long)")],
"find_first_of":[("unsigned long","(conststd::basic_string<_CharT, _Traits, _Alloc> &, unsigned long)"),("unsigned long","(const _CharT *, unsigned long, unsigned long)"),("unsigned long","(const _CharT *, unsigned long)"),("unsigned long","(_CharT, unsigned long)"),("std::basic_string<_CharT, _Traits, _Alloc>::size_type","(const _CharT *, unsigned long, unsigned long)")],
"find_last_of":[("unsigned long","(conststd::basic_string<_CharT, _Traits, _Alloc> &, unsigned long)"),("unsigned long","(const _CharT *, unsigned long, unsigned long)"),("unsigned long","(const _CharT *, unsigned long)"),("unsigned long","(_CharT, unsigned long)"),("std::basic_string<_CharT, _Traits, _Alloc>::size_type","(const _CharT *, unsigned long, unsigned long)")],
"find_first_not_of":[("unsigned long","(conststd::basic_string<_CharT, _Traits, _Alloc> &, unsigned long)"),("unsigned long","(const _CharT *, unsigned long, unsigned long)"),("unsigned long","(const _CharT *, unsigned long)"),("unsigned long","(_CharT, unsigned long)"),("std::basic_string<_CharT, _Traits, _Alloc>::size_type","(const _CharT *, unsigned long, unsigned long)"),("std::basic_string<_CharT, _Traits, _Alloc>::size_type","(_CharT, unsigned long)")],
"find_last_not_of":[("unsigned long","(conststd::basic_string<_CharT, _Traits, _Alloc> &, unsigned long)"),("unsigned long","(const _CharT *, unsigned long, unsigned long)"),("unsigned long","(const _CharT *, unsigned long)"),("unsigned long","(_CharT, unsigned long)"),("std::basic_string<_CharT, _Traits, _Alloc>::size_type","(const _CharT *, unsigned long, unsigned long)"),("std::basic_string<_CharT, _Traits, _Alloc>::size_type","(_CharT, unsigned long)")],
"substr":["std::basic_string<_CharT, _Traits, _Alloc>","(unsigned long, unsigned long)"],
"operator>>":[("basic_istream<char> &","(basic_istream<char> &,std::basic_string<char> &)"),("std::istream &","(std::istream &(*)(std::istream &))"),("std::istream &","(std::istream::__ios_type &(*)(std::istream::__ios_type &))"),("std::istream &","(std::ios_base &(*)(std::ios_base &))"),("std::istream &","(bool &)"),("std::istream &","(short &)"),("std::istream &","(unsigned short &)"),("std::istream &","(int &)"),("std::istream &","(unsigned int &)"),("std::istream &","(long &)"),("std::istream &","(unsigned long &)"),("std::istream &","(long long &)"),("std::istream &","(unsigned long long &)"),("std::istream &","(float &)"),("std::istream &","(double &)"),("std::istream &","(long double &)"),("std::istream &","(void *&)"),("std::istream &","(std::istream::__streambuf_type *)"),("basic_istream<_CharT, _Traits> &","(short &)"),("basic_istream<_CharT, _Traits> &","(int &)"),("basic_istream<_CharT, _Traits> &","(std::istream::__streambuf_type *)"),("bitset<_Nb>","(std::size_t)")],
"_S_chk":"bool",
"stoi":"int",
"stol":"long",
"stoul":"unsigned long",
"stoll":"long long",
"stoull":"unsigned long long",
"stof":"float",
"stod":"double",
"stold":"long double",
"to_string":[("std::string","(int)"),("std::string","(unsigned int)"),("std::string","(long)"),("std::string","(unsigned long)"),("std::string","(long long)"),("std::string","(unsigned long long)"),("std::string","(float)"),("std::string","(double)"),("std::string","(long double)"),("std::basic_string<char, std::char_traits<char>, std::allocator<char>>","()"),("std::basic_string<char, std::char_traits<char>, std::allocator<char>>","(char, char)")],
"to_wstring":"std::wstring",
"hash":[("std::size_t","(void const*, std::size_t, std::size_t)"),("long","(const _CharT *, const _CharT *)")],
"operator""s":[("std::basic_string<char>","(char const *, std::size_t)"),("std::basic_string<wchar_t>","(const wchar_t *, std::size_t)"),("std::basic_string<char16_t>","(char const16_t *, std::size_t)"),("std::basic_string<char32_t>","(char const32_t *, std::size_t)"),("chrono::duration<long double>","(long double)")],
"global":["std::locale","(std::locale const&)"],
"classic":["std::locale const&","()"],
"_S_initialize":["void","()"],
"_S_initialize_once":"void",
"_S_normalize_category":["std::locale::category","(std::locale::category)"],
"_M_coalesce":["void","(std::locale const&, std::locale const&, std::locale::category)"],
"_S_create_c_locale":["void","(std::__c_locale &, char const *, std::__c_locale)"],
"_S_clone_c_locale":["std::__c_locale","(std::__c_locale &)"],
"_S_destroy_c_locale":["void","(std::__c_locale &)"],
"_S_lc_ctype_c_locale":["std::__c_locale","(std::__c_locale, char const *)"],
"_S_get_c_locale":["std::__c_locale","()"],
"_S_get_c_name":["char const *","()"],
"_M_add_reference":"void",
"_M_remove_reference":[("void","()"),("int","()")],
"_M_sso_shim":["const std::locale::facet *","(const std::locale::id *)"],
"_M_cow_shim":["const std::locale::facet *","(const std::locale::id *)"],
"_M_id":["std::size_t","()"],
"_M_check_same_name":["bool","()"],
"_M_replace_categories":["void","(const std::locale::_Impl *, std::locale::category)"],
"_M_replace_category":["void","(const std::locale::_Impl *, const locale::id *const *)"],
"_M_replace_facet":["void","(const std::locale::_Impl *, const locale::id *)"],
"_M_install_facet":["void","(const locale::id *, const std::locale::facet *)"],
"_M_install_cache":["void","(const std::locale::facet *, std::size_t)"],
"_M_init_extra":"void",
"transform":["std::collate<char>::string_type","(const _CharT *, const _CharT *)"],
"_M_compare":"int",
"_M_transform":[("std::size_t","(_CharT *, const _CharT *, std::size_t)"),("std::size_t","(char *, char const *, std::size_t)"),("std::size_t","(wchar_t *, const wchar_t *, std::size_t)"),("std::size_t","(_CharT *, const _CharT *, std::size_t)"),("std::__detail::_RegexTranslatorBase::_StrTransT","(std::__detail::_RegexTranslatorBase::_CharT)"),("std::__detail::_RegexTranslator<type-parameter-0-0, __icase, false>::_StrTransT","(std::__detail::_RegexTranslator<type-parameter-0-0, __icase, false>::_CharT)"),("std::__detail::_RegexTranslator<type-parameter-0-0, false, false>::_StrTransT","(std::__detail::_RegexTranslator<type-parameter-0-0, false, false>::_CharT)")],
"do_compare":"int",
"do_transform":[("std::collate<char>::string_type","(const _CharT *, const _CharT *)"),("std::collate<_CharT>::string_type","(const _CharT *, const _CharT *)")],
"do_hash":"long",
"_M_message":["std::__cow_string","(int)"],
"message":"std::string",
"default_error_condition":"std::error_condition",
"equivalent":"bool",
"operator<":"bool",
"generic_category":["const std::_V2::error_category &","()"],
"system_category":["const std::_V2::error_category &","()"],
"make_error_code":"std::error_code",
"value":"int",
"category":"const std::_V2::error_category &",
"make_error_condition":"std::error_condition",
"code":[("const std::error_code &","()"),("regex_constants::error_type","()")],
"operator&":[("std::_Ios_Fmtflags","(std::_Ios_Fmtflags, std::_Ios_Fmtflags)"),("std::_Ios_Openmode","(std::_Ios_Openmode, std::_Ios_Openmode)"),("std::_Ios_Iostate","(std::_Ios_Iostate, std::_Ios_Iostate)"),("std::memory_order","(std::memory_order, std::__memory_order_modifier)"),("std::launch","(std::launch, std::launch)"),("std::regex_constants::syntax_option_type","(std::regex_constants::syntax_option_type, std::regex_constants::syntax_option_type)"),("std::regex_constants::match_flag_type","(std::regex_constants::match_flag_type, std::regex_constants::match_flag_type)"),("std::__cxx11::regex_traits::_RegexMask","(std::__cxx11::regex_traits::_RegexMask)")],
"operator|":[("std::_Ios_Fmtflags","(std::_Ios_Fmtflags, std::_Ios_Fmtflags)"),("std::_Ios_Openmode","(std::_Ios_Openmode, std::_Ios_Openmode)"),("std::_Ios_Iostate","(std::_Ios_Iostate, std::_Ios_Iostate)"),("std::memory_order","(std::memory_order, std::__memory_order_modifier)"),("std::launch","(std::launch, std::launch)"),("std::regex_constants::syntax_option_type","(std::regex_constants::syntax_option_type, std::regex_constants::syntax_option_type)"),("std::regex_constants::match_flag_type","(std::regex_constants::match_flag_type, std::regex_constants::match_flag_type)"),("std::__cxx11::regex_traits::_RegexMask","(std::__cxx11::regex_traits::_RegexMask)")],
"operator^":[("std::_Ios_Fmtflags","(std::_Ios_Fmtflags, std::_Ios_Fmtflags)"),("std::_Ios_Openmode","(std::_Ios_Openmode, std::_Ios_Openmode)"),("std::_Ios_Iostate","(std::_Ios_Iostate, std::_Ios_Iostate)"),("std::launch","(std::launch, std::launch)"),("std::regex_constants::syntax_option_type","(std::regex_constants::syntax_option_type, std::regex_constants::syntax_option_type)"),("std::regex_constants::match_flag_type","(std::regex_constants::match_flag_type, std::regex_constants::match_flag_type)"),("std::__cxx11::regex_traits::_RegexMask","(std::__cxx11::regex_traits::_RegexMask)")],
"operator~":[("std::_Ios_Fmtflags","(std::_Ios_Fmtflags)"),("std::_Ios_Openmode","(std::_Ios_Openmode)"),("std::_Ios_Iostate","(std::_Ios_Iostate)"),("bool","()"),("bitset<_Nb>","()"),("std::_UnaryOp<__bitwise_not>::_Rt","()"),("_Expr<_UnClos<std::__bitwise_not, std::_Expr, _Clos>, std::_Expr::value_type>","()"),("_Expr<_UnClos<struct std::__bitwise_not, std::_Expr, _Dom>, _Tp>","()"),("std::valarray<_Tp>::_UnaryOp<__bitwise_not>::_Rt","()"),("std::launch","(std::launch)"),("std::regex_constants::syntax_option_type","(std::regex_constants::syntax_option_type)"),("std::regex_constants::match_flag_type","(std::regex_constants::match_flag_type)"),("std::__cxx11::regex_traits::_RegexMask","()")],
"operator|=":[("const std::_Ios_Fmtflags &","(std::_Ios_Fmtflags &, std::_Ios_Fmtflags)"),("const std::_Ios_Openmode &","(std::_Ios_Openmode &, std::_Ios_Openmode)"),("const std::_Ios_Iostate &","(std::_Ios_Iostate &, std::_Ios_Iostate)"),("bitset<_Nb> &","(const bitset<_Nb> &)"),("std::__atomic_base::__int_type","(std::__atomic_base::__int_type)"),("void","(const valarray<_Tp> &)"),("valarray<_Tp> &","(const _Tp &)"),("valarray<_Tp> &","(const valarray<_Tp> &)"),("void","(const valarray<_Tp> &)"),("valarray<_Tp> &","(const _Tp &)"),("valarray<_Tp> &","(const valarray<_Tp> &)"),("std::launch &","(std::launch &, std::launch)"),("std::regex_constants::syntax_option_type &","(std::regex_constants::syntax_option_type &, std::regex_constants::syntax_option_type)"),("std::regex_constants::match_flag_type &","(std::regex_constants::match_flag_type &, std::regex_constants::match_flag_type)"),("std::__cxx11::regex_traits::_RegexMask &","(std::__cxx11::regex_traits::_RegexMask)")],
"operator&=":[("const std::_Ios_Fmtflags &","(std::_Ios_Fmtflags &, std::_Ios_Fmtflags)"),("const std::_Ios_Openmode &","(std::_Ios_Openmode &, std::_Ios_Openmode)"),("const std::_Ios_Iostate &","(std::_Ios_Iostate &, std::_Ios_Iostate)"),("bitset<_Nb> &","(const bitset<_Nb> &)"),("std::__atomic_base::__int_type","(std::__atomic_base::__int_type)"),("void","(const valarray<_Tp> &)"),("valarray<_Tp> &","(const _Tp &)"),("valarray<_Tp> &","(const valarray<_Tp> &)"),("void","(const valarray<_Tp> &)"),("valarray<_Tp> &","(const _Tp &)"),("valarray<_Tp> &","(const valarray<_Tp> &)"),("std::launch &","(std::launch &, std::launch)"),("std::regex_constants::syntax_option_type &","(std::regex_constants::syntax_option_type &, std::regex_constants::syntax_option_type)"),("std::regex_constants::match_flag_type &","(std::regex_constants::match_flag_type &, std::regex_constants::match_flag_type)"),("std::__cxx11::regex_traits::_RegexMask &","(std::__cxx11::regex_traits::_RegexMask)")],
"operator^=":[("const std::_Ios_Fmtflags &","(std::_Ios_Fmtflags &, std::_Ios_Fmtflags)"),("const std::_Ios_Openmode &","(std::_Ios_Openmode &, std::_Ios_Openmode)"),("const std::_Ios_Iostate &","(std::_Ios_Iostate &, std::_Ios_Iostate)"),("bitset<_Nb> &","(const bitset<_Nb> &)"),("std::__atomic_base::__int_type","(std::__atomic_base::__int_type)"),("void","(const valarray<_Tp> &)"),("valarray<_Tp> &","(const _Tp &)"),("valarray<_Tp> &","(const valarray<_Tp> &)"),("void","(const valarray<_Tp> &)"),("valarray<_Tp> &","(const _Tp &)"),("valarray<_Tp> &","(const valarray<_Tp> &)"),("std::launch &","(std::launch &, std::launch)"),("std::regex_constants::syntax_option_type &","(std::regex_constants::syntax_option_type &, std::regex_constants::syntax_option_type)"),("std::regex_constants::match_flag_type &","(std::regex_constants::match_flag_type &, std::regex_constants::match_flag_type)"),("std::__cxx11::regex_traits::_RegexMask &","(std::__cxx11::regex_traits::_RegexMask)")],
"iostream_category":["const std::_V2::error_category &","()"],
"register_callback":["void","(std::ios_base::event_callback, int)"],
"_M_call_callbacks":["void","(std::ios_base::event)"],
"_M_dispose_callbacks":["void","()"],
"_M_grow_words":["std::ios_base::_Words &","(int, bool)"],
"_M_init":"void",
"flags":[("std::ios_base::fmtflags","()"),("std::ios_base::fmtflags","(std::ios_base::fmtflags)"),("std::__cxx11::basic_regex::flag_type","()")],
"setf":"std::ios_base::fmtflags",
"unsetf":["void","(std::ios_base::fmtflags)"],
"precision":"long",
"width":"long",
"sync_with_stdio":["bool","(bool)"],
"imbue":[("std::locale","(std::locale const&)"),("void","(std::locale const&)"),("std::locale","(std::locale const&)"),("void","(std::locale const&)"),("std::__cxx11::regex_traits::locale_type","(std::__cxx11::regex_traits::locale_type)"),("std::__cxx11::basic_regex::locale_type","(std::__cxx11::basic_regex::locale_type)")],
"getloc":[("std::locale","()"),("std::__cxx11::regex_traits::locale_type","()"),("std::__cxx11::basic_regex::locale_type","()")],
"_M_getloc":["std::locale const&","()"],
"xalloc":["int","()"],
"iword":["long &","(int)"],
"pword":["void *&","(int)"],
"_M_move":["void","(std::ios_base &)"],
"_M_swap":"void",
"boolalpha":["std::ios_base &","(std::ios_base &)"],
"noboolalpha":["std::ios_base &","(std::ios_base &)"],
"showbase":["std::ios_base &","(std::ios_base &)"],
"noshowbase":["std::ios_base &","(std::ios_base &)"],
"showpoint":["std::ios_base &","(std::ios_base &)"],
"noshowpoint":["std::ios_base &","(std::ios_base &)"],
"showpos":["std::ios_base &","(std::ios_base &)"],
"noshowpos":["std::ios_base &","(std::ios_base &)"],
"skipws":["std::ios_base &","(std::ios_base &)"],
"noskipws":["std::ios_base &","(std::ios_base &)"],
"uppercase":["std::ios_base &","(std::ios_base &)"],
"nouppercase":["std::ios_base &","(std::ios_base &)"],
"unitbuf":["std::ios_base &","(std::ios_base &)"],
"nounitbuf":["std::ios_base &","(std::ios_base &)"],
"internal":["std::ios_base &","(std::ios_base &)"],
"left":["std::ios_base &","(std::ios_base &)"],
"right":["std::ios_base &","(std::ios_base &)"],
"dec":["std::ios_base &","(std::ios_base &)"],
"hex":["std::ios_base &","(std::ios_base &)"],
"oct":["std::ios_base &","(std::ios_base &)"],
"fixed":["std::ios_base &","(std::ios_base &)"],
"scientific":["std::ios_base &","(std::ios_base &)"],
"hexfloat":["std::ios_base &","(std::ios_base &)"],
"defaultfloat":["std::ios_base &","(std::ios_base &)"],
"__copy_streambufs_eof":"long",
"__istream_extract":"void",
"pubimbue":["std::locale","(std::locale const&)"],
"pubsetbuf":["std::basic_streambuf<_CharT, _Traits> *","(std::basic_streambuf::char_type *, long)"],
"pubseekoff":["std::basic_streambuf::pos_type","(std::basic_streambuf::off_type, std::_Ios_Seekdir, std::_Ios_Openmode)"],
"pubseekpos":["std::basic_streambuf::pos_type","(std::basic_streambuf::pos_type, std::_Ios_Openmode)"],
"pubsync":["int","()"],
"in_avail":["long","()"],
"snextc":["int","()"],
"sbumpc":["int","()"],
"sgetc":["int","()"],
"sgetn":["long","(std::basic_streambuf::char_type *, long)"],
"sputbackc":["int","(std::basic_streambuf::char_type)"],
"sungetc":["int","()"],
"sputc":["int","(std::basic_streambuf::char_type)"],
"sputn":["long","(const std::basic_streambuf::char_type *, long)"],
"eback":["std::basic_streambuf::char_type *","()"],
"gptr":["std::basic_streambuf::char_type *","()"],
"egptr":["std::basic_streambuf::char_type *","()"],
"gbump":["void","(int)"],
"setg":["void","(std::basic_streambuf::char_type *, std::basic_streambuf::char_type *, std::basic_streambuf::char_type *)"],
"pbase":["std::basic_streambuf::char_type *","()"],
"pptr":["std::basic_streambuf::char_type *","()"],
"epptr":["std::basic_streambuf::char_type *","()"],
"pbump":["void","(int)"],
"setp":["void","(std::basic_streambuf::char_type *, std::basic_streambuf::char_type *)"],
"seekoff":[("std::basic_streambuf::pos_type","(std::basic_streambuf::off_type, std::_Ios_Seekdir, std::_Ios_Openmode)"),("std::fpos<__mbstate_t>","(long, std::_Ios_Seekdir, std::_Ios_Openmode)"),("std::basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type","(long, std::_Ios_Seekdir, std::_Ios_Openmode)"),("std::streamoff","(std::streamoff, std::_Ios_Seekdir)"),("std::basic_filebuf::pos_type","(std::basic_filebuf::off_type, std::_Ios_Seekdir, std::_Ios_Openmode)"),("std::basic_filebuf<_CharT, _Traits>::pos_type","(std::basic_filebuf::off_type, std::_Ios_Seekdir, std::_Ios_Openmode)")],
"seekpos":[("std::basic_streambuf::pos_type","(std::basic_streambuf::pos_type, std::_Ios_Openmode)"),("std::fpos<__mbstate_t>","(std::fpos<__mbstate_t>, std::_Ios_Openmode)"),("std::basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type","(std::fpos<__mbstate_t>, std::_Ios_Openmode)"),("std::basic_filebuf::pos_type","(std::basic_filebuf::pos_type, std::_Ios_Openmode)"),("std::basic_filebuf<_CharT, _Traits>::pos_type","(std::basic_filebuf::pos_type, std::_Ios_Openmode)")],
"showmanyc":"long",
"xsgetn":"long",
"underflow":[("int","()"),("int","()"),("std::basic_stringbuf<_CharT, _Traits, _Alloc>::int_type","()"),("std::basic_filebuf::int_type","()"),("std::basic_filebuf<_CharT, _Traits>::int_type","()"),("std::_Wide_streambuf::int_type","()")],
"uflow":["int","()"],
"pbackfail":[("int","(int)"),("int","(int)"),("std::basic_stringbuf<_CharT, _Traits, _Alloc>::int_type","(int)"),("std::basic_filebuf::int_type","(std::basic_filebuf::int_type)"),("std::basic_filebuf<_CharT, _Traits>::int_type","(std::basic_filebuf::int_type)")],
"xsputn":"long",
"overflow":[("int","(int)"),("int","(int)"),("std::basic_stringbuf<_CharT, _Traits, _Alloc>::int_type","(int)"),("std::basic_filebuf::int_type","(std::basic_filebuf::int_type)"),("std::basic_filebuf<_CharT, _Traits>::int_type","(std::basic_filebuf::int_type)"),("std::_Wide_streambuf::int_type","(std::_Wide_streambuf::int_type)")],
"stossc":["void","()"],
"__safe_gbump":["void","(long)"],
"__safe_pbump":["void","(long)"],
"equal":["bool","(const istreambuf_iterator<_CharT, _Traits> &)"],
"_M_at_eof":["bool","()"],
"_S_is_eof":["bool","(std::istreambuf_iterator::int_type)"],
"failed":["bool","()"],
"_M_put":[("ostreambuf_iterator<_CharT, _Traits> &","(const _CharT *, long)"),("void","(_CharT *, std::size_t, const _CharT *, const tm *)"),("void","(char *, std::size_t, char const *, const tm *)"),("void","(wchar_t *, std::size_t, const wchar_t *, const tm *)"),("bool","(...)"),("bool","(char const *, long)")],
"__convert_to_v":"void",
"_S_pad":"void",
"is":[("bool","(std::ctype_base::mask, std::__ctype_abstract_base::char_type)"),("const std::__ctype_abstract_base::char_type *","(const std::__ctype_abstract_base::char_type *, const std::__ctype_abstract_base::char_type *, std::ctype_base::mask *)"),("bool","(std::ctype_base::mask, char)"),("char const *","(char const *, char const *, std::ctype_base::mask *)"),("bool","(std::ctype_base::mask, char)"),("char const *","(char const *, char const *, std::ctype_base::mask *)")],
"scan_is":[("const std::__ctype_abstract_base::char_type *","(std::ctype_base::mask, const std::__ctype_abstract_base::char_type *, const std::__ctype_abstract_base::char_type *)"),("char const *","(std::ctype_base::mask, char const *, char const *)")],
"scan_not":[("const std::__ctype_abstract_base::char_type *","(std::ctype_base::mask, const std::__ctype_abstract_base::char_type *, const std::__ctype_abstract_base::char_type *)"),("char const *","(std::ctype_base::mask, char const *, char const *)")],
"widen":[("std::__ctype_abstract_base::char_type","(char)"),("char const *","(char const *, char const *, std::__ctype_abstract_base::char_type *)"),("std::ctype<char>::char_type","(char)"),("char const *","(char const *, char const *, std::ctype<char>::char_type *)"),("std::basic_ios::char_type","(char)")],
"narrow":[("char","(std::__ctype_abstract_base::char_type, char)"),("const std::__ctype_abstract_base::char_type *","(const std::__ctype_abstract_base::char_type *, const std::__ctype_abstract_base::char_type *, char, char *)"),("char","(std::ctype<char>::char_type, char)"),("const std::ctype<char>::char_type *","(const std::ctype<char>::char_type *, const std::ctype<char>::char_type *, char, char *)"),("char","(std::basic_ios::char_type, char)")],
"do_is":[("bool","(std::ctype_base::mask, std::__ctype_abstract_base::char_type)"),("const std::__ctype_abstract_base::char_type *","(const std::__ctype_abstract_base::char_type *, const std::__ctype_abstract_base::char_type *, std::ctype_base::mask *)"),("bool","(std::ctype::mask, std::ctype::char_type)"),("const std::ctype::char_type *","(const std::ctype::char_type *, const std::ctype::char_type *, std::ctype::mask *)"),("bool","(std::ctype_base::mask, std::ctype<wchar_t>::char_type)"),("const std::ctype<wchar_t>::char_type *","(const std::ctype<wchar_t>::char_type *, const std::ctype<wchar_t>::char_type *, std::ctype_base::mask *)")],
"do_scan_is":[("const std::__ctype_abstract_base::char_type *","(std::ctype_base::mask, const std::__ctype_abstract_base::char_type *, const std::__ctype_abstract_base::char_type *)"),("const std::ctype::char_type *","(std::ctype::mask, const std::ctype::char_type *, const std::ctype::char_type *)"),("const std::ctype<wchar_t>::char_type *","(std::ctype_base::mask, const std::ctype<wchar_t>::char_type *, const std::ctype<wchar_t>::char_type *)")],
"do_scan_not":[("const std::__ctype_abstract_base::char_type *","(std::ctype_base::mask, const std::__ctype_abstract_base::char_type *, const std::__ctype_abstract_base::char_type *)"),("const std::ctype::char_type *","(std::ctype::mask, const std::ctype::char_type *, const std::ctype::char_type *)"),("const std::ctype<wchar_t>::char_type *","(std::ctype_base::mask, const std::ctype<wchar_t>::char_type *, const std::ctype<wchar_t>::char_type *)")],
"do_toupper":[("std::__ctype_abstract_base::char_type","(std::__ctype_abstract_base::char_type)"),("const std::__ctype_abstract_base::char_type *","(std::__ctype_abstract_base::char_type *, const std::__ctype_abstract_base::char_type *)"),("std::ctype::char_type","(std::ctype::char_type)"),("const std::ctype::char_type *","(std::ctype::char_type *, const std::ctype::char_type *)"),("std::ctype<char>::char_type","(std::ctype<char>::char_type)"),("const std::ctype<char>::char_type *","(std::ctype<char>::char_type *, const std::ctype<char>::char_type *)"),("std::ctype<wchar_t>::char_type","(std::ctype<wchar_t>::char_type)"),("const std::ctype<wchar_t>::char_type *","(std::ctype<wchar_t>::char_type *, const std::ctype<wchar_t>::char_type *)")],
"do_tolower":[("std::__ctype_abstract_base::char_type","(std::__ctype_abstract_base::char_type)"),("const std::__ctype_abstract_base::char_type *","(std::__ctype_abstract_base::char_type *, const std::__ctype_abstract_base::char_type *)"),("std::ctype::char_type","(std::ctype::char_type)"),("const std::ctype::char_type *","(std::ctype::char_type *, const std::ctype::char_type *)"),("std::ctype<char>::char_type","(std::ctype<char>::char_type)"),("const std::ctype<char>::char_type *","(std::ctype<char>::char_type *, const std::ctype<char>::char_type *)"),("std::ctype<wchar_t>::char_type","(std::ctype<wchar_t>::char_type)"),("const std::ctype<wchar_t>::char_type *","(std::ctype<wchar_t>::char_type *, const std::ctype<wchar_t>::char_type *)")],
"do_widen":[("std::__ctype_abstract_base::char_type","(char)"),("char const *","(char const *, char const *, std::__ctype_abstract_base::char_type *)"),("std::ctype::char_type","(char)"),("char const *","(char const *, char const *, std::ctype::char_type *)"),("std::ctype<char>::char_type","(char)"),("char const *","(char const *, char const *, std::ctype<char>::char_type *)"),("std::ctype<wchar_t>::char_type","(char)"),("char const *","(char const *, char const *, std::ctype<wchar_t>::char_type *)")],
"do_narrow":[("char","(std::__ctype_abstract_base::char_type, char)"),("const std::__ctype_abstract_base::char_type *","(const std::__ctype_abstract_base::char_type *, const std::__ctype_abstract_base::char_type *, char, char *)"),("char","(std::ctype::char_type, char)"),("const std::ctype::char_type *","(const std::ctype::char_type *, const std::ctype::char_type *, char, char *)"),("char","(std::ctype<char>::char_type, char)"),("const std::ctype<char>::char_type *","(const std::ctype<char>::char_type *, const std::ctype<char>::char_type *, char, char *)"),("char","(std::ctype<wchar_t>::char_type, char)"),("const std::ctype<wchar_t>::char_type *","(const std::ctype<wchar_t>::char_type *, const std::ctype<wchar_t>::char_type *, char, char *)")],
"table":["const std::ctype_base::mask *","()"],
"classic_table":["const std::ctype_base::mask *","()"],
"_M_narrow_init":["void","()"],
"_M_widen_init":["void","()"],
"_M_convert_to_wmask":["std::ctype<wchar_t>::__wmask_type","(const std::ctype_base::mask)"],
"_M_initialize_ctype":["void","()"],
"_S_format_float":["void","(const std::ios_base &, char *, char)"],
"_M_cache":"void",
"decimal_point":[("std::__cxx11::numpunct::char_type","()"),("std::__cxx11::moneypunct::char_type","()")],
"thousands_sep":[("std::__cxx11::numpunct::char_type","()"),("std::__cxx11::moneypunct::char_type","()")],
"grouping":"std::string",
"truename":["std::__cxx11::numpunct::string_type","()"],
"falsename":["std::__cxx11::numpunct::string_type","()"],
"do_decimal_point":[("std::__cxx11::numpunct::char_type","()"),("std::__cxx11::moneypunct::char_type","()")],
"do_thousands_sep":[("std::__cxx11::numpunct::char_type","()"),("std::__cxx11::moneypunct::char_type","()")],
"do_grouping":"std::string",
"do_truename":["std::__cxx11::numpunct::string_type","()"],
"do_falsename":["std::__cxx11::numpunct::string_type","()"],
"_M_initialize_numpunct":"void",
"get":[("std::num_get::iter_type","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, bool &)"),("std::num_get::iter_type","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, long &)"),("std::num_get::iter_type","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, unsigned short &)"),("std::num_get::iter_type","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, unsigned int &)"),("std::num_get::iter_type","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, unsigned long &)"),("std::num_get::iter_type","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, long long &)"),("std::num_get::iter_type","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, unsigned long long &)"),("std::num_get::iter_type","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, float &)"),("std::num_get::iter_type","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, double &)"),("std::num_get::iter_type","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, long double &)"),("std::num_get::iter_type","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, void *&)"),("std::istream::int_type","()"),("std::istream &","(char &)"),("std::istream &","(char *, long, char)"),("std::istream &","(char *, long)"),("std::istream &","(std::istream::__streambuf_type &, char)"),("std::istream &","(std::istream::__streambuf_type &)"),("std::istream<_CharT, _Traits>::int_type","()"),("basic_istream<_CharT, _Traits> &","(char &)"),("basic_istream<_CharT, _Traits> &","(char *, long, char)"),("basic_istream<_CharT, _Traits> &","(std::istream::__streambuf_type &, char)"),("_Tp &","()"),("std::__cxx11::time_get::iter_type","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, std::ios_base &, ios_base::iostate &, tm *, char, char)"),("std::__cxx11::time_get::iter_type","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, std::ios_base &, ios_base::iostate &, tm *, const std::__cxx11::time_get::char_type *, const std::__cxx11::time_get::char_type *)"),("std::__cxx11::money_get::iter_type","(std::__cxx11::money_get::iter_type, std::__cxx11::money_get::iter_type, bool, std::ios_base &, ios_base::iostate &, long double &)"),("std::__cxx11::money_get::iter_type","(std::__cxx11::money_get::iter_type, std::__cxx11::money_get::iter_type, bool, std::ios_base &, ios_base::iostate &, std::__cxx11::money_get::string_type &)"),("std::__cxx11::messages::string_type","(std::messages_base::catalog, int, int, const std::__cxx11::messages::string_type &)"),("_InIter","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, std::ios_base &, ios_base::iostate &, tm *, const std::__cxx11::time_get::char_type *, const std::__cxx11::time_get::char_type *)"),("std::unique_ptr::pointer","()"),("std::unique_ptr<type-parameter-0-0 [], type-parameter-0-1>::pointer","()"),("std::__allocated_ptr::value_type *","()"),("std::__shared_ptr::element_type *","()"),("std::auto_ptr::element_type *","()"),("_Res","()"),("_Res &","()"),("void","()"),("const _Res &","()"),("_Res &","()"),("void","()")],
"_M_extract_float":[("std::num_get::iter_type","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, std::string &)"),("_InIter","(_InIter, _InIter, std::ios_base &, ios_base::iostate &, std::string &)")],
"do_get":[("std::num_get::iter_type","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, bool &)"),("std::num_get::iter_type","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, long &)"),("std::num_get::iter_type","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, unsigned short &)"),("std::num_get::iter_type","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, unsigned int &)"),("std::num_get::iter_type","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, unsigned long &)"),("std::num_get::iter_type","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, long long &)"),("std::num_get::iter_type","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, unsigned long long &)"),("std::num_get::iter_type","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, float &)"),("std::num_get::iter_type","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, double &)"),("std::num_get::iter_type","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, long double &)"),("std::num_get::iter_type","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, void *&)"),("_InIter","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, bool &)"),("_InIter","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, float &)"),("_InIter","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, double &)"),("_InIter","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, long double &)"),("_InIter","(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, void *&)"),("std::__cxx11::time_get::iter_type","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, std::ios_base &, ios_base::iostate &, tm *, char, char)"),("std::__cxx11::money_get::iter_type","(std::__cxx11::money_get::iter_type, std::__cxx11::money_get::iter_type, bool, std::ios_base &, ios_base::iostate &, long double &)"),("std::__cxx11::money_get::iter_type","(std::__cxx11::money_get::iter_type, std::__cxx11::money_get::iter_type, bool, std::ios_base &, ios_base::iostate &, std::__cxx11::money_get::string_type &)"),("std::__cxx11::messages::string_type","(std::messages_base::catalog, int, int, const std::__cxx11::messages::string_type &)"),("std::string","(std::messages_base::catalog, int, int, const std::string &)"),("std::wstring","(std::messages_base::catalog, int, int, const std::wstring &)"),("_InIter","(std::__cxx11::money_get::iter_type, std::__cxx11::money_get::iter_type, bool, std::ios_base &, ios_base::iostate &, long double &)"),("_InIter","(std::__cxx11::money_get::iter_type, std::__cxx11::money_get::iter_type, bool, std::ios_base &, ios_base::iostate &, std::__cxx11::money_get::string_type &)"),("_InIter","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, std::ios_base &, ios_base::iostate &, tm *, char, char)")],
"put":[("std::num_put::iter_type","(std::num_put::iter_type, std::ios_base &, std::num_put::char_type, bool)"),("std::num_put::iter_type","(std::num_put::iter_type, std::ios_base &, std::num_put::char_type, long)"),("std::num_put::iter_type","(std::num_put::iter_type, std::ios_base &, std::num_put::char_type, unsigned long)"),("std::num_put::iter_type","(std::num_put::iter_type, std::ios_base &, std::num_put::char_type, long long)"),("std::num_put::iter_type","(std::num_put::iter_type, std::ios_base &, std::num_put::char_type, unsigned long long)"),("std::num_put::iter_type","(std::num_put::iter_type, std::ios_base &, std::num_put::char_type, double)"),("std::num_put::iter_type","(std::num_put::iter_type, std::ios_base &, std::num_put::char_type, long double)"),("std::num_put::iter_type","(std::num_put::iter_type, std::ios_base &, std::num_put::char_type, void const*)"),("std::ostream &","(char)"),("basic_ostream<_CharT, _Traits> &","(char)"),("std::time_put::iter_type","(std::time_put::iter_type, std::ios_base &, std::time_put::char_type, const tm *, const _CharT *, const _CharT *)"),("std::time_put::iter_type","(std::time_put::iter_type, std::ios_base &, std::time_put::char_type, const tm *, char, char)"),("std::__cxx11::money_put::iter_type","(std::__cxx11::money_put::iter_type, bool, std::ios_base &, std::__cxx11::money_put::char_type, long double)"),("std::__cxx11::money_put::iter_type","(std::__cxx11::money_put::iter_type, bool, std::ios_base &, std::__cxx11::money_put::char_type, const std::__cxx11::money_put::string_type &)"),("_OutIter","(std::time_put::iter_type, std::ios_base &, std::time_put::char_type, const tm *, const _CharT *, const _CharT *)")],
"_M_group_float":"void",
"_M_group_int":"void",
"_M_pad":"void",
"do_put":[("std::num_put::iter_type","(std::num_put::iter_type, std::ios_base &, std::num_put::char_type, bool)"),("std::num_put::iter_type","(std::num_put::iter_type, std::ios_base &, std::num_put::char_type, long)"),("std::num_put::iter_type","(std::num_put::iter_type, std::ios_base &, std::num_put::char_type, unsigned long)"),("std::num_put::iter_type","(std::num_put::iter_type, std::ios_base &, std::num_put::char_type, long long)"),("std::num_put::iter_type","(std::num_put::iter_type, std::ios_base &, std::num_put::char_type, unsigned long long)"),("std::num_put::iter_type","(std::num_put::iter_type, std::ios_base &, std::num_put::char_type, double)"),("std::num_put::iter_type","(std::num_put::iter_type, std::ios_base &, std::num_put::char_type, long double)"),("std::num_put::iter_type","(std::num_put::iter_type, std::ios_base &, std::num_put::char_type, void const*)"),("_OutIter","(std::num_put::iter_type, std::ios_base &, std::num_put::char_type, bool)"),("_OutIter","(std::num_put::iter_type, std::ios_base &, std::num_put::char_type, double)"),("_OutIter","(std::num_put::iter_type, std::ios_base &, std::num_put::char_type, long double)"),("_OutIter","(std::num_put::iter_type, std::ios_base &, std::num_put::char_type, void const*)"),("std::time_put::iter_type","(std::time_put::iter_type, std::ios_base &, std::time_put::char_type, const tm *, char, char)"),("std::__cxx11::money_put::iter_type","(std::__cxx11::money_put::iter_type, bool, std::ios_base &, std::__cxx11::money_put::char_type, long double)"),("std::__cxx11::money_put::iter_type","(std::__cxx11::money_put::iter_type, bool, std::ios_base &, std::__cxx11::money_put::char_type, const std::__cxx11::money_put::string_type &)"),("_OutIter","(std::__cxx11::money_put::iter_type, bool, std::ios_base &, std::__cxx11::money_put::char_type, long double)"),("_OutIter","(std::__cxx11::money_put::iter_type, bool, std::ios_base &, std::__cxx11::money_put::char_type, const std::__cxx11::money_put::string_type &)"),("_OutIter","(std::time_put::iter_type, std::ios_base &, std::time_put::char_type, const tm *, char, char)")],
"__verify_grouping":["bool","(char const *, std::size_t, const std::string &)"],
"operator!":[("bool","()"),("std::_UnaryOp<__logical_not>::_Rt","()"),("_Expr<_UnClos<std::__logical_not, std::_Expr, _Clos>, bool>","()"),("_Expr<_UnClos<std::__logical_not, _Expr, _Dom>, bool>","()"),("std::valarray<_Tp>::_UnaryOp<__logical_not>::_Rt","()")],
"rdstate":["std::ios_base::iostate","()"],
"_M_setstate":["void","(std::ios_base::iostate)"],
"good":["bool","()"],
"fail":["bool","()"],
"bad":["bool","()"],
"exceptions":[("std::ios_base::iostate","()"),("void","(std::ios_base::iostate)")],
"tie":"basic_ostream<_CharT, _Traits> *",
"rdbuf":[("std::basic_streambuf<_CharT, _Traits> *","()"),("std::basic_streambuf<_CharT, _Traits> *","(std::basic_streambuf<_CharT, _Traits> *)"),("std::__cxx11::basic_istringstream::__stringbuf_type *","()"),("std::__cxx11::basic_ostringstream::__stringbuf_type *","()"),("std::__cxx11::basic_stringstream::__stringbuf_type *","()"),("std::basic_ifstream::__filebuf_type *","()"),("std::basic_ofstream::__filebuf_type *","()"),("std::basic_fstream::__filebuf_type *","()"),("std::streambuf *","()"),("std::streambuf *","(std::streambuf *)")],
"copyfmt":"basic_ios<_CharT, _Traits> &",
"fill":[("std::basic_ios::char_type","()"),("std::basic_ios::char_type","(std::basic_ios::char_type)"),("void","(const std::array::value_type &)")],
"init":"void",
"set_rdbuf":["void","(std::basic_streambuf<_CharT, _Traits> *)"],
"_M_cache_locale":"void",
"operator<<":[("std::ostream &","(std::ostream &(*)(std::ostream &))"),("std::ostream &","(std::basic_ostream::__ios_type &(*)(std::basic_ostream::__ios_type &))"),("std::ostream &","(std::ios_base &(*)(std::ios_base &))"),("std::ostream &","(long)"),("std::ostream &","(unsigned long)"),("std::ostream &","(bool)"),("std::ostream &","(short)"),("std::ostream &","(unsigned short)"),("std::ostream &","(int)"),("std::ostream &","(unsigned int)"),("std::ostream &","(long long)"),("std::ostream &","(unsigned long long)"),("std::ostream &","(double)"),("std::ostream &","(float)"),("std::ostream &","(long double)"),("std::ostream &","(void const*)"),("std::ostream &","(std::basic_ostream::__streambuf_type *)"),("basic_ostream<_CharT, _Traits> &","(short)"),("basic_ostream<_CharT, _Traits> &","(int)"),("basic_ostream<_CharT, _Traits> &","(std::basic_ostream::__streambuf_type *)"),("bitset<_Nb>","(std::size_t)")],
"_M_write":["void","(char const *, long)"],
"flush":[("std::ostream &","()"),("basic_ostream<_CharT, _Traits> &","()")],
"tellp":[("std::basic_ostream::pos_type","()"),("std::basic_ostream<_CharT, _Traits>::pos_type","()")],
"seekp":[("std::ostream &","(std::basic_ostream::pos_type)"),("std::ostream &","(std::basic_ostream::off_type, std::_Ios_Seekdir)"),("basic_ostream<_CharT, _Traits> &","(std::basic_ostream::pos_type)"),("basic_ostream<_CharT, _Traits> &","(std::basic_ostream::off_type, std::_Ios_Seekdir)")],
"__get":"_CharT *",
"gcount":["long","()"],
"ignore":[("std::istream &","(long, std::istream::int_type)"),("std::istream &","(long)"),("std::istream &","()"),("basic_istream<char> &","(long)"),("basic_istream<char> &","(long, std::istream<char, std::char_traits<char>>::int_type)"),("basic_istream<wchar_t> &","(long)"),("basic_istream<wchar_t> &","(long, std::istream<wchar_t, std::char_traits<wchar_t>>::int_type)"),("basic_istream<_CharT, _Traits> &","()"),("basic_istream<_CharT, _Traits> &","(long)"),("basic_istream<_CharT, _Traits> &","(long, std::istream::int_type)")],
"peek":[("std::istream::int_type","()"),("std::istream<_CharT, _Traits>::int_type","()")],
"readsome":"long",
"putback":[("std::istream &","(char)"),("basic_istream<_CharT, _Traits> &","(char)")],
"unget":[("std::istream &","()"),("basic_istream<_CharT, _Traits> &","()")],
"tellg":[("std::istream::pos_type","()"),("std::istream<_CharT, _Traits>::pos_type","()")],
"seekg":[("std::istream &","(std::istream::pos_type)"),("std::istream &","(std::istream::off_type, std::_Ios_Seekdir)"),("basic_istream<_CharT, _Traits> &","(std::istream::pos_type)"),("basic_istream<_CharT, _Traits> &","(std::istream::off_type, std::_Ios_Seekdir)")],
"str":[("std::string","()"),("void","(const std::string &)"),("std::string","()"),("void","(const std::string &)"),("std::string","()"),("void","(const std::string &)"),("std::string","()"),("void","(const std::string &)"),("std::string","()"),("std::__cxx11::match_results::string_type","(std::__cxx11::match_results::size_type)"),("char *","()")],
"_M_stringbuf_init":["void","(std::_Ios_Openmode)"],
"_M_sync":"void",
"_M_update_egptr":["void","()"],
"_M_pbump":"void",
"_M_high_mark":["char *","()"],
"real":[("_Tp","()"),("void","(_Tp)"),("float","()"),("void","(float)"),("double","()"),("void","(double)"),("long double","()"),("void","(long double)")],
"imag":[("_Tp","()"),("void","(_Tp)"),("float","()"),("void","(float)"),("double","()"),("void","(double)"),("long double","()"),("void","(long double)")],
"operator*=":[("complex<_Tp> &","(const _Tp &)"),("std::complex<float> &","(float)"),("std::complex<double> &","(double)"),("std::complex<long double> &","(long double)"),("void","(const valarray<_Tp> &)"),("valarray<_Tp> &","(const _Tp &)"),("valarray<_Tp> &","(const valarray<_Tp> &)"),("void","(const valarray<_Tp> &)"),("valarray<_Tp> &","(const _Tp &)"),("valarray<_Tp> &","(const valarray<_Tp> &)"),("duration<_Rep, _Period> &","(const std::chrono::duration::rep &)")],
"operator/=":[("complex<_Tp> &","(const _Tp &)"),("std::complex<float> &","(float)"),("std::complex<double> &","(double)"),("std::complex<long double> &","(long double)"),("void","(const valarray<_Tp> &)"),("valarray<_Tp> &","(const _Tp &)"),("valarray<_Tp> &","(const valarray<_Tp> &)"),("void","(const valarray<_Tp> &)"),("valarray<_Tp> &","(const _Tp &)"),("valarray<_Tp> &","(const valarray<_Tp> &)"),("duration<_Rep, _Period> &","(const std::chrono::duration::rep &)")],
"__rep":[("complex<_Tp>","()"),("std::complex<float>::_ComplexT","()"),("std::complex<double>::_ComplexT","()"),("std::complex<long double>::_ComplexT","()")],
"__complex_abs":[("float","(_Complex float)"),("double","(_Complex double)"),("long double","(const _Complex long double &)")],
"__complex_arg":[("float","(_Complex float)"),("double","(_Complex double)"),("long double","(const _Complex long double &)")],
"__complex_cos":[("_Complex float","(_Complex float)"),("_Complex double","(_Complex double)"),("_Complex long double","(const _Complex long double &)")],
"__complex_cosh":[("_Complex float","(_Complex float)"),("_Complex double","(_Complex double)"),("_Complex long double","(const _Complex long double &)")],
"__complex_exp":[("_Complex float","(_Complex float)"),("_Complex double","(_Complex double)"),("_Complex long double","(const _Complex long double &)")],
"__complex_log":[("_Complex float","(_Complex float)"),("_Complex double","(_Complex double)"),("_Complex long double","(const _Complex long double &)")],
"__complex_sin":[("_Complex float","(_Complex float)"),("_Complex double","(_Complex double)"),("_Complex long double","(const _Complex long double &)")],
"__complex_sinh":[("_Complex float","(_Complex float)"),("_Complex double","(_Complex double)"),("_Complex long double","(const _Complex long double &)")],
"__complex_sqrt":[("_Complex float","(_Complex float)"),("_Complex double","(_Complex double)"),("_Complex long double","(const _Complex long double &)")],
"__complex_tan":[("_Complex float","(_Complex float)"),("_Complex double","(_Complex double)"),("_Complex long double","(const _Complex long double &)")],
"__complex_tanh":[("_Complex float","(_Complex float)"),("_Complex double","(_Complex double)"),("_Complex long double","(const _Complex long double &)")],
"__complex_pow":[("_Complex float","(_Complex float, _Complex float)"),("_Complex double","(_Complex double, _Complex double)"),("_Complex long double","(const _Complex long double &, const _Complex long double &)")],
"__complex_acos":[("_Complex float","(_Complex float)"),("_Complex double","(_Complex double)"),("_Complex long double","(const _Complex long double &)")],
"__complex_asin":[("_Complex float","(_Complex float)"),("_Complex double","(_Complex double)"),("_Complex long double","(const _Complex long double &)")],
"__complex_atan":[("_Complex float","(_Complex float)"),("_Complex double","(_Complex double)"),("_Complex long double","(const _Complex long double &)")],
"__complex_acosh":[("_Complex float","(_Complex float)"),("_Complex double","(_Complex double)"),("_Complex long double","(const _Complex long double &)")],
"__complex_asinh":[("_Complex float","(_Complex float)"),("_Complex double","(_Complex double)"),("_Complex long double","(const _Complex long double &)")],
"__complex_atanh":[("_Complex float","(_Complex float)"),("_Complex double","(_Complex double)"),("_Complex long double","(const _Complex long double &)")],
"__complex_proj":[("complex<float>","(const complex<float> &)"),("complex<double>","(const complex<double> &)"),("complex<long double>","(const complex<long double> &)")],
"operator""if":"std::complex<float>",
"operator""i":"std::complex<double>",
"operator""il":"std::complex<long double>",
"feclearexcept":["int","(int)"],
"fegetexceptflag":["int","(fexcept_t *, int)"],
"feraiseexcept":["int","(int)"],
"fesetexcept":["int","(int)"],
"fesetexceptflag":["int","(const fexcept_t *, int)"],
"fetestexcept":["int","(int)"],
"fetestexceptflag":["int","(const fexcept_t *, int)"],
"fegetround":["int","()"],
"fesetround":["int","(int)"],
"fegetenv":["int","(fenv_t *)"],
"feholdexcept":["int","(fenv_t *)"],
"fesetenv":["int","(const fenv_t *)"],
"feupdateenv":["int","(const fenv_t *)"],
"fegetmode":["int","(femode_t *)"],
"fesetmode":["int","(const femode_t *)"],
"feenableexcept":["int","(int)"],
"fedisableexcept":["int","(int)"],
"fegetexcept":["int","()"],
"imaxabs":["intmax_t","(intmax_t)"],
"imaxdiv":["imaxdiv_t","(intmax_t, intmax_t)"],
"strtoimax":["intmax_t","(char const *__restrict, char **__restrict, int)"],
"strtoumax":["uintmax_t","(char const *__restrict, char **__restrict, int)"],
"wcstoimax":["intmax_t","(const wchar_t *__restrict, wchar_t **__restrict, int)"],
"wcstoumax":["uintmax_t","(const wchar_t *__restrict, wchar_t **__restrict, int)"],
"mbrtoc16":["size_t","(char16_t *__restrict, char const *__restrict, size_t, mbstate_t *__restrict)"],
"c16rtomb":["size_t","(char *__restrict, char16_t, mbstate_t *__restrict)"],
"mbrtoc32":["size_t","(char32_t *__restrict, char const *__restrict, size_t, mbstate_t *__restrict)"],
"c32rtomb":["size_t","(char *__restrict, char32_t, mbstate_t *__restrict)"],
"requested_size":["std::_Temporary_buffer::size_type","()"],
"a":[("std::uniform_int_distribution::result_type","()"),("std::uniform_real_distribution::result_type","()"),("_RealType","()")],
"b":[("std::uniform_int_distribution::result_type","()"),("std::uniform_real_distribution::result_type","()"),("_RealType","()")],
"reset":[("void","()"),("bitset<_Nb> &","()"),("bitset<_Nb> &","(std::size_t)"),("void","(std::__uniq_ptr_impl::pointer)"),("void","(std::unique_ptr::pointer)"),("void","(std::nullptr_t)"),("void","()"),("void","(std::auto_ptr::element_type *)"),("void","()")],
"param":[("std::uniform_int_distribution::param_type","()"),("void","(const std::uniform_int_distribution::param_type &)"),("std::uniform_real_distribution::param_type","()"),("void","(const std::uniform_real_distribution::param_type &)"),("std::normal_distribution::param_type","()"),("void","(const std::normal_distribution::param_type &)"),("std::lognormal_distribution::param_type","()"),("void","(const std::lognormal_distribution::param_type &)"),("std::gamma_distribution::param_type","()"),("void","(const std::gamma_distribution::param_type &)"),("std::chi_squared_distribution::param_type","()"),("void","(const std::chi_squared_distribution::param_type &)"),("std::cauchy_distribution::param_type","()"),("void","(const std::cauchy_distribution::param_type &)"),("std::fisher_f_distribution::param_type","()"),("void","(const std::fisher_f_distribution::param_type &)"),("std::student_t_distribution::param_type","()"),("void","(const std::student_t_distribution::param_type &)"),("std::bernoulli_distribution::param_type","()"),("void","(const std::bernoulli_distribution::param_type &)"),("std::binomial_distribution::param_type","()"),("void","(const std::binomial_distribution::param_type &)"),("std::geometric_distribution::param_type","()"),("void","(const std::geometric_distribution::param_type &)"),("std::negative_binomial_distribution::param_type","()"),("void","(const std::negative_binomial_distribution::param_type &)"),("std::poisson_distribution::param_type","()"),("void","(const std::poisson_distribution::param_type &)"),("std::exponential_distribution::param_type","()"),("void","(const std::exponential_distribution::param_type &)"),("std::weibull_distribution::param_type","()"),("void","(const std::weibull_distribution::param_type &)"),("std::extreme_value_distribution::param_type","()"),("void","(const std::extreme_value_distribution::param_type &)"),("std::discrete_distribution::param_type","()"),("void","(const std::discrete_distribution::param_type &)"),("std::piecewise_constant_distribution::param_type","()"),("void","(const std::piecewise_constant_distribution::param_type &)"),("std::piecewise_linear_distribution::param_type","()"),("void","(const std::piecewise_linear_distribution::param_type &)")],
"min":[("std::uniform_int_distribution::result_type","()"),("_Tp","()"),("bool","()"),("char","()"),("signed char","()"),("unsigned char","()"),("wchar_t","()"),("char16_t","()"),("char32_t","()"),("short","()"),("unsigned short","()"),("int","()"),("unsigned int","()"),("long","()"),("unsigned long","()"),("long long","()"),("unsigned long long","()"),("__int128","()"),("unsigned __int128","()"),("float","()"),("double","()"),("long double","()"),("_Tp","()"),("std::_Expr::value_type","()"),("_Tp","()"),("_Rep","()"),("duration<_Rep, _Period>","()"),("time_point<_Clock, _Dur>","()"),("_DInputType","()"),("std::linear_congruential_engine::result_type","()"),("std::mersenne_twister_engine::result_type","()"),("std::subtract_with_carry_engine::result_type","()"),("std::discard_block_engine::result_type","()"),("std::independent_bits_engine::result_type","()"),("std::shuffle_order_engine::result_type","()"),("std::random_device::result_type","()"),("std::uniform_real_distribution::result_type","()"),("std::normal_distribution::result_type","()"),("std::lognormal_distribution::result_type","()"),("std::gamma_distribution::result_type","()"),("std::chi_squared_distribution::result_type","()"),("std::cauchy_distribution::result_type","()"),("std::fisher_f_distribution::result_type","()"),("std::student_t_distribution::result_type","()"),("std::bernoulli_distribution::result_type","()"),("std::binomial_distribution::result_type","()"),("std::geometric_distribution::result_type","()"),("std::negative_binomial_distribution::result_type","()"),("std::poisson_distribution::result_type","()"),("std::exponential_distribution::result_type","()"),("std::weibull_distribution::result_type","()"),("std::extreme_value_distribution::result_type","()"),("std::discrete_distribution::result_type","()"),("std::piecewise_constant_distribution::result_type","()"),("std::piecewise_linear_distribution::result_type","()")],
"max":[("std::uniform_int_distribution::result_type","()"),("_Tp","()"),("bool","()"),("char","()"),("signed char","()"),("unsigned char","()"),("wchar_t","()"),("char16_t","()"),("char32_t","()"),("short","()"),("unsigned short","()"),("int","()"),("unsigned int","()"),("long","()"),("unsigned long","()"),("long long","()"),("unsigned long long","()"),("__int128","()"),("unsigned __int128","()"),("float","()"),("double","()"),("long double","()"),("_Tp","()"),("std::_Expr::value_type","()"),("_Tp","()"),("_Rep","()"),("duration<_Rep, _Period>","()"),("time_point<_Clock, _Dur>","()"),("_DInputType","()"),("std::linear_congruential_engine::result_type","()"),("std::mersenne_twister_engine::result_type","()"),("std::subtract_with_carry_engine::result_type","()"),("std::discard_block_engine::result_type","()"),("std::independent_bits_engine::result_type","()"),("std::shuffle_order_engine::result_type","()"),("std::random_device::result_type","()"),("std::uniform_real_distribution::result_type","()"),("std::normal_distribution::result_type","()"),("std::lognormal_distribution::result_type","()"),("std::gamma_distribution::result_type","()"),("std::chi_squared_distribution::result_type","()"),("std::cauchy_distribution::result_type","()"),("std::fisher_f_distribution::result_type","()"),("std::student_t_distribution::result_type","()"),("std::bernoulli_distribution::result_type","()"),("std::binomial_distribution::result_type","()"),("std::geometric_distribution::result_type","()"),("std::negative_binomial_distribution::result_type","()"),("std::poisson_distribution::result_type","()"),("std::exponential_distribution::result_type","()"),("std::weibull_distribution::result_type","()"),("std::extreme_value_distribution::result_type","()"),("std::discrete_distribution::result_type","()"),("std::piecewise_constant_distribution::result_type","()"),("std::piecewise_linear_distribution::result_type","()")],
"_S_whichword":"std::size_t",
"_S_whichbyte":"std::size_t",
"_S_whichbit":"std::size_t",
"_S_maskbit":[("std::_Base_bitset::_WordT","(std::size_t)"),("std::_Base_bitset<1>::_WordT","(std::size_t)"),("std::_Base_bitset<0>::_WordT","(std::size_t)")],
"_M_getword":[("std::_Base_bitset::_WordT &","(std::size_t)"),("std::_Base_bitset::_WordT","(std::size_t)"),("std::_Base_bitset<1>::_WordT &","(std::size_t)"),("std::_Base_bitset<1>::_WordT","(std::size_t)"),("std::_Base_bitset<0>::_WordT &","(std::size_t)"),("std::_Base_bitset<0>::_WordT","(std::size_t)")],
"_M_getdata":[("const std::_Base_bitset::_WordT *","()"),("const std::_Base_bitset<1>::_WordT *","()")],
"_M_hiword":[("std::_Base_bitset::_WordT &","()"),("std::_Base_bitset::_WordT","()"),("std::_Base_bitset<1>::_WordT &","()"),("std::_Base_bitset<1>::_WordT","()"),("std::_Base_bitset<0>::_WordT","()")],
"_M_do_and":"void",
"_M_do_or":"void",
"_M_do_xor":"void",
"_M_do_left_shift":"void",
"_M_do_right_shift":"void",
"_M_do_flip":"void",
"_M_do_set":"void",
"_M_do_reset":"void",
"_M_is_equal":"bool",
"_M_is_any":"bool",
"_M_do_count":"std::size_t",
"_M_do_to_ulong":"unsigned long",
"_M_do_to_ullong":"unsigned long long",
"_M_do_find_first":"std::size_t",
"_M_do_find_next":"std::size_t",
"_S_do_sanitize":"void",
"_S_do_sanitize_val":"unsigned long long",
"_M_do_sanitize":["void","()"],
"flip":[("std::bitset::reference &","()"),("bitset<_Nb> &","()"),("bitset<_Nb> &","(std::size_t)"),("void","()")],
"operator<<=":[("bitset<_Nb> &","(std::size_t)"),("void","(const valarray<_Tp> &)"),("valarray<_Tp> &","(const _Tp &)"),("valarray<_Tp> &","(const valarray<_Tp> &)"),("void","(const valarray<_Tp> &)"),("valarray<_Tp> &","(const _Tp &)"),("valarray<_Tp> &","(const valarray<_Tp> &)")],
"operator>>=":[("bitset<_Nb> &","(std::size_t)"),("void","(const valarray<_Tp> &)"),("valarray<_Tp> &","(const _Tp &)"),("valarray<_Tp> &","(const valarray<_Tp> &)"),("void","(const valarray<_Tp> &)"),("valarray<_Tp> &","(const _Tp &)"),("valarray<_Tp> &","(const valarray<_Tp> &)")],
"_Unchecked_set":"bitset<_Nb> &",
"_Unchecked_reset":["bitset<_Nb> &","(std::size_t)"],
"_Unchecked_flip":["bitset<_Nb> &","(std::size_t)"],
"_Unchecked_test":["bool","(std::size_t)"],
"set":"bitset<_Nb> &",
"to_ulong":["unsigned long","()"],
"to_ullong":["unsigned long long","()"],
"count":[("std::size_t","()"),("std::_Rb_tree::size_type","(const std::_Rb_tree::key_type &)"),("std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type","(const _Key &)"),("std::map::size_type","(const std::map::key_type &)"),("std::multimap::size_type","(const std::multimap::key_type &)"),("std::set::size_type","(const std::set::key_type &)"),("std::multiset::size_type","(const std::multiset::key_type &)"),("std::chrono::duration::rep","()"),("std::_Hashtable::size_type","(const std::_Hashtable::key_type &)"),("std::unordered_map::size_type","(const std::unordered_map::key_type &)"),("std::unordered_multimap::size_type","(const std::unordered_multimap::key_type &)"),("std::unordered_set::size_type","(const std::unordered_set::key_type &)"),("std::unordered_multiset::size_type","(const std::unordered_multiset::key_type &)")],
"test":["bool","(std::size_t)"],
"all":["bool","()"],
"any":["bool","()"],
"none":["bool","()"],
"_Find_first":["std::size_t","()"],
"_Find_next":["std::size_t","(std::size_t)"],
"__deque_buf_size":["std::size_t","(std::size_t)"],
"_S_buffer_size":"std::size_t",
"_M_const_cast":[("std::_Deque_iterator::iterator","()"),("std::_List_iterator::_Self","()"),("std::_List_const_iterator::iterator","()"),("std::_Rb_tree_const_iterator::iterator","()"),("std::_Bit_iterator::iterator","()"),("std::_Bit_iterator","()")],
"_M_set_node":["void","(std::_Deque_iterator::_Map_pointer)"],
"operator>":"bool",
"operator<=":"bool",
"operator>=":"bool",
"_M_swap_data":"void",
"_M_get_Tp_allocator":[("std::_Deque_base::_Tp_alloc_type &","()"),("const std::_Deque_base::_Tp_alloc_type &","()"),("std::_Vector_base::_Tp_alloc_type &","()"),("const std::_Vector_base::_Tp_alloc_type &","()")],
"_M_get_map_allocator":["std::_Deque_base::_Map_alloc_type","()"],
"_M_allocate_node":["std::_Deque_base::_Ptr","()"],
"_M_deallocate_node":"void",
"_M_allocate_map":["std::_Deque_base::_Map_pointer","(std::size_t)"],
"_M_deallocate_map":["void","(std::_Deque_base::_Map_pointer, std::size_t)"],
"_M_initialize_map":"void",
"_M_create_nodes":"void",
"_M_destroy_nodes":"void",
"_M_range_check":"void",
"push_front":"void",
"pop_front":"void",
"_S_check_init_len":[("std::size_t","(std::size_t, const std::deque::allocator_type &)"),("std::vector::size_type","(std::vector::size_type, const std::vector::allocator_type &)")],
"_S_max_size":[("std::deque::size_type","(const std::deque::_Tp_alloc_type &)"),("std::vector::size_type","(const std::vector::_Tp_alloc_type &)")],
"_M_fill_initialize":"void",
"_M_default_initialize":"void",
"_M_fill_assign":"void",
"_M_pop_back_aux":"void",
"_M_pop_front_aux":"void",
"_M_fill_insert":"void",
"_M_insert_aux":"void",
"_M_destroy_data_aux":"void",
"_M_destroy_data":["void","(std::deque::iterator, std::deque::iterator, const std::allocator<_Tp> &)"],
"_M_erase_at_begin":["void","(std::deque::iterator)"],
"_M_erase_at_end":"void",
"_M_default_append":"void",
"_M_shrink_to_fit":"bool",
"_M_reserve_elements_at_front":["std::deque::iterator","(std::deque::size_type)"],
"_M_reserve_elements_at_back":["std::deque::iterator","(std::deque::size_type)"],
"_M_new_elements_at_front":"void",
"_M_new_elements_at_back":"void",
"_M_reserve_map_at_back":["void","(std::deque::size_type)"],
"_M_reserve_map_at_front":["void","(std::deque::size_type)"],
"_M_reallocate_map":"void",
"_M_move_assign1":"void",
"_M_move_assign2":"void",
"out":["std::__codecvt_abstract_base::result","(std::__codecvt_abstract_base::state_type &, const std::__codecvt_abstract_base::intern_type *, const std::__codecvt_abstract_base::intern_type *, const std::__codecvt_abstract_base::intern_type *&, std::__codecvt_abstract_base::extern_type *, std::__codecvt_abstract_base::extern_type *, std::__codecvt_abstract_base::extern_type *&)"],
"unshift":["std::__codecvt_abstract_base::result","(std::__codecvt_abstract_base::state_type &, std::__codecvt_abstract_base::extern_type *, std::__codecvt_abstract_base::extern_type *, std::__codecvt_abstract_base::extern_type *&)"],
"in":["std::__codecvt_abstract_base::result","(std::__codecvt_abstract_base::state_type &, const std::__codecvt_abstract_base::extern_type *, const std::__codecvt_abstract_base::extern_type *, const std::__codecvt_abstract_base::extern_type *&, std::__codecvt_abstract_base::intern_type *, std::__codecvt_abstract_base::intern_type *, std::__codecvt_abstract_base::intern_type *&)"],
"encoding":["int","()"],
"always_noconv":["bool","()"],
"max_length":["int","()"],
"do_out":[("std::__codecvt_abstract_base::result","(std::__codecvt_abstract_base::state_type &, const std::__codecvt_abstract_base::intern_type *, const std::__codecvt_abstract_base::intern_type *, const std::__codecvt_abstract_base::intern_type *&, std::__codecvt_abstract_base::extern_type *, std::__codecvt_abstract_base::extern_type *, std::__codecvt_abstract_base::extern_type *&)"),("std::codecvt::result","(std::codecvt::state_type &, const std::codecvt::intern_type *, const std::codecvt::intern_type *, const std::codecvt::intern_type *&, std::codecvt::extern_type *, std::codecvt::extern_type *, std::codecvt::extern_type *&)"),("std::__codecvt_abstract_base<char, char, __mbstate_t>::result","(std::codecvt<char, char, __mbstate_t>::state_type &, const std::codecvt<char, char, __mbstate_t>::intern_type *, const std::codecvt<char, char, __mbstate_t>::intern_type *, const std::codecvt<char, char, __mbstate_t>::intern_type *&, std::codecvt<char, char, __mbstate_t>::extern_type *, std::codecvt<char, char, __mbstate_t>::extern_type *, std::codecvt<char, char, __mbstate_t>::extern_type *&)"),("std::__codecvt_abstract_base<wchar_t, char, __mbstate_t>::result","(std::codecvt<wchar_t, char, __mbstate_t>::state_type &, const std::codecvt<wchar_t, char, __mbstate_t>::intern_type *, const std::codecvt<wchar_t, char, __mbstate_t>::intern_type *, const std::codecvt<wchar_t, char, __mbstate_t>::intern_type *&, std::codecvt<wchar_t, char, __mbstate_t>::extern_type *, std::codecvt<wchar_t, char, __mbstate_t>::extern_type *, std::codecvt<wchar_t, char, __mbstate_t>::extern_type *&)"),("std::__codecvt_abstract_base<char16_t, char, __mbstate_t>::result","(std::codecvt<char16_t, char, __mbstate_t>::state_type &, const std::codecvt<char16_t, char, __mbstate_t>::intern_type *, const std::codecvt<char16_t, char, __mbstate_t>::intern_type *, const std::codecvt<char16_t, char, __mbstate_t>::intern_type *&, std::codecvt<char16_t, char, __mbstate_t>::extern_type *, std::codecvt<char16_t, char, __mbstate_t>::extern_type *, std::codecvt<char16_t, char, __mbstate_t>::extern_type *&)"),("std::__codecvt_abstract_base<char32_t, char, __mbstate_t>::result","(std::codecvt<char32_t, char, __mbstate_t>::state_type &, const std::codecvt<char32_t, char, __mbstate_t>::intern_type *, const std::codecvt<char32_t, char, __mbstate_t>::intern_type *, const std::codecvt<char32_t, char, __mbstate_t>::intern_type *&, std::codecvt<char32_t, char, __mbstate_t>::extern_type *, std::codecvt<char32_t, char, __mbstate_t>::extern_type *, std::codecvt<char32_t, char, __mbstate_t>::extern_type *&)"),("std::__codecvt_abstract_base<char16_t, char, __mbstate_t>::result","(std::__codecvt_utf8_base<char16_t>::state_type &, const std::__codecvt_utf8_base<char16_t>::intern_type *, const std::__codecvt_utf8_base<char16_t>::intern_type *, const std::__codecvt_utf8_base<char16_t>::intern_type *&, std::__codecvt_utf8_base<char16_t>::extern_type *, std::__codecvt_utf8_base<char16_t>::extern_type *, std::__codecvt_utf8_base<char16_t>::extern_type *&)"),("std::__codecvt_abstract_base<char16_t, char, __mbstate_t>::result","(std::__codecvt_utf16_base<char16_t>::state_type &, const std::__codecvt_utf16_base<char16_t>::intern_type *, const std::__codecvt_utf16_base<char16_t>::intern_type *, const std::__codecvt_utf16_base<char16_t>::intern_type *&, std::__codecvt_utf16_base<char16_t>::extern_type *, std::__codecvt_utf16_base<char16_t>::extern_type *, std::__codecvt_utf16_base<char16_t>::extern_type *&)"),("std::__codecvt_abstract_base<char16_t, char, __mbstate_t>::result","(std::__codecvt_utf8_utf16_base<char16_t>::state_type &, const std::__codecvt_utf8_utf16_base<char16_t>::intern_type *, const std::__codecvt_utf8_utf16_base<char16_t>::intern_type *, const std::__codecvt_utf8_utf16_base<char16_t>::intern_type *&, std::__codecvt_utf8_utf16_base<char16_t>::extern_type *, std::__codecvt_utf8_utf16_base<char16_t>::extern_type *, std::__codecvt_utf8_utf16_base<char16_t>::extern_type *&)"),("std::__codecvt_abstract_base<char32_t, char, __mbstate_t>::result","(std::__codecvt_utf8_base<char32_t>::state_type &, const std::__codecvt_utf8_base<char32_t>::intern_type *, const std::__codecvt_utf8_base<char32_t>::intern_type *, const std::__codecvt_utf8_base<char32_t>::intern_type *&, std::__codecvt_utf8_base<char32_t>::extern_type *, std::__codecvt_utf8_base<char32_t>::extern_type *, std::__codecvt_utf8_base<char32_t>::extern_type *&)"),("std::__codecvt_abstract_base<char32_t, char, __mbstate_t>::result","(std::__codecvt_utf16_base<char32_t>::state_type &, const std::__codecvt_utf16_base<char32_t>::intern_type *, const std::__codecvt_utf16_base<char32_t>::intern_type *, const std::__codecvt_utf16_base<char32_t>::intern_type *&, std::__codecvt_utf16_base<char32_t>::extern_type *, std::__codecvt_utf16_base<char32_t>::extern_type *, std::__codecvt_utf16_base<char32_t>::extern_type *&)"),("std::__codecvt_abstract_base<char32_t, char, __mbstate_t>::result","(std::__codecvt_utf8_utf16_base<char32_t>::state_type &, const std::__codecvt_utf8_utf16_base<char32_t>::intern_type *, const std::__codecvt_utf8_utf16_base<char32_t>::intern_type *, const std::__codecvt_utf8_utf16_base<char32_t>::intern_type *&, std::__codecvt_utf8_utf16_base<char32_t>::extern_type *, std::__codecvt_utf8_utf16_base<char32_t>::extern_type *, std::__codecvt_utf8_utf16_base<char32_t>::extern_type *&)"),("std::__codecvt_abstract_base<wchar_t, char, __mbstate_t>::result","(std::__codecvt_utf8_base<wchar_t>::state_type &, const std::__codecvt_utf8_base<wchar_t>::intern_type *, const std::__codecvt_utf8_base<wchar_t>::intern_type *, const std::__codecvt_utf8_base<wchar_t>::intern_type *&, std::__codecvt_utf8_base<wchar_t>::extern_type *, std::__codecvt_utf8_base<wchar_t>::extern_type *, std::__codecvt_utf8_base<wchar_t>::extern_type *&)"),("std::__codecvt_abstract_base<wchar_t, char, __mbstate_t>::result","(std::__codecvt_utf16_base<wchar_t>::state_type &, const std::__codecvt_utf16_base<wchar_t>::intern_type *, const std::__codecvt_utf16_base<wchar_t>::intern_type *, const std::__codecvt_utf16_base<wchar_t>::intern_type *&, std::__codecvt_utf16_base<wchar_t>::extern_type *, std::__codecvt_utf16_base<wchar_t>::extern_type *, std::__codecvt_utf16_base<wchar_t>::extern_type *&)"),("std::__codecvt_abstract_base<wchar_t, char, __mbstate_t>::result","(std::__codecvt_utf8_utf16_base<wchar_t>::state_type &, const std::__codecvt_utf8_utf16_base<wchar_t>::intern_type *, const std::__codecvt_utf8_utf16_base<wchar_t>::intern_type *, const std::__codecvt_utf8_utf16_base<wchar_t>::intern_type *&, std::__codecvt_utf8_utf16_base<wchar_t>::extern_type *, std::__codecvt_utf8_utf16_base<wchar_t>::extern_type *, std::__codecvt_utf8_utf16_base<wchar_t>::extern_type *&)")],
"do_unshift":[("std::__codecvt_abstract_base::result","(std::__codecvt_abstract_base::state_type &, std::__codecvt_abstract_base::extern_type *, std::__codecvt_abstract_base::extern_type *, std::__codecvt_abstract_base::extern_type *&)"),("std::codecvt::result","(std::codecvt::state_type &, std::codecvt::extern_type *, std::codecvt::extern_type *, std::codecvt::extern_type *&)"),("std::__codecvt_abstract_base<char, char, __mbstate_t>::result","(std::codecvt<char, char, __mbstate_t>::state_type &, std::codecvt<char, char, __mbstate_t>::extern_type *, std::codecvt<char, char, __mbstate_t>::extern_type *, std::codecvt<char, char, __mbstate_t>::extern_type *&)"),("std::__codecvt_abstract_base<wchar_t, char, __mbstate_t>::result","(std::codecvt<wchar_t, char, __mbstate_t>::state_type &, std::codecvt<wchar_t, char, __mbstate_t>::extern_type *, std::codecvt<wchar_t, char, __mbstate_t>::extern_type *, std::codecvt<wchar_t, char, __mbstate_t>::extern_type *&)"),("std::__codecvt_abstract_base<char16_t, char, __mbstate_t>::result","(std::codecvt<char16_t, char, __mbstate_t>::state_type &, std::codecvt<char16_t, char, __mbstate_t>::extern_type *, std::codecvt<char16_t, char, __mbstate_t>::extern_type *, std::codecvt<char16_t, char, __mbstate_t>::extern_type *&)"),("std::__codecvt_abstract_base<char32_t, char, __mbstate_t>::result","(std::codecvt<char32_t, char, __mbstate_t>::state_type &, std::codecvt<char32_t, char, __mbstate_t>::extern_type *, std::codecvt<char32_t, char, __mbstate_t>::extern_type *, std::codecvt<char32_t, char, __mbstate_t>::extern_type *&)"),("std::__codecvt_abstract_base<char16_t, char, __mbstate_t>::result","(std::__codecvt_utf8_base<char16_t>::state_type &, std::__codecvt_utf8_base<char16_t>::extern_type *, std::__codecvt_utf8_base<char16_t>::extern_type *, std::__codecvt_utf8_base<char16_t>::extern_type *&)"),("std::__codecvt_abstract_base<char16_t, char, __mbstate_t>::result","(std::__codecvt_utf16_base<char16_t>::state_type &, std::__codecvt_utf16_base<char16_t>::extern_type *, std::__codecvt_utf16_base<char16_t>::extern_type *, std::__codecvt_utf16_base<char16_t>::extern_type *&)"),("std::__codecvt_abstract_base<char16_t, char, __mbstate_t>::result","(std::__codecvt_utf8_utf16_base<char16_t>::state_type &, std::__codecvt_utf8_utf16_base<char16_t>::extern_type *, std::__codecvt_utf8_utf16_base<char16_t>::extern_type *, std::__codecvt_utf8_utf16_base<char16_t>::extern_type *&)"),("std::__codecvt_abstract_base<char32_t, char, __mbstate_t>::result","(std::__codecvt_utf8_base<char32_t>::state_type &, std::__codecvt_utf8_base<char32_t>::extern_type *, std::__codecvt_utf8_base<char32_t>::extern_type *, std::__codecvt_utf8_base<char32_t>::extern_type *&)"),("std::__codecvt_abstract_base<char32_t, char, __mbstate_t>::result","(std::__codecvt_utf16_base<char32_t>::state_type &, std::__codecvt_utf16_base<char32_t>::extern_type *, std::__codecvt_utf16_base<char32_t>::extern_type *, std::__codecvt_utf16_base<char32_t>::extern_type *&)"),("std::__codecvt_abstract_base<char32_t, char, __mbstate_t>::result","(std::__codecvt_utf8_utf16_base<char32_t>::state_type &, std::__codecvt_utf8_utf16_base<char32_t>::extern_type *, std::__codecvt_utf8_utf16_base<char32_t>::extern_type *, std::__codecvt_utf8_utf16_base<char32_t>::extern_type *&)"),("std::__codecvt_abstract_base<wchar_t, char, __mbstate_t>::result","(std::__codecvt_utf8_base<wchar_t>::state_type &, std::__codecvt_utf8_base<wchar_t>::extern_type *, std::__codecvt_utf8_base<wchar_t>::extern_type *, std::__codecvt_utf8_base<wchar_t>::extern_type *&)"),("std::__codecvt_abstract_base<wchar_t, char, __mbstate_t>::result","(std::__codecvt_utf16_base<wchar_t>::state_type &, std::__codecvt_utf16_base<wchar_t>::extern_type *, std::__codecvt_utf16_base<wchar_t>::extern_type *, std::__codecvt_utf16_base<wchar_t>::extern_type *&)"),("std::__codecvt_abstract_base<wchar_t, char, __mbstate_t>::result","(std::__codecvt_utf8_utf16_base<wchar_t>::state_type &, std::__codecvt_utf8_utf16_base<wchar_t>::extern_type *, std::__codecvt_utf8_utf16_base<wchar_t>::extern_type *, std::__codecvt_utf8_utf16_base<wchar_t>::extern_type *&)")],
"do_in":[("std::__codecvt_abstract_base::result","(std::__codecvt_abstract_base::state_type &, const std::__codecvt_abstract_base::extern_type *, const std::__codecvt_abstract_base::extern_type *, const std::__codecvt_abstract_base::extern_type *&, std::__codecvt_abstract_base::intern_type *, std::__codecvt_abstract_base::intern_type *, std::__codecvt_abstract_base::intern_type *&)"),("std::codecvt::result","(std::codecvt::state_type &, const std::codecvt::extern_type *, const std::codecvt::extern_type *, const std::codecvt::extern_type *&, std::codecvt::intern_type *, std::codecvt::intern_type *, std::codecvt::intern_type *&)"),("std::__codecvt_abstract_base<char, char, __mbstate_t>::result","(std::codecvt<char, char, __mbstate_t>::state_type &, const std::codecvt<char, char, __mbstate_t>::extern_type *, const std::codecvt<char, char, __mbstate_t>::extern_type *, const std::codecvt<char, char, __mbstate_t>::extern_type *&, std::codecvt<char, char, __mbstate_t>::intern_type *, std::codecvt<char, char, __mbstate_t>::intern_type *, std::codecvt<char, char, __mbstate_t>::intern_type *&)"),("std::__codecvt_abstract_base<wchar_t, char, __mbstate_t>::result","(std::codecvt<wchar_t, char, __mbstate_t>::state_type &, const std::codecvt<wchar_t, char, __mbstate_t>::extern_type *, const std::codecvt<wchar_t, char, __mbstate_t>::extern_type *, const std::codecvt<wchar_t, char, __mbstate_t>::extern_type *&, std::codecvt<wchar_t, char, __mbstate_t>::intern_type *, std::codecvt<wchar_t, char, __mbstate_t>::intern_type *, std::codecvt<wchar_t, char, __mbstate_t>::intern_type *&)"),("std::__codecvt_abstract_base<char16_t, char, __mbstate_t>::result","(std::codecvt<char16_t, char, __mbstate_t>::state_type &, const std::codecvt<char16_t, char, __mbstate_t>::extern_type *, const std::codecvt<char16_t, char, __mbstate_t>::extern_type *, const std::codecvt<char16_t, char, __mbstate_t>::extern_type *&, std::codecvt<char16_t, char, __mbstate_t>::intern_type *, std::codecvt<char16_t, char, __mbstate_t>::intern_type *, std::codecvt<char16_t, char, __mbstate_t>::intern_type *&)"),("std::__codecvt_abstract_base<char32_t, char, __mbstate_t>::result","(std::codecvt<char32_t, char, __mbstate_t>::state_type &, const std::codecvt<char32_t, char, __mbstate_t>::extern_type *, const std::codecvt<char32_t, char, __mbstate_t>::extern_type *, const std::codecvt<char32_t, char, __mbstate_t>::extern_type *&, std::codecvt<char32_t, char, __mbstate_t>::intern_type *, std::codecvt<char32_t, char, __mbstate_t>::intern_type *, std::codecvt<char32_t, char, __mbstate_t>::intern_type *&)"),("std::__codecvt_abstract_base<char16_t, char, __mbstate_t>::result","(std::__codecvt_utf8_base<char16_t>::state_type &, const std::__codecvt_utf8_base<char16_t>::extern_type *, const std::__codecvt_utf8_base<char16_t>::extern_type *, const std::__codecvt_utf8_base<char16_t>::extern_type *&, std::__codecvt_utf8_base<char16_t>::intern_type *, std::__codecvt_utf8_base<char16_t>::intern_type *, std::__codecvt_utf8_base<char16_t>::intern_type *&)"),("std::__codecvt_abstract_base<char16_t, char, __mbstate_t>::result","(std::__codecvt_utf16_base<char16_t>::state_type &, const std::__codecvt_utf16_base<char16_t>::extern_type *, const std::__codecvt_utf16_base<char16_t>::extern_type *, const std::__codecvt_utf16_base<char16_t>::extern_type *&, std::__codecvt_utf16_base<char16_t>::intern_type *, std::__codecvt_utf16_base<char16_t>::intern_type *, std::__codecvt_utf16_base<char16_t>::intern_type *&)"),("std::__codecvt_abstract_base<char16_t, char, __mbstate_t>::result","(std::__codecvt_utf8_utf16_base<char16_t>::state_type &, const std::__codecvt_utf8_utf16_base<char16_t>::extern_type *, const std::__codecvt_utf8_utf16_base<char16_t>::extern_type *, const std::__codecvt_utf8_utf16_base<char16_t>::extern_type *&, std::__codecvt_utf8_utf16_base<char16_t>::intern_type *, std::__codecvt_utf8_utf16_base<char16_t>::intern_type *, std::__codecvt_utf8_utf16_base<char16_t>::intern_type *&)"),("std::__codecvt_abstract_base<char32_t, char, __mbstate_t>::result","(std::__codecvt_utf8_base<char32_t>::state_type &, const std::__codecvt_utf8_base<char32_t>::extern_type *, const std::__codecvt_utf8_base<char32_t>::extern_type *, const std::__codecvt_utf8_base<char32_t>::extern_type *&, std::__codecvt_utf8_base<char32_t>::intern_type *, std::__codecvt_utf8_base<char32_t>::intern_type *, std::__codecvt_utf8_base<char32_t>::intern_type *&)"),("std::__codecvt_abstract_base<char32_t, char, __mbstate_t>::result","(std::__codecvt_utf16_base<char32_t>::state_type &, const std::__codecvt_utf16_base<char32_t>::extern_type *, const std::__codecvt_utf16_base<char32_t>::extern_type *, const std::__codecvt_utf16_base<char32_t>::extern_type *&, std::__codecvt_utf16_base<char32_t>::intern_type *, std::__codecvt_utf16_base<char32_t>::intern_type *, std::__codecvt_utf16_base<char32_t>::intern_type *&)"),("std::__codecvt_abstract_base<char32_t, char, __mbstate_t>::result","(std::__codecvt_utf8_utf16_base<char32_t>::state_type &, const std::__codecvt_utf8_utf16_base<char32_t>::extern_type *, const std::__codecvt_utf8_utf16_base<char32_t>::extern_type *, const std::__codecvt_utf8_utf16_base<char32_t>::extern_type *&, std::__codecvt_utf8_utf16_base<char32_t>::intern_type *, std::__codecvt_utf8_utf16_base<char32_t>::intern_type *, std::__codecvt_utf8_utf16_base<char32_t>::intern_type *&)"),("std::__codecvt_abstract_base<wchar_t, char, __mbstate_t>::result","(std::__codecvt_utf8_base<wchar_t>::state_type &, const std::__codecvt_utf8_base<wchar_t>::extern_type *, const std::__codecvt_utf8_base<wchar_t>::extern_type *, const std::__codecvt_utf8_base<wchar_t>::extern_type *&, std::__codecvt_utf8_base<wchar_t>::intern_type *, std::__codecvt_utf8_base<wchar_t>::intern_type *, std::__codecvt_utf8_base<wchar_t>::intern_type *&)"),("std::__codecvt_abstract_base<wchar_t, char, __mbstate_t>::result","(std::__codecvt_utf16_base<wchar_t>::state_type &, const std::__codecvt_utf16_base<wchar_t>::extern_type *, const std::__codecvt_utf16_base<wchar_t>::extern_type *, const std::__codecvt_utf16_base<wchar_t>::extern_type *&, std::__codecvt_utf16_base<wchar_t>::intern_type *, std::__codecvt_utf16_base<wchar_t>::intern_type *, std::__codecvt_utf16_base<wchar_t>::intern_type *&)"),("std::__codecvt_abstract_base<wchar_t, char, __mbstate_t>::result","(std::__codecvt_utf8_utf16_base<wchar_t>::state_type &, const std::__codecvt_utf8_utf16_base<wchar_t>::extern_type *, const std::__codecvt_utf8_utf16_base<wchar_t>::extern_type *, const std::__codecvt_utf8_utf16_base<wchar_t>::extern_type *&, std::__codecvt_utf8_utf16_base<wchar_t>::intern_type *, std::__codecvt_utf8_utf16_base<wchar_t>::intern_type *, std::__codecvt_utf8_utf16_base<wchar_t>::intern_type *&)")],
"do_encoding":"int",
"do_always_noconv":"bool",
"do_length":"int",
"do_max_length":"int",
"open":[("std::__basic_file<char> *","(char const *, std::_Ios_Openmode, int)"),("std::basic_filebuf::__filebuf_type *","(char const *, std::_Ios_Openmode)"),("std::basic_filebuf::__filebuf_type *","(const std::string &, std::_Ios_Openmode)"),("void","(char const *, std::_Ios_Openmode)"),("void","(const std::string &, std::_Ios_Openmode)"),("void","(char const *, std::_Ios_Openmode)"),("void","(const std::string &, std::_Ios_Openmode)"),("void","(char const *, std::_Ios_Openmode)"),("void","(const std::string &, std::_Ios_Openmode)"),("std::basic_filebuf<_CharT, _Traits>::__filebuf_type *","(char const *, std::_Ios_Openmode)"),("std::messages_base::catalog","(conststd::basic_string<char> &, std::locale const&)"),("std::messages_base::catalog","(conststd::basic_string<char> &, std::locale const&, char const *)"),("std::messages<_CharT>::catalog","(conststd::basic_string<char> &, std::locale const&, char const *)")],
"sys_open":"std::__basic_file<char> *",
"is_open":"bool",
"fd":["int","()"],
"file":["std::__c_file *","()"],
"xsputn_2":["long","(char const *, long, char const *, long)"],
"_M_create_pback":["void","()"],
"_M_destroy_pback":["void","()"],
"_M_allocate_internal_buffer":"void",
"_M_destroy_internal_buffer":"void",
"_M_convert_to_external":"bool",
"_M_seek":[("std::basic_filebuf::pos_type","(std::basic_filebuf::off_type, std::_Ios_Seekdir, std::basic_filebuf::__state_type)"),("std::basic_filebuf<_CharT, _Traits>::pos_type","(std::basic_filebuf::off_type, std::_Ios_Seekdir, std::basic_filebuf::__state_type)")],
"_M_get_ext_pos":"int",
"_M_terminate_output":"bool",
"_M_set_buffer":["void","(long)"],
"_S_ref":"_Tp &",
"_S_ptr":"_Tp *",
"_M_head":[("_Head &","(_Head_base<_Idx, type-parameter-0-1, true> &)"),("const _Head &","(const _Head_base<_Idx, type-parameter-0-1, true> &)"),("_Head &","(_Head_base<_Idx, type-parameter-0-1, false> &)"),("const _Head &","(const _Head_base<_Idx, type-parameter-0-1, false> &)"),("_Head &","(_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...> &)"),("const _Head &","(const _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...> &)"),("_Head &","(_Tuple_impl<_Idx, type-parameter-0-1> &)"),("const _Head &","(const _Tuple_impl<_Idx, type-parameter-0-1> &)")],
"_M_tail":[("std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Inherited &","(_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...> &)"),("const std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Inherited &","(const _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...> &)")],
"__is_implicitly_default_constructible":["bool","()"],
"__is_explicitly_default_constructible":["bool","()"],
"__nothrow_default_constructible":["bool","()"],
"__eq":"bool",
"__less":"bool",
"_S_fun":[("_Tp *","(_Tp &)"),("void","(_Tp &&)")],
"_M_access":[("void *","()"),("void const*","()")],
"_M_get_pointer":["_Functor *","(const std::_Any_data &)"],
"_M_manager":"bool",
"_M_empty":["bool","()"],
"_M_invoke":["_Res","(const std::_Any_data &, _ArgTypes &&...)"],
"target_type":["const std::type_info &","()"],
"_M_date_formats":["void","(const _CharT **)"],
"_M_time_formats":["void","(const _CharT **)"],
"_M_date_time_formats":["void","(const _CharT **)"],
"_M_am_pm_format":["void","(const _CharT *)"],
"_M_am_pm":["void","(const _CharT **)"],
"_M_days":["void","(const _CharT **)"],
"_M_days_abbreviated":["void","(const _CharT **)"],
"_M_months":["void","(const _CharT **)"],
"_M_months_abbreviated":["void","(const _CharT **)"],
"_M_initialize_timepunct":"void",
"date_order":["std::time_base::dateorder","()"],
"get_time":["std::__cxx11::time_get::iter_type","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, std::ios_base &, ios_base::iostate &, tm *)"],
"get_date":["std::__cxx11::time_get::iter_type","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, std::ios_base &, ios_base::iostate &, tm *)"],
"get_weekday":["std::__cxx11::time_get::iter_type","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, std::ios_base &, ios_base::iostate &, tm *)"],
"get_monthname":["std::__cxx11::time_get::iter_type","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, std::ios_base &, ios_base::iostate &, tm *)"],
"get_year":["std::__cxx11::time_get::iter_type","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, std::ios_base &, ios_base::iostate &, tm *)"],
"do_date_order":[("std::time_base::dateorder","()"),("time_base::dateorder","()")],
"do_get_time":[("std::__cxx11::time_get::iter_type","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, std::ios_base &, ios_base::iostate &, tm *)"),("_InIter","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, std::ios_base &, ios_base::iostate &, tm *)")],
"do_get_date":[("std::__cxx11::time_get::iter_type","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, std::ios_base &, ios_base::iostate &, tm *)"),("_InIter","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, std::ios_base &, ios_base::iostate &, tm *)")],
"do_get_weekday":[("std::__cxx11::time_get::iter_type","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, std::ios_base &, ios_base::iostate &, tm *)"),("_InIter","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, std::ios_base &, ios_base::iostate &, tm *)")],
"do_get_monthname":[("std::__cxx11::time_get::iter_type","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, std::ios_base &, ios_base::iostate &, tm *)"),("_InIter","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, std::ios_base &, ios_base::iostate &, tm *)")],
"do_get_year":[("std::__cxx11::time_get::iter_type","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, std::ios_base &, ios_base::iostate &, tm *)"),("_InIter","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, std::ios_base &, ios_base::iostate &, tm *)")],
"_M_extract_num":[("std::__cxx11::time_get::iter_type","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, int &, int, int, std::size_t, std::ios_base &, ios_base::iostate &)"),("_InIter","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, int &, int, int, std::size_t, std::ios_base &, ios_base::iostate &)")],
"_M_extract_name":[("std::__cxx11::time_get::iter_type","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, int &, const _CharT **, std::size_t, std::ios_base &, ios_base::iostate &)"),("_InIter","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, int &, const _CharT **, std::size_t, std::ios_base &, ios_base::iostate &)")],
"_M_extract_wday_or_month":[("std::__cxx11::time_get::iter_type","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, int &, const _CharT **, std::size_t, std::ios_base &, ios_base::iostate &)"),("_InIter","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, int &, const _CharT **, std::size_t, std::ios_base &, ios_base::iostate &)")],
"_M_extract_via_format":[("std::__cxx11::time_get::iter_type","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, std::ios_base &, ios_base::iostate &, tm *, const _CharT *)"),("_InIter","(std::__cxx11::time_get::iter_type, std::__cxx11::time_get::iter_type, std::ios_base &, ios_base::iostate &, tm *, const _CharT *)")],
"_S_construct_pattern":["std::money_base::pattern","(char, char, char)"],
"curr_symbol":["std::__cxx11::moneypunct::string_type","()"],
"positive_sign":["std::__cxx11::moneypunct::string_type","()"],
"negative_sign":["std::__cxx11::moneypunct::string_type","()"],
"frac_digits":["int","()"],
"pos_format":["std::money_base::pattern","()"],
"neg_format":["std::money_base::pattern","()"],
"do_curr_symbol":["std::__cxx11::moneypunct::string_type","()"],
"do_positive_sign":["std::__cxx11::moneypunct::string_type","()"],
"do_negative_sign":["std::__cxx11::moneypunct::string_type","()"],
"do_frac_digits":["int","()"],
"do_pos_format":["std::money_base::pattern","()"],
"do_neg_format":["std::money_base::pattern","()"],
"_M_initialize_moneypunct":"void",
"do_open":[("std::messages_base::catalog","(conststd::basic_string<char> &, std::locale const&)"),("std::messages<_CharT>::catalog","(conststd::basic_string<char> &, std::locale const&)"),("std::messages<char>::catalog","(conststd::basic_string<char> &, std::locale const&)"),("std::messages<wchar_t>::catalog","(conststd::basic_string<char> &, std::locale const&)")],
"do_close":"void",
"_M_convert_to_char":["char *","(const std::__cxx11::messages::string_type &)"],
"_M_convert_from_char":["std::__cxx11::messages::string_type","(char *)"],
"gettext":["char *","(char const *)"],
"dgettext":["char *","(char const *, char const *)"],
"__dgettext":["char *","(char const *, char const *)"],
"dcgettext":["char *","(char const *, char const *, int)"],
"__dcgettext":["char *","(char const *, char const *, int)"],
"ngettext":["char *","(char const *, char const *, unsigned long)"],
"dngettext":["char *","(char const *, char const *, char const *, unsigned long)"],
"dcngettext":["char *","(char const *, char const *, char const *, unsigned long, int)"],
"textdomain":["char *","(char const *)"],
"bindtextdomain":["char *","(char const *, char const *)"],
"bind_textdomain_codeset":["char *","(char const *, char const *)"],
"_M_ptr":[("std::__uniq_ptr_impl::pointer &","()"),("std::__uniq_ptr_impl::pointer","()"),("_Tp *","()"),("const _Tp *","()"),("_Tp *","()"),("const _Tp *","()"),("_Tp *","()")],
"_M_deleter":[("_Dp &","()"),("const _Dp &","()")],
"release":[("std::__uniq_ptr_impl::pointer","()"),("std::unique_ptr::pointer","()"),("std::unique_ptr<type-parameter-0-0 [], type-parameter-0-1>::pointer","()"),("std::auto_ptr::element_type *","()"),("std::unique_lock::mutex_type *","()"),("std::shared_lock::mutex_type *","()")],
"get_deleter":[("std::unique_ptr::deleter_type &","()"),("const std::unique_ptr::deleter_type &","()"),("std::unique_ptr<type-parameter-0-0 [], type-parameter-0-1>::deleter_type &","()"),("const std::unique_ptr<type-parameter-0-0 [], type-parameter-0-1>::deleter_type &","()")],
"from_bytes":"std::__cxx11::wstring_convert::wide_string",
"to_bytes":"std::__cxx11::wstring_convert::byte_string",
"converted":["std::size_t","()"],
"_M_conv_get":["bool","()"],
"_M_conv_put":["bool","()"],
"resetiosflags":["std::_Resetiosflags","(ios_base::fmtflags)"],
"setiosflags":["std::_Setiosflags","(ios_base::fmtflags)"],
"setbase":["std::_Setbase","(int)"],
"setprecision":["std::_Setprecision","(int)"],
"setw":["std::_Setw","(int)"],
"_M_equal":"bool",
"_M_read":["void","()"],
"lowest":[("_Tp","()"),("bool","()"),("char","()"),("signed char","()"),("unsigned char","()"),("wchar_t","()"),("char16_t","()"),("char32_t","()"),("short","()"),("unsigned short","()"),("int","()"),("unsigned int","()"),("long","()"),("unsigned long","()"),("long long","()"),("unsigned long long","()"),("__int128","()"),("unsigned __int128","()"),("float","()"),("double","()"),("long double","()")],
"epsilon":[("_Tp","()"),("bool","()"),("char","()"),("signed char","()"),("unsigned char","()"),("wchar_t","()"),("char16_t","()"),("char32_t","()"),("short","()"),("unsigned short","()"),("int","()"),("unsigned int","()"),("long","()"),("unsigned long","()"),("long long","()"),("unsigned long long","()"),("__int128","()"),("unsigned __int128","()"),("float","()"),("double","()"),("long double","()")],
"round_error":[("_Tp","()"),("bool","()"),("char","()"),("signed char","()"),("unsigned char","()"),("wchar_t","()"),("char16_t","()"),("char32_t","()"),("short","()"),("unsigned short","()"),("int","()"),("unsigned int","()"),("long","()"),("unsigned long","()"),("long long","()"),("unsigned long long","()"),("__int128","()"),("unsigned __int128","()"),("float","()"),("double","()"),("long double","()")],
"infinity":[("_Tp","()"),("bool","()"),("char","()"),("signed char","()"),("unsigned char","()"),("wchar_t","()"),("char16_t","()"),("char32_t","()"),("short","()"),("unsigned short","()"),("int","()"),("unsigned int","()"),("long","()"),("unsigned long","()"),("long long","()"),("unsigned long long","()"),("__int128","()"),("unsigned __int128","()"),("float","()"),("double","()"),("long double","()")],
"quiet_NaN":[("_Tp","()"),("bool","()"),("char","()"),("signed char","()"),("unsigned char","()"),("wchar_t","()"),("char16_t","()"),("char32_t","()"),("short","()"),("unsigned short","()"),("int","()"),("unsigned int","()"),("long","()"),("unsigned long","()"),("long long","()"),("unsigned long long","()"),("__int128","()"),("unsigned __int128","()"),("float","()"),("double","()"),("long double","()")],
"signaling_NaN":[("_Tp","()"),("bool","()"),("char","()"),("signed char","()"),("unsigned char","()"),("wchar_t","()"),("char16_t","()"),("char32_t","()"),("short","()"),("unsigned short","()"),("int","()"),("unsigned int","()"),("long","()"),("unsigned long","()"),("long long","()"),("unsigned long long","()"),("__int128","()"),("unsigned __int128","()"),("float","()"),("double","()"),("long double","()")],
"denorm_min":[("_Tp","()"),("bool","()"),("char","()"),("signed char","()"),("unsigned char","()"),("wchar_t","()"),("char16_t","()"),("char32_t","()"),("short","()"),("unsigned short","()"),("int","()"),("unsigned int","()"),("long","()"),("unsigned long","()"),("long long","()"),("unsigned long long","()"),("__int128","()"),("unsigned __int128","()"),("float","()"),("double","()"),("long double","()")],
"_M_addr":[("void *","()"),("void const*","()"),("void *","()"),("void const*","()")],
"_M_transfer":"void",
"_M_reverse":["void","()"],
"_M_hook":["void","(std::__detail::_List_node_base *const)"],
"_M_unhook":["void","()"],
"_M_move_nodes":"void",
"_M_base":["std::__detail::_List_node_base *","()"],
"_M_valptr":[("_Tp *","()"),("const _Tp *","()"),("_Val *","()"),("const _Val *","()"),("_Tp *","()"),("const _Tp *","()"),("_Value *","()"),("const _Value *","()")],
"_S_distance":"std::size_t",
"_M_get_size":["std::size_t","()"],
"_M_set_size":["void","(std::size_t)"],
"_M_inc_size":["void","(std::size_t)"],
"_M_dec_size":["void","(std::size_t)"],
"_M_distance":["std::size_t","(const __detail::_List_node_base *, const __detail::_List_node_base *)"],
"_M_node_count":"std::size_t",
"_M_get_node":[("std::_Node_alloc_traits::pointer","()"),("std::_Rb_tree::_Link_type","()"),("std::_Fwd_list_base::_Node *","()")],
"_M_put_node":"void",
"_M_get_Node_allocator":[("std::__cxx11::_List_base::_Node_alloc_type &","()"),("const std::__cxx11::_List_base::_Node_alloc_type &","()"),("std::_Rb_tree::_Node_allocator &","()"),("const std::_Rb_tree::_Node_allocator &","()"),("std::_Fwd_list_base::_Node_alloc_type &","()"),("const std::_Fwd_list_base::_Node_alloc_type &","()")],
"_M_clear":"void",
"splice":"void",
"unique":[("std::__cxx11::list::__remove_return_type","()"),("std::list<_Tp, _Alloc>::__remove_return_type","()"),("bool","()"),("std::forward_list::__remove_return_type","()")],
"merge":"void",
"reverse":"void",
"sort":"void",
"_M_check_equal_allocators":["void","(list<_Tp, _Alloc> &)"],
"_M_resize_pos":[("std::__cxx11::list::const_iterator","(std::__cxx11::list::size_type &)"),("std::list<_Tp, _Alloc>::const_iterator","(std::__cxx11::list::size_type &)")],
"_M_move_assign":"void",
"_S_minimum":[("std::_Rb_tree_node_base::_Base_ptr","(std::_Rb_tree_node_base::_Base_ptr)"),("std::_Rb_tree_node_base::_Const_Base_ptr","(std::_Rb_tree_node_base::_Const_Base_ptr)"),("std::_Rb_tree::_Base_ptr","(std::_Rb_tree::_Base_ptr)"),("std::_Rb_tree::_Const_Base_ptr","(std::_Rb_tree::_Const_Base_ptr)")],
"_S_maximum":[("std::_Rb_tree_node_base::_Base_ptr","(std::_Rb_tree_node_base::_Base_ptr)"),("std::_Rb_tree_node_base::_Const_Base_ptr","(std::_Rb_tree_node_base::_Const_Base_ptr)"),("std::_Rb_tree::_Base_ptr","(std::_Rb_tree::_Base_ptr)"),("std::_Rb_tree::_Const_Base_ptr","(std::_Rb_tree::_Const_Base_ptr)")],
"_M_move_data":"void",
"_M_reset":[("void","()"),("shared_ptr<_Task_state_base<type-parameter-0-0 (type-parameter-0-1...)>>","()"),("shared_ptr<_Task_state_base<_Res (_Args...)>>","()"),("shared_ptr<__future_base::_Task_state_base<_Res (_Args...)>>","()"),("void","()"),("void","(std::__detail::_Prime_rehash_policy::_State)"),("void","()"),("void","(std::__detail::_Power2_rehash_policy::_State)"),("void","()")],
"_Rb_tree_increment":[("std::_Rb_tree_node_base *","(std::_Rb_tree_node_base *)"),("std::_Rb_tree_node_base const*","(std::_Rb_tree_node_base const*)")],
"_Rb_tree_decrement":[("std::_Rb_tree_node_base *","(std::_Rb_tree_node_base *)"),("std::_Rb_tree_node_base const*","(std::_Rb_tree_node_base const*)")],
"_Rb_tree_insert_and_rebalance":["void","(const bool, std::_Rb_tree_node_base *, std::_Rb_tree_node_base *, std::_Rb_tree_node_base &)"],
"_Rb_tree_rebalance_for_erase":["std::_Rb_tree_node_base *","(std::_Rb_tree_node_base *const, std::_Rb_tree_node_base &)"],
"_M_extract":["std::_Rb_tree::_Base_ptr","()"],
"_M_destroy_node":["void","(std::_Rb_tree::_Link_type)"],
"_M_drop_node":["void","(std::_Rb_tree::_Link_type)"],
"_M_root":[("std::_Rb_tree::_Base_ptr &","()"),("std::_Rb_tree::_Const_Base_ptr","()")],
"_M_leftmost":[("std::_Rb_tree::_Base_ptr &","()"),("std::_Rb_tree::_Const_Base_ptr","()")],
"_M_rightmost":[("std::_Rb_tree::_Base_ptr &","()"),("std::_Rb_tree::_Const_Base_ptr","()")],
"_M_mbegin":["std::_Rb_tree::_Link_type","()"],
"_M_begin":[("std::_Rb_tree::_Link_type","()"),("std::_Rb_tree::_Const_Link_type","()"),("std::_Hashtable::__node_ptr","()")],
"_M_end":[("std::_Rb_tree::_Base_ptr","()"),("std::_Rb_tree::_Const_Base_ptr","()")],
"_S_key":"const _Key &",
"_S_left":[("std::_Rb_tree::_Link_type","(std::_Rb_tree::_Base_ptr)"),("std::_Rb_tree::_Const_Link_type","(std::_Rb_tree::_Const_Base_ptr)")],
"_S_right":[("std::_Rb_tree::_Link_type","(std::_Rb_tree::_Base_ptr)"),("std::_Rb_tree::_Const_Link_type","(std::_Rb_tree::_Const_Base_ptr)")],
"_M_get_insert_unique_pos":[("pair<std::_Rb_tree::_Base_ptr, std::_Rb_tree::_Base_ptr>","(const std::_Rb_tree::key_type &)"),("pair<std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Base_ptr, std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Base_ptr>","(const std::_Rb_tree::key_type &)")],
"_M_get_insert_equal_pos":[("pair<std::_Rb_tree::_Base_ptr, std::_Rb_tree::_Base_ptr>","(const std::_Rb_tree::key_type &)"),("pair<std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Base_ptr, std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Base_ptr>","(const std::_Rb_tree::key_type &)")],
"_M_get_insert_hint_unique_pos":[("pair<std::_Rb_tree::_Base_ptr, std::_Rb_tree::_Base_ptr>","(std::_Rb_tree::const_iterator, const std::_Rb_tree::key_type &)"),("pair<std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Base_ptr, std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Base_ptr>","(std::_Rb_tree::const_iterator, const std::_Rb_tree::key_type &)")],
"_M_get_insert_hint_equal_pos":[("pair<std::_Rb_tree::_Base_ptr, std::_Rb_tree::_Base_ptr>","(std::_Rb_tree::const_iterator, const std::_Rb_tree::key_type &)"),("pair<std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Base_ptr, std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Base_ptr>","(std::_Rb_tree::const_iterator, const std::_Rb_tree::key_type &)")],
"_M_insert_node":[("std::_Rb_tree::iterator","(std::_Rb_tree::_Base_ptr, std::_Rb_tree::_Base_ptr, std::_Rb_tree::_Link_type)"),("std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator","(std::_Rb_tree::_Base_ptr, std::_Rb_tree::_Base_ptr, std::_Rb_tree::_Link_type)")],
"_M_insert_lower_node":[("std::_Rb_tree::iterator","(std::_Rb_tree::_Base_ptr, std::_Rb_tree::_Link_type)"),("std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator","(std::_Rb_tree::_Base_ptr, std::_Rb_tree::_Link_type)")],
"_M_insert_equal_lower_node":[("std::_Rb_tree::iterator","(std::_Rb_tree::_Link_type)"),("std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator","(std::_Rb_tree::_Link_type)")],
"_M_copy":["std::_Rb_tree::_Link_type","(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc> &)"],
"_M_lower_bound":[("std::_Rb_tree::iterator","(std::_Rb_tree::_Link_type, std::_Rb_tree::_Base_ptr, const _Key &)"),("std::_Rb_tree::const_iterator","(std::_Rb_tree::_Const_Link_type, std::_Rb_tree::_Const_Base_ptr, const _Key &)"),("std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator","(std::_Rb_tree::_Link_type, std::_Rb_tree::_Base_ptr, const _Key &)"),("std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator","(std::_Rb_tree::_Const_Link_type, std::_Rb_tree::_Const_Base_ptr, const _Key &)")],
"_M_upper_bound":[("std::_Rb_tree::iterator","(std::_Rb_tree::_Link_type, std::_Rb_tree::_Base_ptr, const _Key &)"),("std::_Rb_tree::const_iterator","(std::_Rb_tree::_Const_Link_type, std::_Rb_tree::_Const_Base_ptr, const _Key &)"),("std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator","(std::_Rb_tree::_Link_type, std::_Rb_tree::_Base_ptr, const _Key &)"),("std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator","(std::_Rb_tree::_Const_Link_type, std::_Rb_tree::_Const_Base_ptr, const _Key &)")],
"key_comp":[("_Compare","()"),("std::map::key_compare","()"),("std::multimap::key_compare","()"),("std::set::key_compare","()"),("std::multiset::key_compare","()")],
"_M_erase_aux":"void",
"lower_bound":[("std::_Rb_tree::iterator","(const std::_Rb_tree::key_type &)"),("std::_Rb_tree::const_iterator","(const std::_Rb_tree::key_type &)"),("std::map::iterator","(const std::map::key_type &)"),("std::map::const_iterator","(const std::map::key_type &)"),("std::multimap::iterator","(const std::multimap::key_type &)"),("std::multimap::const_iterator","(const std::multimap::key_type &)"),("std::set::iterator","(const std::set::key_type &)"),("std::set::const_iterator","(const std::set::key_type &)"),("std::multiset::iterator","(const std::multiset::key_type &)"),("std::multiset::const_iterator","(const std::multiset::key_type &)")],
"upper_bound":[("std::_Rb_tree::iterator","(const std::_Rb_tree::key_type &)"),("std::_Rb_tree::const_iterator","(const std::_Rb_tree::key_type &)"),("std::map::iterator","(const std::map::key_type &)"),("std::map::const_iterator","(const std::map::key_type &)"),("std::multimap::iterator","(const std::multimap::key_type &)"),("std::multimap::const_iterator","(const std::multimap::key_type &)"),("std::set::iterator","(const std::set::key_type &)"),("std::set::const_iterator","(const std::set::key_type &)"),("std::multiset::iterator","(const std::multiset::key_type &)"),("std::multiset::const_iterator","(const std::multiset::key_type &)")],
"equal_range":[("pair<std::_Rb_tree::iterator, std::_Rb_tree::iterator>","(const std::_Rb_tree::key_type &)"),("pair<std::_Rb_tree::const_iterator, std::_Rb_tree::const_iterator>","(const std::_Rb_tree::key_type &)"),("pair<std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator, std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator>","(const _Key &)"),("pair<std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator, std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator>","(const _Key &)"),("std::pair<iterator, iterator>","(const std::map::key_type &)"),("std::pair<const_iterator, const_iterator>","(const std::map::key_type &)"),("std::pair<iterator, iterator>","(const std::multimap::key_type &)"),("std::pair<const_iterator, const_iterator>","(const std::multimap::key_type &)"),("std::pair<iterator, iterator>","(const std::set::key_type &)"),("std::pair<const_iterator, const_iterator>","(const std::set::key_type &)"),("std::pair<iterator, iterator>","(const std::multiset::key_type &)"),("std::pair<const_iterator, const_iterator>","(const std::multiset::key_type &)"),("std::pair<iterator, iterator>","(const std::_Hashtable::key_type &)"),("std::pair<const_iterator, const_iterator>","(const std::_Hashtable::key_type &)"),("pair<std::_Hashtable::iterator, std::_Hashtable::iterator>","(const std::_Hashtable::key_type &)"),("pair<std::_Hashtable::const_iterator, std::_Hashtable::const_iterator>","(const std::_Hashtable::key_type &)"),("std::pair<iterator, iterator>","(const std::unordered_map::key_type &)"),("std::pair<const_iterator, const_iterator>","(const std::unordered_map::key_type &)"),("std::pair<iterator, iterator>","(const std::unordered_multimap::key_type &)"),("std::pair<const_iterator, const_iterator>","(const std::unordered_multimap::key_type &)"),("std::pair<iterator, iterator>","(const std::unordered_set::key_type &)"),("std::pair<const_iterator, const_iterator>","(const std::unordered_set::key_type &)"),("std::pair<iterator, iterator>","(const std::unordered_multiset::key_type &)"),("std::pair<const_iterator, const_iterator>","(const std::unordered_multiset::key_type &)")],
"__rb_verify":"bool",
"_Rb_tree_black_count":["unsigned int","(std::_Rb_tree_node_base const*, std::_Rb_tree_node_base const*)"],
"value_comp":[("std::map::value_compare","()"),("std::multimap::value_compare","()"),("std::set::value_compare","()"),("std::multiset::value_compare","()")],
"align":["void *","(std::size_t, std::size_t, void *&, std::size_t &)"],
"__throw_concurrence_lock_error":["void","()"],
"__throw_concurrence_unlock_error":["void","()"],
"__throw_concurrence_broadcast_error":["void","()"],
"__throw_concurrence_wait_error":["void","()"],
"lock":[("void","()"),("__shared_ptr<_Tp, _Lp>","()"),("shared_ptr<_Tp>","()"),("void","()")],
"unlock":"void",
"gthread_mutex":["__gthread_mutex_t *","()"],
"gthread_recursive_mutex":["__gthread_recursive_mutex_t *","()"],
"broadcast":["void","()"],
"wait":[("void","(__gnu_cxx::__mutex *)"),("void","(std::mutex &)"),("void","(unique_lock<std::mutex> &)"),("std::__future_base::_Result_base &","()"),("void","()")],
"wait_recursive":["void","(__gnu_cxx::__recursive_mutex *)"],
"__throw_bad_weak_ptr":["void","()"],
"_M_get_deleter":"void *",
"_M_add_ref_copy":"void",
"_M_add_ref_lock":["void","()"],
"_M_add_ref_lock_nothrow":"bool",
"_M_weak_add_ref":"void",
"_M_weak_release":"void",
"_M_get_use_count":"long",
"_M_del":["_Deleter &","()"],
"_M_alloc":"_Alloc &",
"_S_ti":["const std::type_info &","()"],
"_S_eq":["bool","(const std::type_info &)"],
"_M_unique":["bool","()"],
"_M_less":"bool",
"use_count":"long",
"expired":["bool","()"],
"shared_from_this":[("__shared_ptr<_Tp, _Lp>","()"),("__shared_ptr<const _Tp, _Lp>","()"),("shared_ptr<_Tp>","()"),("shared_ptr<const _Tp>","()")],
"weak_from_this":[("__weak_ptr<_Tp, _Lp>","()"),("__weak_ptr<const _Tp, _Lp>","()"),("weak_ptr<_Tp>","()"),("weak_ptr<const _Tp>","()")],
"__enable_shared_from_this_base":[("const __enable_shared_from_this<_Tp, _Lp> *","(const __shared_count<_Lp> &, const __enable_shared_from_this<_Tp, _Lp> *)"),("const enable_shared_from_this<_Tp> *","(const __shared_count<> &, const enable_shared_from_this<_Tp> *)")],
"__cmpexch_failure_order2":["std::memory_order","(std::memory_order)"],
"__cmpexch_failure_order":["std::memory_order","(std::memory_order)"],
"atomic_thread_fence":["void","(std::memory_order)"],
"atomic_signal_fence":["void","(std::memory_order)"],
"test_and_set":"bool",
"_S_init":["std::__atomic_flag_data_type","(bool)"],
"is_lock_free":"bool",
"store":"void",
"load":[("std::__atomic_base::__int_type","(std::memory_order)"),("std::__atomic_base<type-parameter-0-0 *>::__pointer_type","(std::memory_order)"),("bool","(std::memory_order)"),("_Tp","(std::memory_order)"),("std::atomic<type-parameter-0-0 *>::__pointer_type","(std::memory_order)")],
"exchange":[("std::__atomic_base::__int_type","(std::__atomic_base::__int_type, std::memory_order)"),("std::__atomic_base<type-parameter-0-0 *>::__pointer_type","(std::__atomic_base<type-parameter-0-0 *>::__pointer_type, std::memory_order)"),("bool","(bool, std::memory_order)"),("_Tp","(_Tp, std::memory_order)"),("std::atomic<type-parameter-0-0 *>::__pointer_type","(std::atomic<type-parameter-0-0 *>::__pointer_type, std::memory_order)")],
"compare_exchange_weak":"bool",
"compare_exchange_strong":"bool",
"fetch_add":[("std::__atomic_base::__int_type","(std::__atomic_base::__int_type, std::memory_order)"),("std::__atomic_base<type-parameter-0-0 *>::__pointer_type","(std::ptrdiff_t, std::memory_order)"),("std::atomic<type-parameter-0-0 *>::__pointer_type","(std::ptrdiff_t, std::memory_order)")],
"fetch_sub":[("std::__atomic_base::__int_type","(std::__atomic_base::__int_type, std::memory_order)"),("std::__atomic_base<type-parameter-0-0 *>::__pointer_type","(std::ptrdiff_t, std::memory_order)"),("std::atomic<type-parameter-0-0 *>::__pointer_type","(std::ptrdiff_t, std::memory_order)")],
"fetch_and":"std::__atomic_base::__int_type",
"fetch_or":"std::__atomic_base::__int_type",
"fetch_xor":"std::__atomic_base::__int_type",
"_M_type_size":"std::ptrdiff_t",
"declare_reachable":["void","(void *)"],
"declare_no_pointers":["void","(char *, std::size_t)"],
"undeclare_no_pointers":["void","(char *, std::size_t)"],
"get_pointer_safety":["std::pointer_safety","()"],
"_M_copy_data":["void","(const std::_Vector_base::_Vector_impl_data &)"],
"_M_allocate":[("std::_Vector_base::pointer","(std::size_t)"),("std::_Bvector_base::_Bit_pointer","(std::size_t)")],
"_M_deallocate":"void",
"_M_create_storage":["void","(std::size_t)"],
"_S_nothrow_relocate":"bool",
"_S_use_relocate":["bool","()"],
"_S_do_relocate":"std::vector::pointer",
"_S_relocate":["std::vector::pointer","(std::vector::pointer, std::vector::pointer, std::vector::pointer, std::vector::_Tp_alloc_type &)"],
"_M_val":["std::vector::value_type &","()"],
"_M_insert_rval":"std::vector::iterator",
"_M_emplace_aux":["std::vector::iterator","(std::vector::const_iterator, std::vector::value_type &&)"],
"_M_check_len":[("std::vector::size_type","(std::vector::size_type, char const *)"),("std::vector<bool, type-parameter-0-0>::size_type","(std::vector<bool, type-parameter-0-0>::size_type, char const *)")],
"_M_bump_up":["void","()"],
"_M_bump_down":["void","()"],
"_M_incr":"void",
"_M_end_addr":["std::_Bit_type *","()"],
"_M_get_Bit_allocator":[("std::_Bvector_base::_Bit_alloc_type &","()"),("const std::_Bvector_base::_Bit_alloc_type &","()")],
"_S_nword":["std::size_t","(std::size_t)"],
"_M_copy_aligned":["std::vector<bool, type-parameter-0-0>::iterator","(std::vector<bool, type-parameter-0-0>::const_iterator, std::vector<bool, type-parameter-0-0>::const_iterator, std::vector<bool, type-parameter-0-0>::iterator)"],
"_M_initialize":"void",
"_M_initialize_value":["void","(bool)"],
"_M_reallocate":"void",
"__fill_bvector":["void","(std::_Bit_type *, unsigned int, unsigned int, bool)"],
"push":"void",
"pop":"void",
"top":[("std::priority_queue::const_reference","()"),("std::stack::reference","()"),("std::stack::const_reference","()")],
"__valarray_release_memory":["void","(void *)"],
"start":"std::size_t",
"stride":[("std::size_t","()"),("valarray<std::size_t>","()")],
"operator%=":[("void","(const valarray<_Tp> &)"),("valarray<_Tp> &","(const _Tp &)"),("valarray<_Tp> &","(const valarray<_Tp> &)"),("void","(const valarray<_Tp> &)"),("valarray<_Tp> &","(const _Tp &)"),("valarray<_Tp> &","(const valarray<_Tp> &)")],
"sum":[("_Tp","()"),("std::_Expr::value_type","()"),("_Tp","()")],
"shift":[("valarray<_Tp>","(int)"),("valarray<std::_Expr::value_type>","(int)"),("valarray<_Tp>","(int)")],
"cshift":[("valarray<_Tp>","(int)"),("valarray<std::_Expr::value_type>","(int)"),("valarray<_Tp>","(int)")],
"apply":[("_Expr<_ValFunClos<_ValArray, _Tp>, _Tp>","(_Tp (*)(_Tp))"),("_Expr<_RefFunClos<_ValArray, _Tp>, _Tp>","(_Tp (*)(const _Tp &))"),("valarray<std::_Expr::value_type>","(std::_Expr::value_type (*)(const std::_Expr::value_type &))"),("valarray<std::_Expr::value_type>","(std::_Expr::value_type (*)(std::_Expr::value_type))"),("valarray<_Tp>","(_Tp (*)(const _Tp &))"),("valarray<_Tp>","(_Tp (*)(_Tp))"),("_Expr<_ValFunClos<_ValArray, _Tp>, _Tp>","(_Tp (*)(_Tp))"),("_Expr<_RefFunClos<_ValArray, _Tp>, _Tp>","(_Tp (*)(const _Tp &))")],
"_M_increment_use":["void","()"],
"_M_decrement_use":["std::size_t","()"],
"atomic_flag_test_and_set_explicit":"bool",
"atomic_flag_clear_explicit":"void",
"atomic_flag_test_and_set":"bool",
"atomic_flag_clear":"void",
"zero":[("_Rep","()"),("duration<_Rep, _Period>","()")],
"_S_gcd":["intmax_t","(intmax_t, intmax_t)"],
"time_since_epoch":["std::chrono::time_point::duration","()"],
"now":[("std::chrono::_V2::system_clock::time_point","()"),("std::chrono::_V2::steady_clock::time_point","()")],
"to_time_t":["std::time_t","(const std::chrono::_V2::system_clock::time_point &)"],
"from_time_t":["std::chrono::_V2::system_clock::time_point","(std::time_t)"],
"operator""h":["chrono::duration<long double, ratio<3600, 1>>","(long double)"],
"operator""min":["chrono::duration<long double, ratio<60, 1>>","(long double)"],
"operator""ms":["chrono::duration<long double, milli>","(long double)"],
"operator""us":["chrono::duration<long double, micro>","(long double)"],
"operator""ns":["chrono::duration<long double, nano>","(long double)"],
"try_lock":"bool",
"native_handle":[("std::mutex::native_handle_type","()"),("__gthread_cond_t *","()"),("std::condition_variable::native_handle_type","()"),("std::recursive_mutex::native_handle_type","()"),("std::timed_mutex::native_handle_type","()"),("std::recursive_timed_mutex::native_handle_type","()"),("std::thread::native_handle_type","()"),("void *","()")],
"wait_until":"void",
"notify_one":"void",
"notify_all":"void",
"owns_lock":"bool",
"mutex":[("std::unique_lock::mutex_type *","()"),("std::shared_lock::mutex_type *","()")],
"notify_all_at_thread_exit":["void","(std::condition_variable &, unique_lock<std::mutex>)"],
"_M_transfer_after":["std::_Fwd_list_node_base *","(std::_Fwd_list_node_base *, std::_Fwd_list_node_base *)"],
"_M_reverse_after":["void","()"],
"_M_next":[("std::_Fwd_list_iterator::_Self","()"),("std::_Fwd_list_const_iterator::_Self","()"),("_Hash_node<_Value, _Cache_hash_code> *","()")],
"_M_erase_after":"std::_Fwd_list_node_base *",
"before_begin":[("std::forward_list::iterator","()"),("std::forward_list::const_iterator","()")],
"cbefore_begin":["std::forward_list::const_iterator","()"],
"insert_after":[("std::forward_list::iterator","(std::forward_list::const_iterator, const _Tp &)"),("std::forward_list::iterator","(std::forward_list::const_iterator, _Tp &&)"),("std::forward_list::iterator","(std::forward_list::const_iterator, std::forward_list::size_type, const _Tp &)"),("std::forward_list::iterator","(std::forward_list::const_iterator, std::initializer_list<_Tp>)"),("std::forward_list<_Tp, _Alloc>::iterator","(std::forward_list::const_iterator, std::forward_list::size_type, const _Tp &)")],
"erase_after":"std::forward_list::iterator",
"splice_after":"void",
"_M_splice_after":[("std::forward_list::iterator","(std::forward_list::const_iterator, std::forward_list::const_iterator, std::forward_list::const_iterator)"),("std::forward_list<_Tp, _Alloc>::iterator","(std::forward_list::const_iterator, std::forward_list::const_iterator, std::forward_list::const_iterator)")],
"_M_default_insert_after":"void",
"_M_assign_n":"void",
"_M_timedlock":"bool",
"_M_clocklock":"bool",
"__once_proxy":["void","()"],
"_M_futex_wait_until":["bool","(unsigned int *, unsigned int, bool, chrono::seconds, chrono::nanoseconds)"],
"_M_futex_wait_until_steady":["bool","(unsigned int *, unsigned int, bool, chrono::seconds, chrono::nanoseconds)"],
"_M_futex_notify_all":["void","(unsigned int *)"],
"_M_load":["unsigned int","(std::memory_order)"],
"_M_load_and_test_until":["unsigned int","(unsigned int, unsigned int, bool, std::memory_order, bool, chrono::seconds, chrono::nanoseconds)"],
"_M_load_and_test_until_steady":["unsigned int","(unsigned int, unsigned int, bool, std::memory_order, bool, chrono::seconds, chrono::nanoseconds)"],
"_M_load_and_test":["unsigned int","(unsigned int, unsigned int, bool, std::memory_order)"],
"_M_load_when_not_equal":["unsigned int","(unsigned int, std::memory_order)"],
"_M_load_when_equal":["void","(unsigned int, std::memory_order)"],
"_M_store_notify_all":["void","(unsigned int, std::memory_order)"],
"_M_run":"void",
"joinable":["bool","()"],
"join":["void","()"],
"detach":["void","()"],
"get_id":[("std::thread::id","()"),("thread::id","()")],
"hardware_concurrency":["unsigned int","()"],
"_M_start_thread":["void","(std::thread::_State_ptr, void (*)())"],
"yield":["void","()"],
"future_category":["const std::_V2::error_category &","()"],
"_M_value":["_Res &","()"],
"_M_set":"void",
"_M_set_result":["void","(function<std::__future_base::_State_baseV2::_Ptr_type ()>, bool)"],
"_M_set_delayed_result":["void","(function<std::__future_base::_State_baseV2::_Ptr_type ()>, weak_ptr<std::__future_base::_State_baseV2>)"],
"_M_break_promise":["void","(std::__future_base::_State_baseV2::_Ptr_type)"],
"_M_set_retrieved_flag":["void","()"],
"_M_complete_async":"void",
"_M_is_deferred_future":"bool",
"_S_run":["void","(void *)"],
"valid":"bool",
"_M_get_result":["std::__basic_future::__result_type","()"],
"share":[("shared_future<_Res>","()"),("shared_future<_Res &>","()"),("shared_future<void>","()"),("shared_future<_Res>","()"),("shared_future<_Res &>","()"),("shared_future<void>","()")],
"get_future":[("future<_Res>","()"),("future<_Res &>","()"),("future<void>","()"),("future<_Res>","()")],
"set_value":"void",
"set_exception":"void",
"set_value_at_thread_exit":"void",
"set_exception_at_thread_exit":"void",
"_M_state":[("std::promise::_State &","()"),("std::promise<type-parameter-0-0 &>::_State &","()"),("std::promise<void>::_State &","()"),("std::__detail::_Prime_rehash_policy::_State","()"),("std::__detail::_Power2_rehash_policy::_State","()")],
"_M_run_delayed":"void",
"make_ready_at_thread_exit":["void","(_ArgTypes...)"],
"_M_join":["void","()"],
"__calc":"_Tp",
"seed":"void",
"discard":"void",
"_M_gen_rand":"void",
"entropy":["double","()"],
"_M_init_pretr1":["void","(const std::string &)"],
"_M_fini":["void","()"],
"_M_getval":["std::random_device::result_type","()"],
"_M_getval_pretr1":["std::random_device::result_type","()"],
"_M_getentropy":["double","()"],
"mean":[("_RealType","()"),("double","()")],
"stddev":"_RealType",
"m":"_RealType",
"s":"_RealType",
"alpha":"_RealType",
"beta":"_RealType",
"n":"_RealType",
"p":"double",
"t":"_IntType",
"k":"_IntType",
"lambda":"_RealType",
"probabilities":"std::vector<double>",
"intervals":"std::vector<_RealType>",
"densities":"std::vector<double>",
"__throw_regex_error":"void",
"_M_has_alt":["bool","()"],
"_M_opcode":["std::__detail::_Opcode","()"],
"_M_matches":["bool","(_Char_type)"],
"_M_get_matcher":[("std::__detail::_State::_MatcherT &","()"),("const std::__detail::_State::_MatcherT &","()")],
"_M_options":["std::__detail::_NFA_base::_FlagT","()"],
"_M_start":["std::__detail::_StateIdT","()"],
"_M_sub_count":["std::__detail::_NFA_base::_SizeT","()"],
"_M_insert_accept":["std::__detail::_StateIdT","()"],
"_M_insert_alt":["std::__detail::_StateIdT","(std::__detail::_StateIdT, std::__detail::_StateIdT, bool)"],
"_M_insert_repeat":["std::__detail::_StateIdT","(std::__detail::_StateIdT, std::__detail::_StateIdT, bool)"],
"_M_insert_matcher":["std::__detail::_StateIdT","(std::__detail::_NFA::_MatcherT)"],
"_M_insert_subexpr_begin":["std::__detail::_StateIdT","()"],
"_M_insert_subexpr_end":["std::__detail::_StateIdT","()"],
"_M_insert_backref":"std::__detail::_StateIdT",
"_M_insert_line_begin":["std::__detail::_StateIdT","()"],
"_M_insert_line_end":["std::__detail::_StateIdT","()"],
"_M_insert_word_bound":["std::__detail::_StateIdT","(bool)"],
"_M_insert_lookahead":["std::__detail::_StateIdT","(std::__detail::_StateIdT, bool)"],
"_M_insert_dummy":["std::__detail::_StateIdT","()"],
"_M_insert_state":["std::__detail::_StateIdT","(std::__detail::_NFA::_StateT)"],
"_M_eliminate_dummy":"void",
"_M_clone":"_StateSeq<_TraitsT>",
"_M_find_escape":["char const *","(char)"],
"_M_is_ecma":["bool","()"],
"_M_is_basic":["bool","()"],
"_M_is_extended":["bool","()"],
"_M_is_grep":["bool","()"],
"_M_is_awk":["bool","()"],
"_M_advance":"void",
"_M_get_token":["std::__detail::_ScannerBase::_TokenT","()"],
"_M_get_value":["const std::__detail::_Scanner::_StringT &","()"],
"_M_scan_normal":"void",
"_M_scan_in_bracket":"void",
"_M_scan_in_brace":"void",
"_M_eat_escape_ecma":"void",
"_M_eat_escape_posix":"void",
"_M_eat_escape_awk":"void",
"_M_eat_class":"void",
"_M_get_nfa":["shared_ptr<const std::__detail::_Compiler::_RegexT>","()"],
"_M_match_token":"bool",
"_M_disjunction":"void",
"_M_alternative":"void",
"_M_term":"bool",
"_M_assertion":"bool",
"_M_quantifier":"bool",
"_M_atom":"bool",
"_M_bracket_expression":"bool",
"_M_cur_int_value":"int",
"_M_try_char":"bool",
"_M_pop":["std::__detail::_Compiler::_StateSeqT","()"],
"_M_translate":[("std::__detail::_RegexTranslatorBase::_CharT","(std::__detail::_RegexTranslatorBase::_CharT)"),("std::__detail::_RegexTranslator<type-parameter-0-0, false, false>::_CharT","(std::__detail::_RegexTranslator<type-parameter-0-0, false, false>::_CharT)")],
"_M_match_range":"bool",
"_M_in_range_icase":["bool","(std::__detail::_RegexTranslatorBase::_CharT, std::__detail::_RegexTranslatorBase::_CharT, std::__detail::_RegexTranslatorBase::_CharT)"],
"_M_apply":"bool",
"_M_add_char":["void","(std::__detail::_BracketMatcher::_CharT)"],
"_M_add_collate_element":["std::__detail::_BracketMatcher::_StringT","(const std::__detail::_BracketMatcher::_StringT &)"],
"_M_add_equivalence_class":["void","(const std::__detail::_BracketMatcher::_StringT &)"],
"_M_add_character_class":["void","(const std::__detail::_BracketMatcher::_StringT &, bool)"],
"_M_make_range":["void","(std::__detail::_BracketMatcher::_CharT, std::__detail::_BracketMatcher::_CharT)"],
"_M_ready":["void","()"],
"_M_make_cache":"void",
"translate":["std::__cxx11::regex_traits::char_type","(std::__cxx11::regex_traits::char_type)"],
"translate_nocase":["std::__cxx11::regex_traits::char_type","(std::__cxx11::regex_traits::char_type)"],
"mark_count":["unsigned int","()"],
"ready":["bool","()"],
"position":["std::__cxx11::match_results::difference_type","(std::__cxx11::match_results::size_type)"],
"prefix":["std::__cxx11::match_results::const_reference","()"],
"suffix":["std::__cxx11::match_results::const_reference","()"],
"format":["std::__cxx11::match_results::string_type","(const std::__cxx11::match_results::char_type *, std::__cxx11::match_results::match_flag_type)"],
"_M_resize":["void","(unsigned int)"],
"_M_establish_failed_match":["void","(_Bi_iter)"],
"_M_unmatched_sub":[("std::__cxx11::match_results::const_reference","()"),("sub_match<_Bi_iter> &","()")],
"_M_prefix":[("std::__cxx11::match_results::const_reference","()"),("sub_match<_Bi_iter> &","()")],
"_M_suffix":[("std::__cxx11::match_results::const_reference","()"),("sub_match<_Bi_iter> &","()")],
"_M_current_match":["const std::__cxx11::regex_token_iterator::value_type &","()"],
"_M_end_of_seq":["bool","()"],
"_M_normalize_result":["void","()"],
"_M_match":["bool","()"],
"_M_search_from_first":["bool","()"],
"_M_search":"bool",
"_M_rep_once_more":"void",
"_M_handle_repeat":"void",
"_M_handle_subexpr_begin":"void",
"_M_handle_subexpr_end":"void",
"_M_handle_line_begin_assertion":"void",
"_M_handle_line_end_assertion":"void",
"_M_handle_word_boundary":"void",
"_M_handle_subexpr_lookahead":"void",
"_M_handle_match":"void",
"_M_handle_backref":"void",
"_M_handle_accept":"void",
"_M_handle_alternative":"void",
"_M_dfs":"void",
"_M_main":["bool","(std::__detail::_Executor::_Match_mode)"],
"_M_main_dispatch":"bool",
"_M_is_word":["bool","(std::__detail::_Executor::_CharT)"],
"_M_at_begin":["bool","()"],
"_M_at_end":["bool","()"],
"_M_word_boundary":"bool",
"_M_lookahead":"bool",
"_M_visited":"bool",
"_M_queue":"void",
"_M_get_sol_pos":"_BiIter *",
"_S_outermost":[("std::__outermost_type::type &","(_Alloc &)"),("std::__base::type &","(_Alloc &)")],
"_M_tie":[("tuple<>","()"),("tuple<const _InnerHead &, const _InnerTail &...>","()"),("tuple<const _OuterAlloc &, const _InnerAllocs &...>","()")],
"inner_allocator":[("std::scoped_allocator_adaptor::inner_allocator_type &","()"),("const std::scoped_allocator_adaptor::inner_allocator_type &","()")],
"outer_allocator":[("std::scoped_allocator_adaptor::outer_allocator_type &","()"),("const std::scoped_allocator_adaptor::outer_allocator_type &","()")],
"_M_v":[("_Value &","()"),("const _Value &","()")],
"max_load_factor":[("float","()"),("void","(float)"),("float","()"),("void","(float)"),("float","()"),("void","(float)"),("float","()"),("void","(float)"),("float","()"),("void","(float)")],
"_M_next_bkt":"std::size_t",
"_M_bkt_for_elements":"std::size_t",
"_M_need_rehash":"std::pair<bool, std::size_t>",
"__clp2":["std::size_t","(std::size_t)"],
"_M_conjure_hashtable":["std::__detail::_Insert_base::__hashtable &","()"],
"_M_cget":"const _Tp &",
"hash_function":[("std::__detail::_Hash_code_base::hasher","()"),("std::unordered_map::hasher","()"),("std::unordered_multimap::hasher","()"),("std::unordered_set::hasher","()"),("std::unordered_multiset::hasher","()")],
"_M_hash_code":["std::__detail::_Hash_code_base::__hash_code","(const _Key &)"],
"_M_bucket_index":[("std::size_t","(std::__detail::_Hash_code_base::__hash_code, std::size_t)"),("std::size_t","(const _Hash_node_value<_Value, false> &, std::size_t)"),("std::size_t","(const _Hash_node_value<_Value, true> &, std::size_t)"),("std::_Hashtable::size_type","(const std::_Hashtable::__node_value_type &)"),("std::_Hashtable::size_type","(std::_Hashtable::__hash_code)")],
"_M_store_code":"void",
"_M_copy_code":"void",
"_M_hash":["const _Hash &","()"],
"_M_get_bucket":"std::size_t",
"_M_h":[("_Tp *","()"),("const _Tp *","()"),("_Tp *","()"),("const _Tp *","()")],
"_S_equals":"bool",
"_S_node_equals":"bool",
"_M_equals":["bool","(const _Key &, std::__detail::_Hashtable_base::__hash_code, const _Hash_node_value<_Value, __hash_cached::value> &)"],
"_M_node_equals":["bool","(const _Hash_node_value<_Value, __hash_cached::value> &, const _Hash_node_value<_Value, __hash_cached::value> &)"],
"_M_eq":["const _Equal &","()"],
"_M_node_allocator":[("std::__detail::_Hashtable_alloc::__node_alloc_type &","()"),("const std::__detail::_Hashtable_alloc::__node_alloc_type &","()")],
"_M_deallocate_node_ptr":"void",
"_M_deallocate_nodes":"void",
"_M_allocate_buckets":[("std::__detail::_Hashtable_alloc::__buckets_ptr","(std::size_t)"),("std::_Hashtable::__buckets_ptr","(std::_Hashtable::size_type)")],
"_M_deallocate_buckets":"void",
"_M_update_bbegin":"void",
"_M_uses_single_bucket":"bool",
"_M_base_alloc":["std::_Hashtable::__hashtable_alloc &","()"],
"_M_bucket_begin":"std::_Hashtable::__node_ptr",
"key_eq":[("std::_Hashtable::key_equal","()"),("std::unordered_map::key_equal","()"),("std::unordered_multimap::key_equal","()"),("std::unordered_set::key_equal","()"),("std::unordered_multiset::key_equal","()")],
"bucket_count":[("std::_Hashtable::size_type","()"),("std::unordered_map::size_type","()"),("std::unordered_multimap::size_type","()"),("std::unordered_set::size_type","()"),("std::unordered_multiset::size_type","()")],
"max_bucket_count":[("std::_Hashtable::size_type","()"),("std::unordered_map::size_type","()"),("std::unordered_multimap::size_type","()"),("std::unordered_set::size_type","()"),("std::unordered_multiset::size_type","()")],
"bucket_size":[("std::_Hashtable::size_type","(std::_Hashtable::size_type)"),("std::unordered_map::size_type","(std::unordered_map::size_type)"),("std::unordered_multimap::size_type","(std::unordered_multimap::size_type)"),("std::unordered_set::size_type","(std::unordered_set::size_type)"),("std::unordered_multiset::size_type","(std::unordered_multiset::size_type)")],
"bucket":[("std::_Hashtable::size_type","(const std::_Hashtable::key_type &)"),("std::unordered_map::size_type","(const std::unordered_map::key_type &)"),("std::unordered_multimap::size_type","(const std::unordered_multimap::key_type &)"),("std::unordered_set::size_type","(const std::unordered_set::key_type &)"),("std::unordered_multiset::size_type","(const std::unordered_multiset::key_type &)")],
"load_factor":"float",
"__rehash_policy":[("const _RehashPolicy &","()"),("void","(const _RehashPolicy &)")],
"_M_find_before_node":"std::_Hashtable::__node_base_ptr",
"_M_find_node":["std::_Hashtable::__node_ptr","(std::_Hashtable::size_type, const std::_Hashtable::key_type &, std::_Hashtable::__hash_code)"],
"_M_insert_bucket_begin":"void",
"_M_remove_bucket_begin":"void",
"_M_get_previous_node":"std::_Hashtable::__node_base_ptr",
"_M_insert_unique_node":"std::_Hashtable::iterator",
"_M_insert_multi_node":"std::_Hashtable::iterator",
"rehash":"void",
"_M_rehash_aux":"void",
"_M_rehash":"void",
"__glibcxx_rwlock_rdlock":["int","(pthread_rwlock_t *)"],
"__glibcxx_rwlock_tryrdlock":["int","(pthread_rwlock_t *)"],
"__glibcxx_rwlock_wrlock":["int","(pthread_rwlock_t *)"],
"__glibcxx_rwlock_trywrlock":["int","(pthread_rwlock_t *)"],
"__glibcxx_rwlock_unlock":["int","(pthread_rwlock_t *)"],
"__glibcxx_rwlock_timedrdlock":["int","(pthread_rwlock_t *, const timespec *)"],
"__glibcxx_rwlock_timedwrlock":["int","(pthread_rwlock_t *, const timespec *)"],
"lock_shared":"void",
"try_lock_shared":"bool",
"unlock_shared":"void",
"_M_lockable":["void","()"],
"opendir":["DIR *","(char const *)"],
"fdopendir":["DIR *","(int)"],
"closedir":["int","(DIR *)"],
"readdir":["struct dirent *","(DIR *)"],
"readdir64":["struct dirent64 *","(DIR *)"],
"readdir_r":["int","(DIR *__restrict, struct dirent *__restrict, struct dirent **__restrict)"],
"readdir64_r":["int","(DIR *__restrict, struct dirent64 *__restrict, struct dirent64 **__restrict)"],
"rewinddir":["void","(DIR *)"],
"seekdir":["void","(DIR *, long)"],
"telldir":["long","(DIR *)"],
"dirfd":["int","(DIR *)"],
"scandir":["int","(char const *__restrict, struct dirent ***__restrict, int (*)(const struct dirent *), int (*)(const struct dirent **, const struct dirent **))"],
"scandir64":["int","(char const *__restrict, struct dirent64 ***__restrict, int (*)(const struct dirent64 *), int (*)(const struct dirent64 **, const struct dirent64 **))"],
"scandirat":["int","(int, char const *__restrict, struct dirent ***__restrict, int (*)(const struct dirent *), int (*)(const struct dirent **, const struct dirent **))"],
"scandirat64":["int","(int, char const *__restrict, struct dirent64 ***__restrict, int (*)(const struct dirent64 *), int (*)(const struct dirent64 **, const struct dirent64 **))"],
"alphasort":["int","(const struct dirent **, const struct dirent **)"],
"alphasort64":["int","(const struct dirent64 **, const struct dirent64 **)"],
"getdirentries":["__ssize_t","(int, char *__restrict, size_t, __off_t *__restrict)"],
"getdirentries64":["__ssize_t","(int, char *__restrict, size_t, __off64_t *__restrict)"],
"versionsort":["int","(const struct dirent **, const struct dirent **)"],
"versionsort64":["int","(const struct dirent64 **, const struct dirent64 **)"],
"getdents64":["__ssize_t","(int, void *, size_t)"],
"_obstack_newchunk":["void","(struct obstack *, int)"],
"_obstack_begin":["int","(struct obstack *, int, int, void *(*)(long), void (*)(void *))"],
"_obstack_begin_1":["int","(struct obstack *, int, int, void *(*)(void *, long), void (*)(void *, void *), void *)"],
"_obstack_memory_used":["int","(struct obstack *)"],
"obstack_free":["void","(struct obstack *, void *)"],
"getopt_long":["int","(int, char *const *, char const *, const struct option *, int *)"],
"getopt_long_only":["int","(int, char *const *, char const *, const struct option *, int *)"],
"catopen":["nl_catd","(char const *, int)"],
"catgets":["char *","(nl_catd, int, int, char const *)"],
"catclose":["int","(nl_catd)"],
"freeze":"void",
"pcount":"int",
"_M_free":["void","(char *)"],
"_M_setup":["void","(char *, char *, std::streamsize)"],
"ftime":["int","(struct timeb *)"],
"stat":["int","(const char *__restrict, struct stat *__restrict)"],
"fstat":["int","(int, struct stat *)"],
"stat64":["int","(const char *__restrict, struct stat64 *__restrict)"],
"fstat64":["int","(int, struct stat64 *)"],
"fstatat":["int","(int, const char *__restrict, struct stat *__restrict, int)"],
"fstatat64":["int","(int, const char *__restrict, struct stat64 *__restrict, int)"],
"lstat":["int","(const char *__restrict, struct stat *__restrict)"],
"lstat64":["int","(const char *__restrict, struct stat64 *__restrict)"],
"chmod":["int","(const char *, __mode_t)"],
"lchmod":["int","(const char *, __mode_t)"],
"fchmod":["int","(int, __mode_t)"],
"fchmodat":["int","(int, const char *, __mode_t, int)"],
"umask":["__mode_t","(__mode_t)"],
"getumask":["__mode_t","()"],
"mkdir":["int","(const char *, __mode_t)"],
"mkdirat":["int","(int, const char *, __mode_t)"],
"mknod":["int","(const char *, __mode_t, __dev_t)"],
"mknodat":["int","(int, const char *, __mode_t, __dev_t)"],
"mkfifo":["int","(const char *, __mode_t)"],
"mkfifoat":["int","(int, const char *, __mode_t)"],
"utimensat":["int","(int, const char *, const struct timespec *, int)"],
"futimens":["int","(int, const struct timespec *)"],
"statx":["int","(int, const char *__restrict, int, unsigned int, struct statx *__restrict)"],
"__printf_chk":["int","(int flag, const char *format, ...)"],
"glob":["int","(const char *__restrict, int, int (*)(const char *, int), glob_t *__restrict)"],
"globfree":["void","(glob_t *)"],
"glob64":["int","(const char *__restrict, int, int (*)(const char *, int), glob64_t *__restrict)"],
"globfree64":["void","(glob64_t *)"],
"glob_pattern_p":["int","(const char *, int)"],
"__cxa_finalize":["void","(void *dso_handle)"],
"__strncat_chk":["char *","(char *dest, const char *src, size_t n, size_t destlen)"],
"__vsnprintf_chk":["int","(char *str, size_t size, int flag, size_t strlen, const char *format, va_list ap)"],
"__isoc99_sscanf":["int","(const char *str, const char *format, ...)"],
"__stack_chk_fail":["void","(void)"],
"__fprintf_chk":["int","(FILE *stream, int flag, const char *format, ...)"],
"__libc_start_main":["int","(int (*main)(int, char **, char **), int argc, char **argv, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void (*stack_end))"],
"__strcat_chk":["char *", "(char *dest, const char *src, size_t destlen)"],
"__vfprintf_chk":["int", "(FILE *s,int flag, const char *format, va_list ap)"],
"__strcpy_chk":["char *", "(char *dest, const char *src, size_t destlen)"],
"__sprintf_chk":["int", "(char *str, int flags, size_t slen, const char *format, ...)"],
"__snprintf_chk": ["int", "(char *dest, size_t destlen, int flag, size_t size, const char *format, ...)"],
"__memcpy_chk":["void*", "(void *dest, void const*src, size_t len, size_t destlen)"],
"__strncpy_chk":["char", "(char *dest, const char *src, size_t n, size_t destlen)"],
"__isoc99_vfscanf":["int", "(FILE *stream, const char *format, va_list arg)"],
"__isoc99_vsscanf":["int", "(const char *str, const char *format, va_list arg)"],
"__xstat":["int","(int ver, const char *path, struct stat *buf)"],
"__fxstat":["int","(int ver, int fd, struct stat *buf)"],
"__memset_chk":["void *","(void * dest, int c, size_t len, size_t destlen)"],
"__asprintf_chk":["int","(char **result_ptr, int flag, const char *format, ...)"],
"__fread_chk":["size_t","(void *__restrict ptr, size_t ptrlen,size_t size, size_t n, FILE *__restrict stream)"],
"__vasprintf_chk":["int","(char **result_ptr, int flag, const char *format, va_list ap)"],
"__cxa_atexit":["int","(void (*func) (void *), void * arg, void * dso_handle)"],
"__realpath_chk":["char *","(const char * path, char * resolved_path, size_t resolved_len)"],
"__longjmp_chk":["void","(jmp_buf env, int val)"],
"__vsprintf_chk":["int","(char * s, int flag, size_t slen, const char * format, va_list args)"],
"__memmove_chk":["void *","(void * dest, void const* src, size_t len, size_t destlen)"],
"__fdelt_chk":["long int","(long int d)"],
"__isoc99_scanf":["int","(const char *format, ...)"],
"__isoc99_fscanf":["int","(FILE *stream, const char *format, ...)"],
"__fgets_chk":["char *","(char * s, size_t size, int strsize, FILE * stream)"],
  }

