
class dict:
  dictionary={

"__fpclassify":["int","(double)"],
"__signbit":["int","(double)"],
"__isinf":["int","(double)"],
"__finite":["int","(double)"],
"__isnan":["int","(double)"],
"__iseqsig":["int","(double, double)"],
"__issignaling":["int","(double)"],
"acos":["double","(double)"],
"__acos":["double","(double)"],
"asin":["double","(double)"],
"__asin":["double","(double)"],
"atan":["double","(double)"],
"__atan":["double","(double)"],
"atan2":["double","(double, double)"],
"__atan2":["double","(double, double)"],
"cos":["double","(double)"],
"__cos":["double","(double)"],
"sin":["double","(double)"],
"__sin":["double","(double)"],
"tan":["double","(double)"],
"__tan":["double","(double)"],
"cosh":["double","(double)"],
"__cosh":["double","(double)"],
"sinh":["double","(double)"],
"__sinh":["double","(double)"],
"tanh":["double","(double)"],
"__tanh":["double","(double)"],
"acosh":["double","(double)"],
"__acosh":["double","(double)"],
"asinh":["double","(double)"],
"__asinh":["double","(double)"],
"atanh":["double","(double)"],
"__atanh":["double","(double)"],
"exp":["double","(double)"],
"__exp":["double","(double)"],
"frexp":["double","(double, int *)"],
"__frexp":["double","(double, int *)"],
"ldexp":["double","(double, int)"],
"__ldexp":["double","(double, int)"],
"log":["double","(double)"],
"__log":["double","(double)"],
"log10":["double","(double)"],
"__log10":["double","(double)"],
"modf":["double","(double, double *)"],
"__modf":["double","(double, double *)"],
"expm1":["double","(double)"],
"__expm1":["double","(double)"],
"log1p":["double","(double)"],
"__log1p":["double","(double)"],
"logb":["double","(double)"],
"__logb":["double","(double)"],
"exp2":["double","(double)"],
"__exp2":["double","(double)"],
"log2":["double","(double)"],
"__log2":["double","(double)"],
"pow":["double","(double, double)"],
"__pow":["double","(double, double)"],
"sqrt":["double","(double)"],
"__sqrt":["double","(double)"],
"hypot":["double","(double, double)"],
"__hypot":["double","(double, double)"],
"cbrt":["double","(double)"],
"__cbrt":["double","(double)"],
"ceil":["double","(double)"],
"__ceil":["double","(double)"],
"fabs":["double","(double)"],
"__fabs":["double","(double)"],
"floor":["double","(double)"],
"__floor":["double","(double)"],
"fmod":["double","(double, double)"],
"__fmod":["double","(double, double)"],
"isinf":["int","(double)"],
"finite":["int","(double)"],
"drem":["double","(double, double)"],
"__drem":["double","(double, double)"],
"significand":["double","(double)"],
"__significand":["double","(double)"],
"copysign":["double","(double, double)"],
"__copysign":["double","(double, double)"],
"nan":["double","(const char *)"],
"__nan":["double","(const char *)"],
"isnan":["int","(double)"],
"j0":["double","(double)"],
"__j0":["double","(double)"],
"j1":["double","(double)"],
"__j1":["double","(double)"],
"jn":["double","(int, double)"],
"__jn":["double","(int, double)"],
"y0":["double","(double)"],
"__y0":["double","(double)"],
"y1":["double","(double)"],
"__y1":["double","(double)"],
"yn":["double","(int, double)"],
"__yn":["double","(int, double)"],
"erf":["double","(double)"],
"__erf":["double","(double)"],
"erfc":["double","(double)"],
"__erfc":["double","(double)"],
"lgamma":["double","(double)"],
"__lgamma":["double","(double)"],
"tgamma":["double","(double)"],
"__tgamma":["double","(double)"],
"gamma":["double","(double)"],
"__gamma":["double","(double)"],
"lgamma_r":["double","(double, int *)"],
"__lgamma_r":["double","(double, int *)"],
"rint":["double","(double)"],
"__rint":["double","(double)"],
"nextafter":["double","(double, double)"],
"__nextafter":["double","(double, double)"],
"nexttoward":["double","(double, long double)"],
"__nexttoward":["double","(double, long double)"],
"remainder":["double","(double, double)"],
"__remainder":["double","(double, double)"],
"scalbn":["double","(double, int)"],
"__scalbn":["double","(double, int)"],
"ilogb":["int","(double)"],
"__ilogb":["int","(double)"],
"scalbln":["double","(double, long)"],
"__scalbln":["double","(double, long)"],
"nearbyint":["double","(double)"],
"__nearbyint":["double","(double)"],
"round":["double","(double)"],
"__round":["double","(double)"],
"trunc":["double","(double)"],
"__trunc":["double","(double)"],
"remquo":["double","(double, double, int *)"],
"__remquo":["double","(double, double, int *)"],
"lrint":["long","(double)"],
"__lrint":["long","(double)"],
"llrint":["long long","(double)"],
"__llrint":["long long","(double)"],
"lround":["long","(double)"],
"__lround":["long","(double)"],
"llround":["long long","(double)"],
"__llround":["long long","(double)"],
"fdim":["double","(double, double)"],
"__fdim":["double","(double, double)"],
"fmax":["double","(double, double)"],
"__fmax":["double","(double, double)"],
"fmin":["double","(double, double)"],
"__fmin":["double","(double, double)"],
"fma":["double","(double, double, double)"],
"__fma":["double","(double, double, double)"],
"scalb":["double","(double, double)"],
"__scalb":["double","(double, double)"],
"__fpclassifyf":["int","(float)"],
"__signbitf":["int","(float)"],
"__isinff":["int","(float)"],
"__finitef":["int","(float)"],
"__isnanf":["int","(float)"],
"__iseqsigf":["int","(float, float)"],
"__issignalingf":["int","(float)"],
"acosf":["float","(float)"],
"__acosf":["float","(float)"],
"asinf":["float","(float)"],
"__asinf":["float","(float)"],
"atanf":["float","(float)"],
"__atanf":["float","(float)"],
"atan2f":["float","(float, float)"],
"__atan2f":["float","(float, float)"],
"cosf":["float","(float)"],
"__cosf":["float","(float)"],
"sinf":["float","(float)"],
"__sinf":["float","(float)"],
"tanf":["float","(float)"],
"__tanf":["float","(float)"],
"coshf":["float","(float)"],
"__coshf":["float","(float)"],
"sinhf":["float","(float)"],
"__sinhf":["float","(float)"],
"tanhf":["float","(float)"],
"__tanhf":["float","(float)"],
"acoshf":["float","(float)"],
"__acoshf":["float","(float)"],
"asinhf":["float","(float)"],
"__asinhf":["float","(float)"],
"atanhf":["float","(float)"],
"__atanhf":["float","(float)"],
"expf":["float","(float)"],
"__expf":["float","(float)"],
"frexpf":["float","(float, int *)"],
"__frexpf":["float","(float, int *)"],
"ldexpf":["float","(float, int)"],
"__ldexpf":["float","(float, int)"],
"logf":["float","(float)"],
"__logf":["float","(float)"],
"log10f":["float","(float)"],
"__log10f":["float","(float)"],
"modff":["float","(float, float *)"],
"__modff":["float","(float, float *)"],
"expm1f":["float","(float)"],
"__expm1f":["float","(float)"],
"log1pf":["float","(float)"],
"__log1pf":["float","(float)"],
"logbf":["float","(float)"],
"__logbf":["float","(float)"],
"exp2f":["float","(float)"],
"__exp2f":["float","(float)"],
"log2f":["float","(float)"],
"__log2f":["float","(float)"],
"powf":["float","(float, float)"],
"__powf":["float","(float, float)"],
"sqrtf":["float","(float)"],
"__sqrtf":["float","(float)"],
"hypotf":["float","(float, float)"],
"__hypotf":["float","(float, float)"],
"cbrtf":["float","(float)"],
"__cbrtf":["float","(float)"],
"ceilf":["float","(float)"],
"__ceilf":["float","(float)"],
"fabsf":["float","(float)"],
"__fabsf":["float","(float)"],
"floorf":["float","(float)"],
"__floorf":["float","(float)"],
"fmodf":["float","(float, float)"],
"__fmodf":["float","(float, float)"],
"isinff":["int","(float)"],
"finitef":["int","(float)"],
"dremf":["float","(float, float)"],
"__dremf":["float","(float, float)"],
"significandf":["float","(float)"],
"__significandf":["float","(float)"],
"copysignf":["float","(float, float)"],
"__copysignf":["float","(float, float)"],
"nanf":["float","(const char *)"],
"__nanf":["float","(const char *)"],
"isnanf":["int","(float)"],
"j0f":["float","(float)"],
"__j0f":["float","(float)"],
"j1f":["float","(float)"],
"__j1f":["float","(float)"],
"jnf":["float","(int, float)"],
"__jnf":["float","(int, float)"],
"y0f":["float","(float)"],
"__y0f":["float","(float)"],
"y1f":["float","(float)"],
"__y1f":["float","(float)"],
"ynf":["float","(int, float)"],
"__ynf":["float","(int, float)"],
"erff":["float","(float)"],
"__erff":["float","(float)"],
"erfcf":["float","(float)"],
"__erfcf":["float","(float)"],
"lgammaf":["float","(float)"],
"__lgammaf":["float","(float)"],
"tgammaf":["float","(float)"],
"__tgammaf":["float","(float)"],
"gammaf":["float","(float)"],
"__gammaf":["float","(float)"],
"lgammaf_r":["float","(float, int *)"],
"__lgammaf_r":["float","(float, int *)"],
"rintf":["float","(float)"],
"__rintf":["float","(float)"],
"nextafterf":["float","(float, float)"],
"__nextafterf":["float","(float, float)"],
"nexttowardf":["float","(float, long double)"],
"__nexttowardf":["float","(float, long double)"],
"remainderf":["float","(float, float)"],
"__remainderf":["float","(float, float)"],
"scalbnf":["float","(float, int)"],
"__scalbnf":["float","(float, int)"],
"ilogbf":["int","(float)"],
"__ilogbf":["int","(float)"],
"scalblnf":["float","(float, long)"],
"__scalblnf":["float","(float, long)"],
"nearbyintf":["float","(float)"],
"__nearbyintf":["float","(float)"],
"roundf":["float","(float)"],
"__roundf":["float","(float)"],
"truncf":["float","(float)"],
"__truncf":["float","(float)"],
"remquof":["float","(float, float, int *)"],
"__remquof":["float","(float, float, int *)"],
"lrintf":["long","(float)"],
"__lrintf":["long","(float)"],
"llrintf":["long long","(float)"],
"__llrintf":["long long","(float)"],
"lroundf":["long","(float)"],
"__lroundf":["long","(float)"],
"llroundf":["long long","(float)"],
"__llroundf":["long long","(float)"],
"fdimf":["float","(float, float)"],
"__fdimf":["float","(float, float)"],
"fmaxf":["float","(float, float)"],
"__fmaxf":["float","(float, float)"],
"fminf":["float","(float, float)"],
"__fminf":["float","(float, float)"],
"fmaf":["float","(float, float, float)"],
"__fmaf":["float","(float, float, float)"],
"scalbf":["float","(float, float)"],
"__scalbf":["float","(float, float)"],
"__fpclassifyl":["int","(long double)"],
"__signbitl":["int","(long double)"],
"__isinfl":["int","(long double)"],
"__finitel":["int","(long double)"],
"__isnanl":["int","(long double)"],
"__iseqsigl":["int","(long double, long double)"],
"__issignalingl":["int","(long double)"],
"acosl":["long double","(long double)"],
"__acosl":["long double","(long double)"],
"asinl":["long double","(long double)"],
"__asinl":["long double","(long double)"],
"atanl":["long double","(long double)"],
"__atanl":["long double","(long double)"],
"atan2l":["long double","(long double, long double)"],
"__atan2l":["long double","(long double, long double)"],
"cosl":["long double","(long double)"],
"__cosl":["long double","(long double)"],
"sinl":["long double","(long double)"],
"__sinl":["long double","(long double)"],
"tanl":["long double","(long double)"],
"__tanl":["long double","(long double)"],
"coshl":["long double","(long double)"],
"__coshl":["long double","(long double)"],
"sinhl":["long double","(long double)"],
"__sinhl":["long double","(long double)"],
"tanhl":["long double","(long double)"],
"__tanhl":["long double","(long double)"],
"acoshl":["long double","(long double)"],
"__acoshl":["long double","(long double)"],
"asinhl":["long double","(long double)"],
"__asinhl":["long double","(long double)"],
"atanhl":["long double","(long double)"],
"__atanhl":["long double","(long double)"],
"expl":["long double","(long double)"],
"__expl":["long double","(long double)"],
"frexpl":["long double","(long double, int *)"],
"__frexpl":["long double","(long double, int *)"],
"ldexpl":["long double","(long double, int)"],
"__ldexpl":["long double","(long double, int)"],
"logl":["long double","(long double)"],
"__logl":["long double","(long double)"],
"log10l":["long double","(long double)"],
"__log10l":["long double","(long double)"],
"modfl":["long double","(long double, long double *)"],
"__modfl":["long double","(long double, long double *)"],
"expm1l":["long double","(long double)"],
"__expm1l":["long double","(long double)"],
"log1pl":["long double","(long double)"],
"__log1pl":["long double","(long double)"],
"logbl":["long double","(long double)"],
"__logbl":["long double","(long double)"],
"exp2l":["long double","(long double)"],
"__exp2l":["long double","(long double)"],
"log2l":["long double","(long double)"],
"__log2l":["long double","(long double)"],
"powl":["long double","(long double, long double)"],
"__powl":["long double","(long double, long double)"],
"sqrtl":["long double","(long double)"],
"__sqrtl":["long double","(long double)"],
"hypotl":["long double","(long double, long double)"],
"__hypotl":["long double","(long double, long double)"],
"cbrtl":["long double","(long double)"],
"__cbrtl":["long double","(long double)"],
"ceill":["long double","(long double)"],
"__ceill":["long double","(long double)"],
"fabsl":["long double","(long double)"],
"__fabsl":["long double","(long double)"],
"floorl":["long double","(long double)"],
"__floorl":["long double","(long double)"],
"fmodl":["long double","(long double, long double)"],
"__fmodl":["long double","(long double, long double)"],
"isinfl":["int","(long double)"],
"finitel":["int","(long double)"],
"dreml":["long double","(long double, long double)"],
"__dreml":["long double","(long double, long double)"],
"significandl":["long double","(long double)"],
"__significandl":["long double","(long double)"],
"copysignl":["long double","(long double, long double)"],
"__copysignl":["long double","(long double, long double)"],
"nanl":["long double","(const char *)"],
"__nanl":["long double","(const char *)"],
"isnanl":["int","(long double)"],
"j0l":["long double","(long double)"],
"__j0l":["long double","(long double)"],
"j1l":["long double","(long double)"],
"__j1l":["long double","(long double)"],
"jnl":["long double","(int, long double)"],
"__jnl":["long double","(int, long double)"],
"y0l":["long double","(long double)"],
"__y0l":["long double","(long double)"],
"y1l":["long double","(long double)"],
"__y1l":["long double","(long double)"],
"ynl":["long double","(int, long double)"],
"__ynl":["long double","(int, long double)"],
"erfl":["long double","(long double)"],
"__erfl":["long double","(long double)"],
"erfcl":["long double","(long double)"],
"__erfcl":["long double","(long double)"],
"lgammal":["long double","(long double)"],
"__lgammal":["long double","(long double)"],
"tgammal":["long double","(long double)"],
"__tgammal":["long double","(long double)"],
"gammal":["long double","(long double)"],
"__gammal":["long double","(long double)"],
"lgammal_r":["long double","(long double, int *)"],
"__lgammal_r":["long double","(long double, int *)"],
"rintl":["long double","(long double)"],
"__rintl":["long double","(long double)"],
"nextafterl":["long double","(long double, long double)"],
"__nextafterl":["long double","(long double, long double)"],
"nexttowardl":["long double","(long double, long double)"],
"__nexttowardl":["long double","(long double, long double)"],
"remainderl":["long double","(long double, long double)"],
"__remainderl":["long double","(long double, long double)"],
"scalbnl":["long double","(long double, int)"],
"__scalbnl":["long double","(long double, int)"],
"ilogbl":["int","(long double)"],
"__ilogbl":["int","(long double)"],
"scalblnl":["long double","(long double, long)"],
"__scalblnl":["long double","(long double, long)"],
"nearbyintl":["long double","(long double)"],
"__nearbyintl":["long double","(long double)"],
"roundl":["long double","(long double)"],
"__roundl":["long double","(long double)"],
"truncl":["long double","(long double)"],
"__truncl":["long double","(long double)"],
"remquol":["long double","(long double, long double, int *)"],
"__remquol":["long double","(long double, long double, int *)"],
"lrintl":["long","(long double)"],
"__lrintl":["long","(long double)"],
"llrintl":["long long","(long double)"],
"__llrintl":["long long","(long double)"],
"lroundl":["long","(long double)"],
"__lroundl":["long","(long double)"],
"llroundl":["long long","(long double)"],
"__llroundl":["long long","(long double)"],
"fdiml":["long double","(long double, long double)"],
"__fdiml":["long double","(long double, long double)"],
"fmaxl":["long double","(long double, long double)"],
"__fmaxl":["long double","(long double, long double)"],
"fminl":["long double","(long double, long double)"],
"__fminl":["long double","(long double, long double)"],
"fmal":["long double","(long double, long double, long double)"],
"__fmal":["long double","(long double, long double, long double)"],
"scalbl":["long double","(long double, long double)"],
"__scalbl":["long double","(long double, long double)"],
"__ctype_get_mb_cur_max":["int","()"],
"atof":["double","(const char *)"],
"atoi":["int","(const char *)"],
"atol":["long","(const char *)"],
"atoll":["long long","(const char *)"],
"strtod":["double","(const char *restrict, char **restrict)"],
"strtof":["float","(const char *restrict, char **restrict)"],
"strtold":["long double","(const char *restrict, char **restrict)"],
"strtol":["long","(const char *restrict, char **restrict, int)"],
"strtoul":["unsigned long","(const char *restrict, char **restrict, int)"],
"strtoq":["long long","(const char *restrict, char **restrict, int)"],
"strtouq":["unsigned long long","(const char *restrict, char **restrict, int)"],
"strtoll":["long long","(const char *restrict, char **restrict, int)"],
"strtoull":["unsigned long long","(const char *restrict, char **restrict, int)"],
"l64a":["char *","(long)"],
"a64l":["long","(const char *)"],
"__bswap_16":["__uint16_t","(__uint16_t)"],
"__bswap_32":["__uint32_t","(__uint32_t)"],
"__bswap_64":["__uint64_t","(__uint64_t)"],
"__uint16_identity":["__uint16_t","(__uint16_t)"],
"__uint32_identity":["__uint32_t","(__uint32_t)"],
"__uint64_identity":["__uint64_t","(__uint64_t)"],
"select":["int","(int, fd_set *restrict, fd_set *restrict, fd_set *restrict, struct timeval *restrict)"],
"pselect":["int","(int, fd_set *restrict, fd_set *restrict, fd_set *restrict, const struct timespec *restrict, const __sigset_t *restrict)"],
"random":["long","()"],
"srandom":["void","(unsigned int)"],
"initstate":["char *","(unsigned int, char *, int)"],
"setstate":["char *","(char *)"],
"random_r":["int","(struct random_data *restrict, int32_t *restrict)"],
"srandom_r":["int","(unsigned int, struct random_data *)"],
"initstate_r":["int","(unsigned int, char *restrict, int, struct random_data *restrict)"],
"setstate_r":["int","(char *restrict, struct random_data *restrict)"],
"rand":["int","()"],
"srand":["void","(unsigned int)"],
"rand_r":["int","(unsigned int *)"],
"drand48":["double","()"],
"erand48":["double","(unsigned short *)"],
"lrand48":["long","()"],
"nrand48":["long","(unsigned short *)"],
"mrand48":["long","()"],
"jrand48":["long","(unsigned short *)"],
"srand48":["void","(long)"],
"seed48":["unsigned short *","(unsigned short *)"],
"lcong48":["void","(unsigned short *)"],
"drand48_r":["int","(struct drand48_data *restrict, double *restrict)"],
"erand48_r":["int","(unsigned short *, struct drand48_data *restrict, double *restrict)"],
"lrand48_r":["int","(struct drand48_data *restrict, long *restrict)"],
"nrand48_r":["int","(unsigned short *, struct drand48_data *restrict, long *restrict)"],
"mrand48_r":["int","(struct drand48_data *restrict, long *restrict)"],
"jrand48_r":["int","(unsigned short *, struct drand48_data *restrict, long *restrict)"],
"srand48_r":["int","(long, struct drand48_data *)"],
"seed48_r":["int","(unsigned short *, struct drand48_data *)"],
"lcong48_r":["int","(unsigned short *, struct drand48_data *)"],
"malloc":["void *","(int)"],
"calloc":["void *","(int, int)"],
"realloc":["void *","(void *, int)"],
"free":["void","(void *)"],
"reallocarray":["void *","(void *, int, int)"],
"reallocarray":["void *","(void *, int, int)"],
"alloca":["void *","(int)"],
"valloc":["void *","(int)"],
"posix_memalign":["int","(void **, int, int)"],
"aligned_alloc":["void *","(int, int)"],
"abort":["void","()"],
"atexit":["int","(void (*)(void))"],
"at_quick_exit":["int","(void (*)(void))"],
"on_exit":["int","(void (*)(int, void *), void *)"],
"exit":["void","(int)"],
"quick_exit":["void","(int)"],
"_Exit":["void","(int)"],
"getenv":["char *","(const char *)"],
"putenv":["int","(char *)"],
"setenv":["int","(const char *, const char *, int)"],
"unsetenv":["int","(const char *)"],
"clearenv":["int","()"],
"mktemp":["char *","(char *)"],
"mkstemp":["int","(char *)"],
"mkstemps":["int","(char *, int)"],
"mkdtemp":["char *","(char *)"],
"system":["int","(const char *)"],
"realpath":["char *","(const char *restrict, char *restrict)"],
"bsearch":["void *","(const void *, const void *, int, int, __compar_fn_t)"],
"qsort":["void","(void *, int, int, __compar_fn_t)"],
"abs":["int","(int)"],
"labs":["long","(long)"],
"llabs":["long long","(long long)"],
"div":["div_t","(int, int)"],
"ldiv":["ldiv_t","(long, long)"],
"lldiv":["lldiv_t","(long long, long long)"],
"ecvt":["char *","(double, int, int *restrict, int *restrict)"],
"fcvt":["char *","(double, int, int *restrict, int *restrict)"],
"gcvt":["char *","(double, int, char *)"],
"qecvt":["char *","(long double, int, int *restrict, int *restrict)"],
"qfcvt":["char *","(long double, int, int *restrict, int *restrict)"],
"qgcvt":["char *","(long double, int, char *)"],
"ecvt_r":["int","(double, int, int *restrict, int *restrict, char *restrict, int)"],
"fcvt_r":["int","(double, int, int *restrict, int *restrict, char *restrict, int)"],
"qecvt_r":["int","(long double, int, int *restrict, int *restrict, char *restrict, int)"],
"qfcvt_r":["int","(long double, int, int *restrict, int *restrict, char *restrict, int)"],
"mblen":["int","(const char *, int)"],
"mbtowc":["int","(int *restrict, const char *restrict, int)"],
"wctomb":["int","(char *, int)"],
"mbstowcs":["int","(int *restrict, const char *restrict, int)"],
"wcstombs":["int","(char *restrict, const int *restrict, int)"],
"rpmatch":["int","(const char *)"],
"getsubopt":["int","(char **restrict, char *const *restrict, char **restrict)"],
"getloadavg":["int","(double *, int)"],
"access":["int","(const char *, int)"],
"faccessat":["int","(int, const char *, int, int)"],
"lseek":["__off_t","(int, __off_t, int)"],
"close":["int","(int)"],
"closefrom":["void","(int)"],
"read":["ssize_t","(int, void *, int)"],
"write":["ssize_t","(int, const void *, int)"],
"pread":["ssize_t","(int, void *, int, __off_t)"],
"pwrite":["ssize_t","(int, const void *, int, __off_t)"],
"pipe":["int","(int *)"],
"alarm":["unsigned int","(unsigned int)"],
"sleep":["unsigned int","(unsigned int)"],
"ualarm":["__useconds_t","(__useconds_t, __useconds_t)"],
"usleep":["int","(__useconds_t)"],
"pause":["int","()"],
"chown":["int","(const char *, __uid_t, __gid_t)"],
"fchown":["int","(int, __uid_t, __gid_t)"],
"lchown":["int","(const char *, __uid_t, __gid_t)"],
"fchownat":["int","(int, const char *, __uid_t, __gid_t, int)"],
"chdir":["int","(const char *)"],
"fchdir":["int","(int)"],
"getcwd":["char *","(char *, int)"],
"getwd":["char *","(char *)"],
"dup":["int","(int)"],
"dup2":["int","(int, int)"],
"execve":["int","(const char *, char *const *, char *const *)"],
"fexecve":["int","(int, char *const *, char *const *)"],
"execv":["int","(const char *, char *const *)"],
"execle":["int","(const char *, const char *, ...)"],
"execl":["int","(const char *, const char *, ...)"],
"execvp":["int","(const char *, char *const *)"],
"execlp":["int","(const char *, const char *, ...)"],
"nice":["int","(int)"],
"_exit":["void","(int)"],
"pathconf":["long","(const char *, int)"],
"fpathconf":["long","(int, int)"],
"sysconf":["long","(int)"],
"confstr":["int","(int, char *, int)"],
"getpid":["__pid_t","()"],
"getppid":["__pid_t","()"],
"getpgrp":["__pid_t","()"],
"__getpgid":["__pid_t","(__pid_t)"],
"getpgid":["__pid_t","(__pid_t)"],
"setpgid":["int","(__pid_t, __pid_t)"],
"setpgrp":["int","()"],
"setsid":["__pid_t","()"],
"getsid":["__pid_t","(__pid_t)"],
"getuid":["__uid_t","()"],
"geteuid":["__uid_t","()"],
"getgid":["__gid_t","()"],
"getegid":["__gid_t","()"],
"getgroups":["int","(int, __gid_t *)"],
"setuid":["int","(__uid_t)"],
"setreuid":["int","(__uid_t, __uid_t)"],
"seteuid":["int","(__uid_t)"],
"setgid":["int","(__gid_t)"],
"setregid":["int","(__gid_t, __gid_t)"],
"setegid":["int","(__gid_t)"],
"fork":["__pid_t","()"],
"vfork":["int","()"],
"ttyname":["char *","(int)"],
"ttyname_r":["int","(int, char *, int)"],
"isatty":["int","(int)"],
"ttyslot":["int","()"],
"link":["int","(const char *, const char *)"],
"linkat":["int","(int, const char *, int, const char *, int)"],
"symlink":["int","(const char *, const char *)"],
"readlink":["ssize_t","(const char *restrict, char *restrict, int)"],
"symlinkat":["int","(const char *, int, const char *)"],
"readlinkat":["ssize_t","(int, const char *restrict, char *restrict, int)"],
"unlink":["int","(const char *)"],
"unlinkat":["int","(int, const char *, int)"],
"rmdir":["int","(const char *)"],
"tcgetpgrp":["__pid_t","(int)"],
"tcsetpgrp":["int","(int, __pid_t)"],
"getlogin":["char *","()"],
"getlogin_r":["int","(char *, int)"],
"setlogin":["int","(const char *)"],
"getopt":["int","(int, char *const *, const char *)"],
"gethostname":["int","(char *, int)"],
"sethostname":["int","(const char *, int)"],
"sethostid":["int","(long)"],
"getdomainname":["int","(char *, int)"],
"setdomainname":["int","(const char *, int)"],
"vhangup":["int","()"],
"revoke":["int","(const char *)"],
"profil":["int","(unsigned short *, int, int, unsigned int)"],
"acct":["int","(const char *)"],
"getusershell":["char *","()"],
"endusershell":["void","()"],
"setusershell":["void","()"],
"daemon":["int","(int, int)"],
"chroot":["int","(const char *)"],
"getpass":["char *","(const char *)"],
"fsync":["int","(int)"],
"gethostid":["long","()"],
"sync":["void","()"],
"getpagesize":["int","()"],
"getdtablesize":["int","()"],
"truncate":["int","(const char *, __off_t)"],
"ftruncate":["int","(int, __off_t)"],
"brk":["int","(void *)"],
"sbrk":["void *","(intptr_t)"],
"syscall":["long","(long, ...)"],
"lockf":["int","(int, int, __off_t)"],
"fdatasync":["int","(int)"],
"crypt":["char *","(const char *, const char *)"],
"getentropy":["int","(void *, int)"],
"stat":["int","(const char *restrict, struct stat *restrict)"],
"fstat":["int","(int, struct stat *)"],
"fstatat":["int","(int, const char *restrict, struct stat *restrict, int)"],
"lstat":["int","(const char *restrict, struct stat *restrict)"],
"chmod":["int","(const char *, __mode_t)"],
"lchmod":["int","(const char *, __mode_t)"],
"fchmod":["int","(int, __mode_t)"],
"fchmodat":["int","(int, const char *, __mode_t, int)"],
"umask":["__mode_t","(__mode_t)"],
"mkdir":["int","(const char *, __mode_t)"],
"mkdirat":["int","(int, const char *, __mode_t)"],
"mknod":["int","(const char *, __mode_t, __dev_t)"],
"mknodat":["int","(int, const char *, __mode_t, __dev_t)"],
"mkfifo":["int","(const char *, __mode_t)"],
"mkfifoat":["int","(int, const char *, __mode_t)"],
"utimensat":["int","(int, const char *, const struct timespec *, int)"],
"futimens":["int","(int, const struct timespec *)"],
"wait":["__pid_t","(int *)"],
"waitpid":["__pid_t","(__pid_t, int *, int)"],
"waitid":["int","(idtype_t, __id_t, siginfo_t *, int)"],
"wait3":["__pid_t","(int *, int, struct rusage *)"],
"wait4":["__pid_t","(__pid_t, int *, int, struct rusage *)"],
"ioctl":["int","(int, unsigned long, ...)"],
"gettimeofday":["int","(struct timeval *restrict, void *restrict)"],
"settimeofday":["int","(const struct timeval *, const struct timezone *)"],
"adjtime":["int","(const struct timeval *, struct timeval *)"],
"getitimer":["int","(__itimer_which_t, struct itimerval *)"],
"setitimer":["int","(__itimer_which_t, const struct itimerval *restrict, struct itimerval *restrict)"],
"utimes":["int","(const char *, const struct timeval *)"],
"lutimes":["int","(const char *, const struct timeval *)"],
"futimes":["int","(int, const struct timeval *)"],
"times":["clock_t","(struct tms *)"],
"getrlimit":["int","(__rlimit_resource_t, struct rlimit *)"],
"setrlimit":["int","(__rlimit_resource_t, const struct rlimit *)"],
"getrusage":["int","(__rusage_who_t, struct rusage *)"],
"getpriority":["int","(__priority_which_t, id_t)"],
"setpriority":["int","(__priority_which_t, id_t, int)"],
"fcntl":["int","(int, int, ...)"],
"open":["int","(const char *, int, ...)"],
"openat":["int","(int, const char *, int, ...)"],
"creat":["int","(const char *, mode_t)"],
"posix_fadvise":["int","(int, off_t, off_t, int)"],
"posix_fallocate":["int","(int, off_t, off_t)"],
"__sched_cpucount":["int","(int, const cpu_set_t *)"],
"__sched_cpualloc":["cpu_set_t *","(int)"],
"__sched_cpufree":["void","(cpu_set_t *)"],
"sched_setparam":["int","(__pid_t, const struct sched_param *)"],
"sched_getparam":["int","(__pid_t, struct sched_param *)"],
"sched_setscheduler":["int","(__pid_t, int, const struct sched_param *)"],
"sched_getscheduler":["int","(__pid_t)"],
"sched_yield":["int","()"],
"sched_get_priority_max":["int","(int)"],
"sched_get_priority_min":["int","(int)"],
"sched_rr_get_interval":["int","(__pid_t, struct timespec *)"],
"pthread_create":["int","(pthread_t *restrict, const pthread_attr_t *restrict, void *(*)(void *), void *restrict)"],
"pthread_exit":["void","(void *)"],
"pthread_join":["int","(pthread_t, void **)"],
"pthread_detach":["int","(pthread_t)"],
"pthread_self":["pthread_t","()"],
"pthread_equal":["int","(pthread_t, pthread_t)"],
"pthread_attr_init":["int","(pthread_attr_t *)"],
"pthread_attr_destroy":["int","(pthread_attr_t *)"],
"pthread_attr_getdetachstate":["int","(const pthread_attr_t *, int *)"],
"pthread_attr_setdetachstate":["int","(pthread_attr_t *, int)"],
"pthread_attr_getguardsize":["int","(const pthread_attr_t *, int *)"],
"pthread_attr_setguardsize":["int","(pthread_attr_t *, int)"],
"pthread_attr_getschedparam":["int","(const pthread_attr_t *restrict, struct sched_param *restrict)"],
"pthread_attr_setschedparam":["int","(pthread_attr_t *restrict, const struct sched_param *restrict)"],
"pthread_attr_getschedpolicy":["int","(const pthread_attr_t *restrict, int *restrict)"],
"pthread_attr_setschedpolicy":["int","(pthread_attr_t *, int)"],
"pthread_attr_getinheritsched":["int","(const pthread_attr_t *restrict, int *restrict)"],
"pthread_attr_setinheritsched":["int","(pthread_attr_t *, int)"],
"pthread_attr_getscope":["int","(const pthread_attr_t *restrict, int *restrict)"],
"pthread_attr_setscope":["int","(pthread_attr_t *, int)"],
"pthread_attr_getstackaddr":["int","(const pthread_attr_t *restrict, void **restrict)"],
"pthread_attr_setstackaddr":["int","(pthread_attr_t *, void *)"],
"pthread_attr_getstacksize":["int","(const pthread_attr_t *restrict, int *restrict)"],
"pthread_attr_setstacksize":["int","(pthread_attr_t *, int)"],
"pthread_attr_getstack":["int","(const pthread_attr_t *restrict, void **restrict, int *restrict)"],
"pthread_attr_setstack":["int","(pthread_attr_t *, void *, int)"],
"pthread_setschedparam":["int","(pthread_t, int, const struct sched_param *)"],
"pthread_getschedparam":["int","(pthread_t, int *restrict, struct sched_param *restrict)"],
"pthread_setschedprio":["int","(pthread_t, int)"],
"pthread_once":["int","(pthread_once_t *, void (*)(void))"],
"pthread_setcancelstate":["int","(int, int *)"],
"pthread_setcanceltype":["int","(int, int *)"],
"pthread_cancel":["int","(pthread_t)"],
"pthread_testcancel":["void","()"],
"__pthread_register_cancel":["void","(__pthread_unwind_buf_t *)"],
"__pthread_unregister_cancel":["void","(__pthread_unwind_buf_t *)"],
"__pthread_unwind_next":["void","(__pthread_unwind_buf_t *)"],
"__sigsetjmp":["int","(struct __jmp_buf_tag *, int)"],
"pthread_mutex_init":["int","(pthread_mutex_t *, const pthread_mutexattr_t *)"],
"pthread_mutex_destroy":["int","(pthread_mutex_t *)"],
"pthread_mutex_trylock":["int","(pthread_mutex_t *)"],
"pthread_mutex_lock":["int","(pthread_mutex_t *)"],
"pthread_mutex_timedlock":["int","(pthread_mutex_t *restrict, const struct timespec *restrict)"],
"pthread_mutex_unlock":["int","(pthread_mutex_t *)"],
"pthread_mutex_getprioceiling":["int","(const pthread_mutex_t *restrict, int *restrict)"],
"pthread_mutex_setprioceiling":["int","(pthread_mutex_t *restrict, int, int *restrict)"],
"pthread_mutex_consistent":["int","(pthread_mutex_t *)"],
"pthread_mutexattr_init":["int","(pthread_mutexattr_t *)"],
"pthread_mutexattr_destroy":["int","(pthread_mutexattr_t *)"],
"pthread_mutexattr_getpshared":["int","(const pthread_mutexattr_t *restrict, int *restrict)"],
"pthread_mutexattr_setpshared":["int","(pthread_mutexattr_t *, int)"],
"pthread_mutexattr_gettype":["int","(const pthread_mutexattr_t *restrict, int *restrict)"],
"pthread_mutexattr_settype":["int","(pthread_mutexattr_t *, int)"],
"pthread_mutexattr_getprotocol":["int","(const pthread_mutexattr_t *restrict, int *restrict)"],
"pthread_mutexattr_setprotocol":["int","(pthread_mutexattr_t *, int)"],
"pthread_mutexattr_getprioceiling":["int","(const pthread_mutexattr_t *restrict, int *restrict)"],
"pthread_mutexattr_setprioceiling":["int","(pthread_mutexattr_t *, int)"],
"pthread_mutexattr_getrobust":["int","(const pthread_mutexattr_t *, int *)"],
"pthread_mutexattr_setrobust":["int","(pthread_mutexattr_t *, int)"],
"pthread_rwlock_init":["int","(pthread_rwlock_t *restrict, const pthread_rwlockattr_t *restrict)"],
"pthread_rwlock_destroy":["int","(pthread_rwlock_t *)"],
"pthread_rwlock_rdlock":["int","(pthread_rwlock_t *)"],
"pthread_rwlock_tryrdlock":["int","(pthread_rwlock_t *)"],
"pthread_rwlock_timedrdlock":["int","(pthread_rwlock_t *restrict, const struct timespec *restrict)"],
"pthread_rwlock_wrlock":["int","(pthread_rwlock_t *)"],
"pthread_rwlock_trywrlock":["int","(pthread_rwlock_t *)"],
"pthread_rwlock_timedwrlock":["int","(pthread_rwlock_t *restrict, const struct timespec *restrict)"],
"pthread_rwlock_unlock":["int","(pthread_rwlock_t *)"],
"pthread_rwlockattr_init":["int","(pthread_rwlockattr_t *)"],
"pthread_rwlockattr_destroy":["int","(pthread_rwlockattr_t *)"],
"pthread_rwlockattr_getpshared":["int","(const pthread_rwlockattr_t *restrict, int *restrict)"],
"pthread_rwlockattr_setpshared":["int","(pthread_rwlockattr_t *, int)"],
"pthread_rwlockattr_getkind_np":["int","(const pthread_rwlockattr_t *restrict, int *restrict)"],
"pthread_rwlockattr_setkind_np":["int","(pthread_rwlockattr_t *, int)"],
"pthread_cond_init":["int","(pthread_cond_t *restrict, const pthread_condattr_t *restrict)"],
"pthread_cond_destroy":["int","(pthread_cond_t *)"],
"pthread_cond_signal":["int","(pthread_cond_t *)"],
"pthread_cond_broadcast":["int","(pthread_cond_t *)"],
"pthread_cond_wait":["int","(pthread_cond_t *restrict, pthread_mutex_t *restrict)"],
"pthread_cond_timedwait":["int","(pthread_cond_t *restrict, pthread_mutex_t *restrict, const struct timespec *restrict)"],
"pthread_condattr_init":["int","(pthread_condattr_t *)"],
"pthread_condattr_destroy":["int","(pthread_condattr_t *)"],
"pthread_condattr_getpshared":["int","(const pthread_condattr_t *restrict, int *restrict)"],
"pthread_condattr_setpshared":["int","(pthread_condattr_t *, int)"],
"pthread_condattr_getclock":["int","(const pthread_condattr_t *restrict, __clockid_t *restrict)"],
"pthread_condattr_setclock":["int","(pthread_condattr_t *, __clockid_t)"],
"pthread_spin_init":["int","(pthread_spinlock_t *, int)"],
"pthread_spin_destroy":["int","(pthread_spinlock_t *)"],
"pthread_spin_lock":["int","(pthread_spinlock_t *)"],
"pthread_spin_trylock":["int","(pthread_spinlock_t *)"],
"pthread_spin_unlock":["int","(pthread_spinlock_t *)"],
"pthread_barrier_init":["int","(pthread_barrier_t *restrict, const pthread_barrierattr_t *restrict, unsigned int)"],
"pthread_barrier_destroy":["int","(pthread_barrier_t *)"],
"pthread_barrier_wait":["int","(pthread_barrier_t *)"],
"pthread_barrierattr_init":["int","(pthread_barrierattr_t *)"],
"pthread_barrierattr_destroy":["int","(pthread_barrierattr_t *)"],
"pthread_barrierattr_getpshared":["int","(const pthread_barrierattr_t *restrict, int *restrict)"],
"pthread_barrierattr_setpshared":["int","(pthread_barrierattr_t *, int)"],
"pthread_key_create":["int","(pthread_key_t *, void (*)(void *))"],
"pthread_key_delete":["int","(pthread_key_t)"],
"pthread_getspecific":["void *","(pthread_key_t)"],
"pthread_setspecific":["int","(pthread_key_t, const void *)"],
"pthread_getcpuclockid":["int","(pthread_t, __clockid_t *)"],
"pthread_atfork":["int","(void (*)(void), void (*)(void), void (*)(void))"],
"opendir":["DIR *","(const char *)"],
"fdopendir":["DIR *","(int)"],
"closedir":["int","(DIR *)"],
"readdir":["struct dirent *","(DIR *)"],
"readdir_r":["int","(DIR *restrict, struct dirent *restrict, struct dirent **restrict)"],
"rewinddir":["void","(DIR *)"],
"seekdir":["void","(DIR *, long)"],
"telldir":["long","(DIR *)"],
"dirfd":["int","(DIR *)"],
"scandir":["int","(const char *restrict, struct dirent ***restrict, int (*)(const struct dirent *), int (*)(const struct dirent **, const struct dirent **))"],
"alphasort":["int","(const struct dirent **, const struct dirent **)"],
"getdirentries":["__ssize_t","(int, char *restrict, int, __off_t *restrict)"],
"_obstack_newchunk":["void","(struct obstack *, int)"],
"_obstack_begin":["int","(struct obstack *, int, int, void *(*)(long), void (*)(void *))"],
"_obstack_begin_1":["int","(struct obstack *, int, int, void *(*)(void *, long), void (*)(void *, void *), void *)"],
"_obstack_memory_used":["int","(struct obstack *)"],
"obstack_free":["void","(struct obstack *, void *)"],
"getopt_long":["int","(int, char *const *, const char *, const struct option *, int *)"],
"getopt_long_only":["int","(int, char *const *, const char *, const struct option *, int *)"],
"catopen":["nl_catd","(const char *, int)"],
"catgets":["char *","(nl_catd, int, int, const char *)"],
"catclose":["int","(nl_catd)"],
"AES_options":["const char *","()"],
"AES_set_encrypt_key":["int","(const unsigned char *, const int, AES_KEY *)"],
"AES_set_decrypt_key":["int","(const unsigned char *, const int, AES_KEY *)"],
"AES_encrypt":["void","(const unsigned char *, unsigned char *, const AES_KEY *)"],
"AES_decrypt":["void","(const unsigned char *, unsigned char *, const AES_KEY *)"],
"AES_ecb_encrypt":["void","(const unsigned char *, unsigned char *, const AES_KEY *, const int)"],
"AES_cbc_encrypt":["void","(const unsigned char *, unsigned char *, int, const AES_KEY *, unsigned char *, const int)"],
"AES_cfb128_encrypt":["void","(const unsigned char *, unsigned char *, int, const AES_KEY *, unsigned char *, int *, const int)"],
"AES_cfb1_encrypt":["void","(const unsigned char *, unsigned char *, int, const AES_KEY *, unsigned char *, int *, const int)"],
"AES_cfb8_encrypt":["void","(const unsigned char *, unsigned char *, int, const AES_KEY *, unsigned char *, int *, const int)"],
"AES_ofb128_encrypt":["void","(const unsigned char *, unsigned char *, int, const AES_KEY *, unsigned char *, int *)"],
"AES_ige_encrypt":["void","(const unsigned char *, unsigned char *, int, const AES_KEY *, unsigned char *, const int)"],
"AES_bi_ige_encrypt":["void","(const unsigned char *, unsigned char *, int, const AES_KEY *, const AES_KEY *, const unsigned char *, const int)"],
"AES_wrap_key":["int","(AES_KEY *, const unsigned char *, unsigned char *, const unsigned char *, unsigned int)"],
"AES_unwrap_key":["int","(AES_KEY *, const unsigned char *, unsigned char *, const unsigned char *, unsigned int)"],
"OPENSSL_sk_num":["int","(const OPENSSL_STACK *)"],
"OPENSSL_sk_value":["void *","(const OPENSSL_STACK *, int)"],
"OPENSSL_sk_set":["void *","(OPENSSL_STACK *, int, const void *)"],
"OPENSSL_sk_new":["OPENSSL_STACK *","(OPENSSL_sk_compfunc)"],
"OPENSSL_sk_new_null":["OPENSSL_STACK *","()"],
"OPENSSL_sk_new_reserve":["OPENSSL_STACK *","(OPENSSL_sk_compfunc, int)"],
"OPENSSL_sk_reserve":["int","(OPENSSL_STACK *, int)"],
"OPENSSL_sk_free":["void","(OPENSSL_STACK *)"],
"OPENSSL_sk_pop_free":["void","(OPENSSL_STACK *, void (*)(void *))"],
"OPENSSL_sk_deep_copy":["OPENSSL_STACK *","(const OPENSSL_STACK *, OPENSSL_sk_copyfunc, OPENSSL_sk_freefunc)"],
"OPENSSL_sk_insert":["int","(OPENSSL_STACK *, const void *, int)"],
"OPENSSL_sk_delete":["void *","(OPENSSL_STACK *, int)"],
"OPENSSL_sk_delete_ptr":["void *","(OPENSSL_STACK *, const void *)"],
"OPENSSL_sk_find":["int","(OPENSSL_STACK *, const void *)"],
"OPENSSL_sk_find_ex":["int","(OPENSSL_STACK *, const void *)"],
"OPENSSL_sk_push":["int","(OPENSSL_STACK *, const void *)"],
"OPENSSL_sk_unshift":["int","(OPENSSL_STACK *, const void *)"],
"OPENSSL_sk_shift":["void *","(OPENSSL_STACK *)"],
"OPENSSL_sk_pop":["void *","(OPENSSL_STACK *)"],
"OPENSSL_sk_zero":["void","(OPENSSL_STACK *)"],
"OPENSSL_sk_set_cmp_func":["OPENSSL_sk_compfunc","(OPENSSL_STACK *, OPENSSL_sk_compfunc)"],
"OPENSSL_sk_dup":["OPENSSL_STACK *","(const OPENSSL_STACK *)"],
"OPENSSL_sk_sort":["void","(OPENSSL_STACK *)"],
"OPENSSL_sk_is_sorted":["int","(const OPENSSL_STACK *)"],
"sk_OPENSSL_STRING_num":["int","(const struct stack_st_OPENSSL_STRING *)"],
"sk_OPENSSL_STRING_value":["char *","(const struct stack_st_OPENSSL_STRING *, int)"],
"sk_OPENSSL_STRING_new":["struct stack_st_OPENSSL_STRING *","(sk_OPENSSL_STRING_compfunc)"],
"sk_OPENSSL_STRING_new_null":["struct stack_st_OPENSSL_STRING *","()"],
"sk_OPENSSL_STRING_new_reserve":["struct stack_st_OPENSSL_STRING *","(sk_OPENSSL_STRING_compfunc, int)"],
"sk_OPENSSL_STRING_reserve":["int","(struct stack_st_OPENSSL_STRING *, int)"],
"sk_OPENSSL_STRING_free":["void","(struct stack_st_OPENSSL_STRING *)"],
"sk_OPENSSL_STRING_zero":["void","(struct stack_st_OPENSSL_STRING *)"],
"sk_OPENSSL_STRING_delete":["char *","(struct stack_st_OPENSSL_STRING *, int)"],
"sk_OPENSSL_STRING_delete_ptr":["char *","(struct stack_st_OPENSSL_STRING *, char *)"],
"sk_OPENSSL_STRING_push":["int","(struct stack_st_OPENSSL_STRING *, char *)"],
"sk_OPENSSL_STRING_unshift":["int","(struct stack_st_OPENSSL_STRING *, char *)"],
"sk_OPENSSL_STRING_pop":["char *","(struct stack_st_OPENSSL_STRING *)"],
"sk_OPENSSL_STRING_shift":["char *","(struct stack_st_OPENSSL_STRING *)"],
"sk_OPENSSL_STRING_pop_free":["void","(struct stack_st_OPENSSL_STRING *, sk_OPENSSL_STRING_freefunc)"],
"sk_OPENSSL_STRING_insert":["int","(struct stack_st_OPENSSL_STRING *, char *, int)"],
"sk_OPENSSL_STRING_set":["char *","(struct stack_st_OPENSSL_STRING *, int, char *)"],
"sk_OPENSSL_STRING_find":["int","(struct stack_st_OPENSSL_STRING *, char *)"],
"sk_OPENSSL_STRING_find_ex":["int","(struct stack_st_OPENSSL_STRING *, char *)"],
"sk_OPENSSL_STRING_sort":["void","(struct stack_st_OPENSSL_STRING *)"],
"sk_OPENSSL_STRING_is_sorted":["int","(const struct stack_st_OPENSSL_STRING *)"],
"sk_OPENSSL_STRING_dup":["struct stack_st_OPENSSL_STRING *","(const struct stack_st_OPENSSL_STRING *)"],
"sk_OPENSSL_STRING_deep_copy":["struct stack_st_OPENSSL_STRING *","(const struct stack_st_OPENSSL_STRING *, sk_OPENSSL_STRING_copyfunc, sk_OPENSSL_STRING_freefunc)"],
"sk_OPENSSL_STRING_set_cmp_func":["sk_OPENSSL_STRING_compfunc","(struct stack_st_OPENSSL_STRING *, sk_OPENSSL_STRING_compfunc)"],
"sk_OPENSSL_CSTRING_num":["int","(const struct stack_st_OPENSSL_CSTRING *)"],
"sk_OPENSSL_CSTRING_value":["const char *","(const struct stack_st_OPENSSL_CSTRING *, int)"],
"sk_OPENSSL_CSTRING_new":["struct stack_st_OPENSSL_CSTRING *","(sk_OPENSSL_CSTRING_compfunc)"],
"sk_OPENSSL_CSTRING_new_null":["struct stack_st_OPENSSL_CSTRING *","()"],
"sk_OPENSSL_CSTRING_new_reserve":["struct stack_st_OPENSSL_CSTRING *","(sk_OPENSSL_CSTRING_compfunc, int)"],
"sk_OPENSSL_CSTRING_reserve":["int","(struct stack_st_OPENSSL_CSTRING *, int)"],
"sk_OPENSSL_CSTRING_free":["void","(struct stack_st_OPENSSL_CSTRING *)"],
"sk_OPENSSL_CSTRING_zero":["void","(struct stack_st_OPENSSL_CSTRING *)"],
"sk_OPENSSL_CSTRING_delete":["const char *","(struct stack_st_OPENSSL_CSTRING *, int)"],
"sk_OPENSSL_CSTRING_delete_ptr":["const char *","(struct stack_st_OPENSSL_CSTRING *, const char *)"],
"sk_OPENSSL_CSTRING_push":["int","(struct stack_st_OPENSSL_CSTRING *, const char *)"],
"sk_OPENSSL_CSTRING_unshift":["int","(struct stack_st_OPENSSL_CSTRING *, const char *)"],
"sk_OPENSSL_CSTRING_pop":["const char *","(struct stack_st_OPENSSL_CSTRING *)"],
"sk_OPENSSL_CSTRING_shift":["const char *","(struct stack_st_OPENSSL_CSTRING *)"],
"sk_OPENSSL_CSTRING_pop_free":["void","(struct stack_st_OPENSSL_CSTRING *, sk_OPENSSL_CSTRING_freefunc)"],
"sk_OPENSSL_CSTRING_insert":["int","(struct stack_st_OPENSSL_CSTRING *, const char *, int)"],
"sk_OPENSSL_CSTRING_set":["const char *","(struct stack_st_OPENSSL_CSTRING *, int, const char *)"],
"sk_OPENSSL_CSTRING_find":["int","(struct stack_st_OPENSSL_CSTRING *, const char *)"],
"sk_OPENSSL_CSTRING_find_ex":["int","(struct stack_st_OPENSSL_CSTRING *, const char *)"],
"sk_OPENSSL_CSTRING_sort":["void","(struct stack_st_OPENSSL_CSTRING *)"],
"sk_OPENSSL_CSTRING_is_sorted":["int","(const struct stack_st_OPENSSL_CSTRING *)"],
"sk_OPENSSL_CSTRING_dup":["struct stack_st_OPENSSL_CSTRING *","(const struct stack_st_OPENSSL_CSTRING *)"],
"sk_OPENSSL_CSTRING_deep_copy":["struct stack_st_OPENSSL_CSTRING *","(const struct stack_st_OPENSSL_CSTRING *, sk_OPENSSL_CSTRING_copyfunc, sk_OPENSSL_CSTRING_freefunc)"],
"sk_OPENSSL_CSTRING_set_cmp_func":["sk_OPENSSL_CSTRING_compfunc","(struct stack_st_OPENSSL_CSTRING *, sk_OPENSSL_CSTRING_compfunc)"],
"sk_OPENSSL_BLOCK_num":["int","(const struct stack_st_OPENSSL_BLOCK *)"],
"sk_OPENSSL_BLOCK_value":["void *","(const struct stack_st_OPENSSL_BLOCK *, int)"],
"sk_OPENSSL_BLOCK_new":["struct stack_st_OPENSSL_BLOCK *","(sk_OPENSSL_BLOCK_compfunc)"],
"sk_OPENSSL_BLOCK_new_null":["struct stack_st_OPENSSL_BLOCK *","()"],
"sk_OPENSSL_BLOCK_new_reserve":["struct stack_st_OPENSSL_BLOCK *","(sk_OPENSSL_BLOCK_compfunc, int)"],
"sk_OPENSSL_BLOCK_reserve":["int","(struct stack_st_OPENSSL_BLOCK *, int)"],
"sk_OPENSSL_BLOCK_free":["void","(struct stack_st_OPENSSL_BLOCK *)"],
"sk_OPENSSL_BLOCK_zero":["void","(struct stack_st_OPENSSL_BLOCK *)"],
"sk_OPENSSL_BLOCK_delete":["void *","(struct stack_st_OPENSSL_BLOCK *, int)"],
"sk_OPENSSL_BLOCK_delete_ptr":["void *","(struct stack_st_OPENSSL_BLOCK *, void *)"],
"sk_OPENSSL_BLOCK_push":["int","(struct stack_st_OPENSSL_BLOCK *, void *)"],
"sk_OPENSSL_BLOCK_unshift":["int","(struct stack_st_OPENSSL_BLOCK *, void *)"],
"sk_OPENSSL_BLOCK_pop":["void *","(struct stack_st_OPENSSL_BLOCK *)"],
"sk_OPENSSL_BLOCK_shift":["void *","(struct stack_st_OPENSSL_BLOCK *)"],
"sk_OPENSSL_BLOCK_pop_free":["void","(struct stack_st_OPENSSL_BLOCK *, sk_OPENSSL_BLOCK_freefunc)"],
"sk_OPENSSL_BLOCK_insert":["int","(struct stack_st_OPENSSL_BLOCK *, void *, int)"],
"sk_OPENSSL_BLOCK_set":["void *","(struct stack_st_OPENSSL_BLOCK *, int, void *)"],
"sk_OPENSSL_BLOCK_find":["int","(struct stack_st_OPENSSL_BLOCK *, void *)"],
"sk_OPENSSL_BLOCK_find_ex":["int","(struct stack_st_OPENSSL_BLOCK *, void *)"],
"sk_OPENSSL_BLOCK_sort":["void","(struct stack_st_OPENSSL_BLOCK *)"],
"sk_OPENSSL_BLOCK_is_sorted":["int","(const struct stack_st_OPENSSL_BLOCK *)"],
"sk_OPENSSL_BLOCK_dup":["struct stack_st_OPENSSL_BLOCK *","(const struct stack_st_OPENSSL_BLOCK *)"],
"sk_OPENSSL_BLOCK_deep_copy":["struct stack_st_OPENSSL_BLOCK *","(const struct stack_st_OPENSSL_BLOCK *, sk_OPENSSL_BLOCK_copyfunc, sk_OPENSSL_BLOCK_freefunc)"],
"sk_OPENSSL_BLOCK_set_cmp_func":["sk_OPENSSL_BLOCK_compfunc","(struct stack_st_OPENSSL_BLOCK *, sk_OPENSSL_BLOCK_compfunc)"],
"ERR_load_CRYPTO_strings":["int","()"],
"CRYPTO_THREAD_lock_new":["CRYPTO_RWLOCK *","()"],
"CRYPTO_THREAD_read_lock":["int","(CRYPTO_RWLOCK *)"],
"CRYPTO_THREAD_write_lock":["int","(CRYPTO_RWLOCK *)"],
"CRYPTO_THREAD_unlock":["int","(CRYPTO_RWLOCK *)"],
"CRYPTO_THREAD_lock_free":["void","(CRYPTO_RWLOCK *)"],
"CRYPTO_atomic_add":["int","(int *, int, int *, CRYPTO_RWLOCK *)"],
"sk_void_num":["int","(const struct stack_st_void *)"],
"sk_void_value":["void *","(const struct stack_st_void *, int)"],
"sk_void_new":["struct stack_st_void *","(sk_void_compfunc)"],
"sk_void_new_null":["struct stack_st_void *","()"],
"sk_void_new_reserve":["struct stack_st_void *","(sk_void_compfunc, int)"],
"sk_void_reserve":["int","(struct stack_st_void *, int)"],
"sk_void_free":["void","(struct stack_st_void *)"],
"sk_void_zero":["void","(struct stack_st_void *)"],
"sk_void_delete":["void *","(struct stack_st_void *, int)"],
"sk_void_delete_ptr":["void *","(struct stack_st_void *, void *)"],
"sk_void_push":["int","(struct stack_st_void *, void *)"],
"sk_void_unshift":["int","(struct stack_st_void *, void *)"],
"sk_void_pop":["void *","(struct stack_st_void *)"],
"sk_void_shift":["void *","(struct stack_st_void *)"],
"sk_void_pop_free":["void","(struct stack_st_void *, sk_void_freefunc)"],
"sk_void_insert":["int","(struct stack_st_void *, void *, int)"],
"sk_void_set":["void *","(struct stack_st_void *, int, void *)"],
"sk_void_find":["int","(struct stack_st_void *, void *)"],
"sk_void_find_ex":["int","(struct stack_st_void *, void *)"],
"sk_void_sort":["void","(struct stack_st_void *)"],
"sk_void_is_sorted":["int","(const struct stack_st_void *)"],
"sk_void_dup":["struct stack_st_void *","(const struct stack_st_void *)"],
"sk_void_deep_copy":["struct stack_st_void *","(const struct stack_st_void *, sk_void_copyfunc, sk_void_freefunc)"],
"sk_void_set_cmp_func":["sk_void_compfunc","(struct stack_st_void *, sk_void_compfunc)"],
"CRYPTO_mem_ctrl":["int","(int)"],
"OPENSSL_strlcpy":["int","(char *, const char *, int)"],
"OPENSSL_strlcat":["int","(char *, const char *, int)"],
"OPENSSL_strnlen":["int","(const char *, int)"],
"OPENSSL_buf2hexstr":["char *","(const unsigned char *, long)"],
"OPENSSL_hexstr2buf":["unsigned char *","(const char *, long *)"],
"OPENSSL_hexchar2int":["int","(unsigned char)"],
"OpenSSL_version_num":["unsigned long","()"],
"OpenSSL_version":["const char *","(int)"],
"OPENSSL_issetugid":["int","()"],
"CRYPTO_get_ex_new_index":["int","(int, long, void *, CRYPTO_EX_new *, CRYPTO_EX_dup *, CRYPTO_EX_free *)"],
"CRYPTO_free_ex_index":["int","(int, int)"],
"CRYPTO_new_ex_data":["int","(int, void *, CRYPTO_EX_DATA *)"],
"CRYPTO_dup_ex_data":["int","(int, CRYPTO_EX_DATA *, const CRYPTO_EX_DATA *)"],
"CRYPTO_free_ex_data":["void","(int, void *, CRYPTO_EX_DATA *)"],
"CRYPTO_set_ex_data":["int","(CRYPTO_EX_DATA *, int, void *)"],
"CRYPTO_get_ex_data":["void *","(const CRYPTO_EX_DATA *, int)"],
"CRYPTO_set_mem_functions":["int","(void *(*)(), void *(*)(void *, int, const char *, int), void (*)(void *, const char *, int))"],
"CRYPTO_set_mem_debug":["int","(int)"],
"CRYPTO_get_mem_functions":["void","(void *(**)(), void *(**)(void *, int, const char *, int), void (**)(void *, const char *, int))"],
"CRYPTO_malloc":["void *","(int, const char *, int)"],
"CRYPTO_zalloc":["void *","(int, const char *, int)"],
"CRYPTO_memdup":["void *","(const void *, int, const char *, int)"],
"CRYPTO_strdup":["char *","(const char *, const char *, int)"],
"CRYPTO_strndup":["char *","(const char *, int, const char *, int)"],
"CRYPTO_free":["void","(void *, const char *, int)"],
"CRYPTO_clear_free":["void","(void *, int, const char *, int)"],
"CRYPTO_realloc":["void *","(void *, int, const char *, int)"],
"CRYPTO_clear_realloc":["void *","(void *, int, int, const char *, int)"],
"CRYPTO_secure_malloc_init":["int","(int, int)"],
"CRYPTO_secure_malloc_done":["int","()"],
"CRYPTO_secure_malloc":["void *","(int, const char *, int)"],
"CRYPTO_secure_zalloc":["void *","(int, const char *, int)"],
"CRYPTO_secure_free":["void","(void *, const char *, int)"],
"CRYPTO_secure_clear_free":["void","(void *, int, const char *, int)"],
"CRYPTO_secure_allocated":["int","(const void *)"],
"CRYPTO_secure_malloc_initialized":["int","()"],
"CRYPTO_secure_actual_size":["int","(void *)"],
"CRYPTO_secure_used":["int","()"],
"OPENSSL_cleanse":["void","(void *, int)"],
"OPENSSL_die":["void","(const char *, const char *, int)"],
"OPENSSL_isservice":["int","()"],
"FIPS_mode":["int","()"],
"FIPS_mode_set":["int","(int)"],
"OPENSSL_init":["void","()"],
"OPENSSL_fork_prepare":["void","()"],
"OPENSSL_fork_parent":["void","()"],
"OPENSSL_fork_child":["void","()"],
"OPENSSL_gmtime":["struct tm *","(const time_t *, struct tm *)"],
"OPENSSL_gmtime_adj":["int","(struct tm *, int, long)"],
"OPENSSL_gmtime_diff":["int","(int *, int *, const struct tm *, const struct tm *)"],
"CRYPTO_memcmp":["int","(const void *, const void *, int)"],
"OPENSSL_cleanup":["void","()"],
"OPENSSL_init_crypto":["int","(int, const OPENSSL_INIT_SETTINGS *)"],
"OPENSSL_atexit":["int","(void (*)(void))"],
"OPENSSL_thread_stop":["void","()"],
"OPENSSL_INIT_new":["OPENSSL_INIT_SETTINGS *","()"],
"OPENSSL_INIT_set_config_filename":["int","(OPENSSL_INIT_SETTINGS *, const char *)"],
"OPENSSL_INIT_set_config_file_flags":["void","(OPENSSL_INIT_SETTINGS *, unsigned long)"],
"OPENSSL_INIT_set_config_appname":["int","(OPENSSL_INIT_SETTINGS *, const char *)"],
"OPENSSL_INIT_free":["void","(OPENSSL_INIT_SETTINGS *)"],
"CRYPTO_THREAD_run_once":["int","(CRYPTO_ONCE *, void (*)(void))"],
"CRYPTO_THREAD_init_local":["int","(CRYPTO_THREAD_LOCAL *, void (*)(void *))"],
"CRYPTO_THREAD_get_local":["void *","(CRYPTO_THREAD_LOCAL *)"],
"CRYPTO_THREAD_set_local":["int","(CRYPTO_THREAD_LOCAL *, void *)"],
"CRYPTO_THREAD_cleanup_local":["int","(CRYPTO_THREAD_LOCAL *)"],
"CRYPTO_THREAD_get_current_id":["CRYPTO_THREAD_ID","()"],
"CRYPTO_THREAD_compare_id":["int","(CRYPTO_THREAD_ID, CRYPTO_THREAD_ID)"],
"ERR_load_BIO_strings":["int","()"],
"BIO_get_new_index":["int","()"],
"BIO_set_flags":["void","(BIO *, int)"],
"BIO_test_flags":["int","(const BIO *, int)"],
"BIO_clear_flags":["void","(BIO *, int)"],
"BIO_get_callback":["BIO_callback_fn","(const BIO *)"],
"BIO_set_callback":["void","(BIO *, BIO_callback_fn)"],
"BIO_get_callback_ex":["BIO_callback_fn_ex","(const BIO *)"],
"BIO_set_callback_ex":["void","(BIO *, BIO_callback_fn_ex)"],
"BIO_get_callback_arg":["char *","(const BIO *)"],
"BIO_set_callback_arg":["void","(BIO *, char *)"],
"BIO_method_name":["const char *","(const BIO *)"],
"BIO_method_type":["int","(const BIO *)"],
"sk_BIO_num":["int","(const struct stack_st_BIO *)"],
"sk_BIO_value":["BIO *","(const struct stack_st_BIO *, int)"],
"sk_BIO_new":["struct stack_st_BIO *","(sk_BIO_compfunc)"],
"sk_BIO_new_null":["struct stack_st_BIO *","()"],
"sk_BIO_new_reserve":["struct stack_st_BIO *","(sk_BIO_compfunc, int)"],
"sk_BIO_reserve":["int","(struct stack_st_BIO *, int)"],
"sk_BIO_free":["void","(struct stack_st_BIO *)"],
"sk_BIO_zero":["void","(struct stack_st_BIO *)"],
"sk_BIO_delete":["BIO *","(struct stack_st_BIO *, int)"],
"sk_BIO_delete_ptr":["BIO *","(struct stack_st_BIO *, BIO *)"],
"sk_BIO_push":["int","(struct stack_st_BIO *, BIO *)"],
"sk_BIO_unshift":["int","(struct stack_st_BIO *, BIO *)"],
"sk_BIO_pop":["BIO *","(struct stack_st_BIO *)"],
"sk_BIO_shift":["BIO *","(struct stack_st_BIO *)"],
"sk_BIO_pop_free":["void","(struct stack_st_BIO *, sk_BIO_freefunc)"],
"sk_BIO_insert":["int","(struct stack_st_BIO *, BIO *, int)"],
"sk_BIO_set":["BIO *","(struct stack_st_BIO *, int, BIO *)"],
"sk_BIO_find":["int","(struct stack_st_BIO *, BIO *)"],
"sk_BIO_find_ex":["int","(struct stack_st_BIO *, BIO *)"],
"sk_BIO_sort":["void","(struct stack_st_BIO *)"],
"sk_BIO_is_sorted":["int","(const struct stack_st_BIO *)"],
"sk_BIO_dup":["struct stack_st_BIO *","(const struct stack_st_BIO *)"],
"sk_BIO_deep_copy":["struct stack_st_BIO *","(const struct stack_st_BIO *, sk_BIO_copyfunc, sk_BIO_freefunc)"],
"sk_BIO_set_cmp_func":["sk_BIO_compfunc","(struct stack_st_BIO *, sk_BIO_compfunc)"],
"BIO_ctrl_pending":["int","(BIO *)"],
"BIO_ctrl_wpending":["int","(BIO *)"],
"BIO_ctrl_get_write_guarantee":["int","(BIO *)"],
"BIO_ctrl_get_read_request":["int","(BIO *)"],
"BIO_ctrl_reset_read_request":["int","(BIO *)"],
"BIO_set_ex_data":["int","(BIO *, int, void *)"],
"BIO_get_ex_data":["void *","(BIO *, int)"],
"BIO_number_read":["int","(BIO *)"],
"BIO_number_written":["int","(BIO *)"],
"BIO_asn1_set_prefix":["int","(BIO *, asn1_ps_func *, asn1_ps_func *)"],
"BIO_asn1_get_prefix":["int","(BIO *, asn1_ps_func **, asn1_ps_func **)"],
"BIO_asn1_set_suffix":["int","(BIO *, asn1_ps_func *, asn1_ps_func *)"],
"BIO_asn1_get_suffix":["int","(BIO *, asn1_ps_func **, asn1_ps_func **)"],
"BIO_s_file":["const BIO_METHOD *","()"],
"BIO_new_file":["BIO *","(const char *, const char *)"],
"BIO_new_fp":["BIO *","(int *, int)"],
"BIO_new":["BIO *","(const BIO_METHOD *)"],
"BIO_free":["int","(BIO *)"],
"BIO_set_data":["void","(BIO *, void *)"],
"BIO_get_data":["void *","(BIO *)"],
"BIO_set_init":["void","(BIO *, int)"],
"BIO_get_init":["int","(BIO *)"],
"BIO_set_shutdown":["void","(BIO *, int)"],
"BIO_get_shutdown":["int","(BIO *)"],
"BIO_vfree":["void","(BIO *)"],
"BIO_up_ref":["int","(BIO *)"],
"BIO_read":["int","(BIO *, void *, int)"],
"BIO_read_ex":["int","(BIO *, void *, int, int *)"],
"BIO_gets":["int","(BIO *, char *, int)"],
"BIO_write":["int","(BIO *, const void *, int)"],
"BIO_write_ex":["int","(BIO *, const void *, int, int *)"],
"BIO_puts":["int","(BIO *, const char *)"],
"BIO_indent":["int","(BIO *, int, int)"],
"BIO_ctrl":["long","(BIO *, int, long, void *)"],
"BIO_callback_ctrl":["long","(BIO *, int, BIO_info_cb *)"],
"BIO_ptr_ctrl":["void *","(BIO *, int, long)"],
"BIO_int_ctrl":["long","(BIO *, int, long, int)"],
"BIO_push":["BIO *","(BIO *, BIO *)"],
"BIO_pop":["BIO *","(BIO *)"],
"BIO_free_all":["void","(BIO *)"],
"BIO_find_type":["BIO *","(BIO *, int)"],
"BIO_next":["BIO *","(BIO *)"],
"BIO_set_next":["void","(BIO *, BIO *)"],
"BIO_get_retry_BIO":["BIO *","(BIO *, int *)"],
"BIO_get_retry_reason":["int","(BIO *)"],
"BIO_set_retry_reason":["void","(BIO *, int)"],
"BIO_dup_chain":["BIO *","(BIO *)"],
"BIO_nread0":["int","(BIO *, char **)"],
"BIO_nread":["int","(BIO *, char **, int)"],
"BIO_nwrite0":["int","(BIO *, char **)"],
"BIO_nwrite":["int","(BIO *, char **, int)"],
"BIO_debug_callback":["long","(BIO *, int, const char *, int, long, long)"],
"BIO_s_mem":["const BIO_METHOD *","()"],
"BIO_s_secmem":["const BIO_METHOD *","()"],
"BIO_new_mem_buf":["BIO *","(const void *, int)"],
"BIO_s_socket":["const BIO_METHOD *","()"],
"BIO_s_connect":["const BIO_METHOD *","()"],
"BIO_s_accept":["const BIO_METHOD *","()"],
"BIO_s_fd":["const BIO_METHOD *","()"],
"BIO_s_log":["const BIO_METHOD *","()"],
"BIO_s_bio":["const BIO_METHOD *","()"],
"BIO_s_null":["const BIO_METHOD *","()"],
"BIO_f_null":["const BIO_METHOD *","()"],
"BIO_f_buffer":["const BIO_METHOD *","()"],
"BIO_f_linebuffer":["const BIO_METHOD *","()"],
"BIO_f_nbio_test":["const BIO_METHOD *","()"],
"BIO_s_datagram":["const BIO_METHOD *","()"],
"BIO_dgram_non_fatal_error":["int","(int)"],
"BIO_new_dgram":["BIO *","(int, int)"],
"BIO_sock_should_retry":["int","(int)"],
"BIO_sock_non_fatal_error":["int","(int)"],
"BIO_fd_should_retry":["int","(int)"],
"BIO_fd_non_fatal_error":["int","(int)"],
"BIO_dump_cb":["int","(int (*)(const void *, int, void *), void *, const char *, int)"],
"BIO_dump_indent_cb":["int","(int (*)(const void *, int, void *), void *, const char *, int, int)"],
"BIO_dump":["int","(BIO *, const char *, int)"],
"BIO_dump_indent":["int","(BIO *, const char *, int, int)"],
"BIO_dump_fp":["int","(int *, const char *, int)"],
"BIO_dump_indent_fp":["int","(int *, const char *, int, int)"],
"BIO_hex_string":["int","(BIO *, int, int, unsigned char *, int)"],
"BIO_ADDR_new":["BIO_ADDR *","()"],
"BIO_ADDR_rawmake":["int","(BIO_ADDR *, int, const void *, int, unsigned short)"],
"BIO_ADDR_free":["void","(BIO_ADDR *)"],
"BIO_ADDR_clear":["void","(BIO_ADDR *)"],
"BIO_ADDR_family":["int","(const BIO_ADDR *)"],
"BIO_ADDR_rawaddress":["int","(const BIO_ADDR *, void *, int *)"],
"BIO_ADDR_rawport":["unsigned short","(const BIO_ADDR *)"],
"BIO_ADDR_hostname_string":["char *","(const BIO_ADDR *, int)"],
"BIO_ADDR_service_string":["char *","(const BIO_ADDR *, int)"],
"BIO_ADDR_path_string":["char *","(const BIO_ADDR *)"],
"BIO_ADDRINFO_next":["const BIO_ADDRINFO *","(const BIO_ADDRINFO *)"],
"BIO_ADDRINFO_family":["int","(const BIO_ADDRINFO *)"],
"BIO_ADDRINFO_socktype":["int","(const BIO_ADDRINFO *)"],
"BIO_ADDRINFO_protocol":["int","(const BIO_ADDRINFO *)"],
"BIO_ADDRINFO_address":["const BIO_ADDR *","(const BIO_ADDRINFO *)"],
"BIO_ADDRINFO_free":["void","(BIO_ADDRINFO *)"],
"BIO_parse_hostserv":["int","(const char *, char **, char **, enum BIO_hostserv_priorities)"],
"BIO_lookup":["int","(const char *, const char *, enum BIO_lookup_type, int, int, BIO_ADDRINFO **)"],
"BIO_lookup_ex":["int","(const char *, const char *, int, int, int, int, BIO_ADDRINFO **)"],
"BIO_sock_error":["int","(int)"],
"BIO_socket_ioctl":["int","(int, long, void *)"],
"BIO_socket_nbio":["int","(int, int)"],
"BIO_sock_init":["int","()"],
"BIO_set_tcp_ndelay":["int","(int, int)"],
"BIO_gethostbyname":["struct hostent *","(const char *)"],
"BIO_get_port":["int","(const char *, unsigned short *)"],
"BIO_get_host_ip":["int","(const char *, unsigned char *)"],
"BIO_get_accept_socket":["int","(char *, int)"],
"BIO_accept":["int","(int, char **)"],
"BIO_sock_info":["int","(int, enum BIO_sock_info_type, union BIO_sock_info_u *)"],
"BIO_socket":["int","(int, int, int, int)"],
"BIO_connect":["int","(int, const BIO_ADDR *, int)"],
"BIO_bind":["int","(int, const BIO_ADDR *, int)"],
"BIO_listen":["int","(int, const BIO_ADDR *, int)"],
"BIO_accept_ex":["int","(int, BIO_ADDR *, int)"],
"BIO_closesocket":["int","(int)"],
"BIO_new_socket":["BIO *","(int, int)"],
"BIO_new_connect":["BIO *","(const char *)"],
"BIO_new_accept":["BIO *","(const char *)"],
"BIO_new_fd":["BIO *","(int, int)"],
"BIO_new_bio_pair":["int","(BIO **, int, BIO **, int)"],
"BIO_copy_next_retry":["void","(BIO *)"],
"BIO_printf":["int","(BIO *, const char *, ...)"],
"BIO_vprintf":["int","(BIO *, const char *, int)"],
"BIO_snprintf":["int","(char *, int, const char *, ...)"],
"BIO_vsnprintf":["int","(char *, int, const char *, int)"],
"BIO_meth_new":["BIO_METHOD *","(int, const char *)"],
"BIO_meth_free":["void","(BIO_METHOD *)"],
"BIO_meth_get_write":["int (*)(BIO *, const char *, int)","(const BIO_METHOD *)"],
"BIO_meth_get_write_ex":["int (*)(BIO *, const char *, int, int *)","(const BIO_METHOD *)"],
"BIO_meth_set_write":["int","(BIO_METHOD *, int (*)(BIO *, const char *, int))"],
"BIO_meth_set_write_ex":["int","(BIO_METHOD *, int (*)(BIO *, const char *, int, int *))"],
"BIO_meth_get_read":["int (*)(BIO *, char *, int)","(const BIO_METHOD *)"],
"BIO_meth_get_read_ex":["int (*)(BIO *, char *, int, int *)","(const BIO_METHOD *)"],
"BIO_meth_set_read":["int","(BIO_METHOD *, int (*)(BIO *, char *, int))"],
"BIO_meth_set_read_ex":["int","(BIO_METHOD *, int (*)(BIO *, char *, int, int *))"],
"BIO_meth_get_puts":["int (*)(BIO *, const char *)","(const BIO_METHOD *)"],
"BIO_meth_set_puts":["int","(BIO_METHOD *, int (*)(BIO *, const char *))"],
"BIO_meth_get_gets":["int (*)(BIO *, char *, int)","(const BIO_METHOD *)"],
"BIO_meth_set_gets":["int","(BIO_METHOD *, int (*)(BIO *, char *, int))"],
"BIO_meth_get_ctrl":["long (*)(BIO *, int, long, void *)","(const BIO_METHOD *)"],
"BIO_meth_set_ctrl":["int","(BIO_METHOD *, long (*)(BIO *, int, long, void *))"],
"BIO_meth_get_create":["int (*)(BIO *)","(const BIO_METHOD *)"],
"BIO_meth_set_create":["int","(BIO_METHOD *, int (*)(BIO *))"],
"BIO_meth_get_destroy":["int (*)(BIO *)","(const BIO_METHOD *)"],
"BIO_meth_set_destroy":["int","(BIO_METHOD *, int (*)(BIO *))"],
"BIO_meth_get_callback_ctrl":["long (*)(BIO *, int, BIO_info_cb *)","(const BIO_METHOD *)"],
"BIO_meth_set_callback_ctrl":["int","(BIO_METHOD *, long (*)(BIO *, int, BIO_info_cb *))"],
"ERR_load_ASN1_strings":["int","()"],
"ERR_load_BN_strings":["int","()"],
"BN_set_flags":["void","(BIGNUM *, int)"],
"BN_get_flags":["int","(const BIGNUM *, int)"],
"BN_with_flags":["void","(BIGNUM *, const BIGNUM *, int)"],
"BN_GENCB_call":["int","(BN_GENCB *, int, int)"],
"BN_GENCB_new":["BN_GENCB *","()"],
"BN_GENCB_free":["void","(BN_GENCB *)"],
"BN_GENCB_set_old":["void","(BN_GENCB *, void (*)(int, int, void *), void *)"],
"BN_GENCB_set":["void","(BN_GENCB *, int (*)(int, int, BN_GENCB *), void *)"],
"BN_GENCB_get_arg":["void *","(BN_GENCB *)"],
"BN_abs_is_word":["int","(const BIGNUM *, const unsigned long)"],
"BN_is_zero":["int","(const BIGNUM *)"],
"BN_is_one":["int","(const BIGNUM *)"],
"BN_is_word":["int","(const BIGNUM *, const unsigned long)"],
"BN_is_odd":["int","(const BIGNUM *)"],
"BN_zero_ex":["void","(BIGNUM *)"],
"BN_value_one":["const BIGNUM *","()"],
"BN_options":["char *","()"],
"BN_CTX_new":["BN_CTX *","()"],
"BN_CTX_secure_new":["BN_CTX *","()"],
"BN_CTX_free":["void","(BN_CTX *)"],
"BN_CTX_start":["void","(BN_CTX *)"],
"BN_CTX_get":["BIGNUM *","(BN_CTX *)"],
"BN_CTX_end":["void","(BN_CTX *)"],
"BN_rand":["int","(BIGNUM *, int, int, int)"],
"BN_priv_rand":["int","(BIGNUM *, int, int, int)"],
"BN_rand_range":["int","(BIGNUM *, const BIGNUM *)"],
"BN_priv_rand_range":["int","(BIGNUM *, const BIGNUM *)"],
"BN_pseudo_rand":["int","(BIGNUM *, int, int, int)"],
"BN_pseudo_rand_range":["int","(BIGNUM *, const BIGNUM *)"],
"BN_num_bits":["int","(const BIGNUM *)"],
"BN_num_bits_word":["int","(unsigned long)"],
"BN_security_bits":["int","(int, int)"],
"BN_new":["BIGNUM *","()"],
"BN_secure_new":["BIGNUM *","()"],
"BN_clear_free":["void","(BIGNUM *)"],
"BN_copy":["BIGNUM *","(BIGNUM *, const BIGNUM *)"],
"BN_swap":["void","(BIGNUM *, BIGNUM *)"],
"BN_bin2bn":["BIGNUM *","(const unsigned char *, int, BIGNUM *)"],
"BN_bn2bin":["int","(const BIGNUM *, unsigned char *)"],
"BN_bn2binpad":["int","(const BIGNUM *, unsigned char *, int)"],
"BN_lebin2bn":["BIGNUM *","(const unsigned char *, int, BIGNUM *)"],
"BN_bn2lebinpad":["int","(const BIGNUM *, unsigned char *, int)"],
"BN_mpi2bn":["BIGNUM *","(const unsigned char *, int, BIGNUM *)"],
"BN_bn2mpi":["int","(const BIGNUM *, unsigned char *)"],
"BN_sub":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *)"],
"BN_usub":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *)"],
"BN_uadd":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *)"],
"BN_add":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *)"],
"BN_mul":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_sqr":["int","(BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_set_negative":["void","(BIGNUM *, int)"],
"BN_is_negative":["int","(const BIGNUM *)"],
"BN_div":["int","(BIGNUM *, BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_nnmod":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_mod_add":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_mod_add_quick":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *)"],
"BN_mod_sub":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_mod_sub_quick":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *)"],
"BN_mod_mul":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_mod_sqr":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_mod_lshift1":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_mod_lshift1_quick":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *)"],
"BN_mod_lshift":["int","(BIGNUM *, const BIGNUM *, int, const BIGNUM *, BN_CTX *)"],
"BN_mod_lshift_quick":["int","(BIGNUM *, const BIGNUM *, int, const BIGNUM *)"],
"BN_mod_word":["unsigned long","(const BIGNUM *, unsigned long)"],
"BN_div_word":["unsigned long","(BIGNUM *, unsigned long)"],
"BN_mul_word":["int","(BIGNUM *, unsigned long)"],
"BN_add_word":["int","(BIGNUM *, unsigned long)"],
"BN_sub_word":["int","(BIGNUM *, unsigned long)"],
"BN_set_word":["int","(BIGNUM *, unsigned long)"],
"BN_get_word":["unsigned long","(const BIGNUM *)"],
"BN_cmp":["int","(const BIGNUM *, const BIGNUM *)"],
"BN_free":["void","(BIGNUM *)"],
"BN_is_bit_set":["int","(const BIGNUM *, int)"],
"BN_lshift":["int","(BIGNUM *, const BIGNUM *, int)"],
"BN_lshift1":["int","(BIGNUM *, const BIGNUM *)"],
"BN_exp":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_mod_exp":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_mod_exp_mont":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *)"],
"BN_mod_exp_mont_consttime":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *)"],
"BN_mod_exp_mont_word":["int","(BIGNUM *, unsigned long, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *)"],
"BN_mod_exp2_mont":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *)"],
"BN_mod_exp_simple":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_mask_bits":["int","(BIGNUM *, int)"],
"BN_print_fp":["int","(int *, const BIGNUM *)"],
"BN_print":["int","(BIO *, const BIGNUM *)"],
"BN_reciprocal":["int","(BIGNUM *, const BIGNUM *, int, BN_CTX *)"],
"BN_rshift":["int","(BIGNUM *, const BIGNUM *, int)"],
"BN_rshift1":["int","(BIGNUM *, const BIGNUM *)"],
"BN_clear":["void","(BIGNUM *)"],
"BN_dup":["BIGNUM *","(const BIGNUM *)"],
"BN_ucmp":["int","(const BIGNUM *, const BIGNUM *)"],
"BN_set_bit":["int","(BIGNUM *, int)"],
"BN_clear_bit":["int","(BIGNUM *, int)"],
"BN_bn2hex":["char *","(const BIGNUM *)"],
"BN_bn2dec":["char *","(const BIGNUM *)"],
"BN_hex2bn":["int","(BIGNUM **, const char *)"],
"BN_dec2bn":["int","(BIGNUM **, const char *)"],
"BN_asc2bn":["int","(BIGNUM **, const char *)"],
"BN_gcd":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_kronecker":["int","(const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_mod_inverse":["BIGNUM *","(BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_mod_sqrt":["BIGNUM *","(BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_consttime_swap":["void","(unsigned long, BIGNUM *, BIGNUM *, int)"],
"BN_generate_prime":["BIGNUM *","(BIGNUM *, int, int, const BIGNUM *, const BIGNUM *, void (*)(int, int, void *), void *)"],
"BN_is_prime":["int","(const BIGNUM *, int, void (*)(int, int, void *), BN_CTX *, void *)"],
"BN_is_prime_fasttest":["int","(const BIGNUM *, int, void (*)(int, int, void *), BN_CTX *, void *, int)"],
"BN_generate_prime_ex":["int","(BIGNUM *, int, int, const BIGNUM *, const BIGNUM *, BN_GENCB *)"],
"BN_is_prime_ex":["int","(const BIGNUM *, int, BN_CTX *, BN_GENCB *)"],
"BN_is_prime_fasttest_ex":["int","(const BIGNUM *, int, BN_CTX *, int, BN_GENCB *)"],
"BN_X931_generate_Xpq":["int","(BIGNUM *, BIGNUM *, int, BN_CTX *)"],
"BN_X931_derive_prime_ex":["int","(BIGNUM *, BIGNUM *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_GENCB *)"],
"BN_X931_generate_prime_ex":["int","(BIGNUM *, BIGNUM *, BIGNUM *, BIGNUM *, BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_GENCB *)"],
"BN_MONT_CTX_new":["BN_MONT_CTX *","()"],
"BN_mod_mul_montgomery":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, BN_MONT_CTX *, BN_CTX *)"],
"BN_to_montgomery":["int","(BIGNUM *, const BIGNUM *, BN_MONT_CTX *, BN_CTX *)"],
"BN_from_montgomery":["int","(BIGNUM *, const BIGNUM *, BN_MONT_CTX *, BN_CTX *)"],
"BN_MONT_CTX_free":["void","(BN_MONT_CTX *)"],
"BN_MONT_CTX_set":["int","(BN_MONT_CTX *, const BIGNUM *, BN_CTX *)"],
"BN_MONT_CTX_copy":["BN_MONT_CTX *","(BN_MONT_CTX *, BN_MONT_CTX *)"],
"BN_MONT_CTX_set_locked":["BN_MONT_CTX *","(BN_MONT_CTX **, CRYPTO_RWLOCK *, const BIGNUM *, BN_CTX *)"],
"BN_BLINDING_new":["BN_BLINDING *","(const BIGNUM *, const BIGNUM *, BIGNUM *)"],
"BN_BLINDING_free":["void","(BN_BLINDING *)"],
"BN_BLINDING_update":["int","(BN_BLINDING *, BN_CTX *)"],
"BN_BLINDING_convert":["int","(BIGNUM *, BN_BLINDING *, BN_CTX *)"],
"BN_BLINDING_invert":["int","(BIGNUM *, BN_BLINDING *, BN_CTX *)"],
"BN_BLINDING_convert_ex":["int","(BIGNUM *, BIGNUM *, BN_BLINDING *, BN_CTX *)"],
"BN_BLINDING_invert_ex":["int","(BIGNUM *, const BIGNUM *, BN_BLINDING *, BN_CTX *)"],
"BN_BLINDING_is_current_thread":["int","(BN_BLINDING *)"],
"BN_BLINDING_set_current_thread":["void","(BN_BLINDING *)"],
"BN_BLINDING_lock":["int","(BN_BLINDING *)"],
"BN_BLINDING_unlock":["int","(BN_BLINDING *)"],
"BN_BLINDING_get_flags":["unsigned long","(const BN_BLINDING *)"],
"BN_BLINDING_set_flags":["void","(BN_BLINDING *, unsigned long)"],
"BN_BLINDING_create_param":["BN_BLINDING *","(BN_BLINDING *, const BIGNUM *, BIGNUM *, BN_CTX *, int (*)(BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *), BN_MONT_CTX *)"],
"BN_set_params":["void","(int, int, int, int)"],
"BN_get_params":["int","(int)"],
"BN_RECP_CTX_new":["BN_RECP_CTX *","()"],
"BN_RECP_CTX_free":["void","(BN_RECP_CTX *)"],
"BN_RECP_CTX_set":["int","(BN_RECP_CTX *, const BIGNUM *, BN_CTX *)"],
"BN_mod_mul_reciprocal":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, BN_RECP_CTX *, BN_CTX *)"],
"BN_mod_exp_recp":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_div_recp":["int","(BIGNUM *, BIGNUM *, const BIGNUM *, BN_RECP_CTX *, BN_CTX *)"],
"BN_GF2m_add":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *)"],
"BN_GF2m_mod":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *)"],
"BN_GF2m_mod_mul":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_GF2m_mod_sqr":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_GF2m_mod_inv":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_GF2m_mod_div":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_GF2m_mod_exp":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_GF2m_mod_sqrt":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_GF2m_mod_solve_quad":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_GF2m_mod_arr":["int","(BIGNUM *, const BIGNUM *, const int *)"],
"BN_GF2m_mod_mul_arr":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, const int *, BN_CTX *)"],
"BN_GF2m_mod_sqr_arr":["int","(BIGNUM *, const BIGNUM *, const int *, BN_CTX *)"],
"BN_GF2m_mod_inv_arr":["int","(BIGNUM *, const BIGNUM *, const int *, BN_CTX *)"],
"BN_GF2m_mod_div_arr":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, const int *, BN_CTX *)"],
"BN_GF2m_mod_exp_arr":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, const int *, BN_CTX *)"],
"BN_GF2m_mod_sqrt_arr":["int","(BIGNUM *, const BIGNUM *, const int *, BN_CTX *)"],
"BN_GF2m_mod_solve_quad_arr":["int","(BIGNUM *, const BIGNUM *, const int *, BN_CTX *)"],
"BN_GF2m_poly2arr":["int","(const BIGNUM *, int *, int)"],
"BN_GF2m_arr2poly":["int","(const int *, BIGNUM *)"],
"BN_nist_mod_192":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_nist_mod_224":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_nist_mod_256":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_nist_mod_384":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_nist_mod_521":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"BN_get0_nist_prime_192":["const BIGNUM *","()"],
"BN_get0_nist_prime_224":["const BIGNUM *","()"],
"BN_get0_nist_prime_256":["const BIGNUM *","()"],
"BN_get0_nist_prime_384":["const BIGNUM *","()"],
"BN_get0_nist_prime_521":["const BIGNUM *","()"],
"BN_nist_mod_func":["int (*)(BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)","(const BIGNUM *)"],
"BN_generate_dsa_nonce":["int","(BIGNUM *, const BIGNUM *, const BIGNUM *, const unsigned char *, int, BN_CTX *)"],
"BN_get_rfc2409_prime_768":["BIGNUM *","(BIGNUM *)"],
"BN_get_rfc2409_prime_1024":["BIGNUM *","(BIGNUM *)"],
"BN_get_rfc3526_prime_1536":["BIGNUM *","(BIGNUM *)"],
"BN_get_rfc3526_prime_2048":["BIGNUM *","(BIGNUM *)"],
"BN_get_rfc3526_prime_3072":["BIGNUM *","(BIGNUM *)"],
"BN_get_rfc3526_prime_4096":["BIGNUM *","(BIGNUM *)"],
"BN_get_rfc3526_prime_6144":["BIGNUM *","(BIGNUM *)"],
"BN_get_rfc3526_prime_8192":["BIGNUM *","(BIGNUM *)"],
"BN_bntest_rand":["int","(BIGNUM *, int, int, int)"],
"sk_X509_ALGOR_num":["int","(const struct stack_st_X509_ALGOR *)"],
"sk_X509_ALGOR_value":["X509_ALGOR *","(const struct stack_st_X509_ALGOR *, int)"],
"sk_X509_ALGOR_new":["struct stack_st_X509_ALGOR *","(sk_X509_ALGOR_compfunc)"],
"sk_X509_ALGOR_new_null":["struct stack_st_X509_ALGOR *","()"],
"sk_X509_ALGOR_new_reserve":["struct stack_st_X509_ALGOR *","(sk_X509_ALGOR_compfunc, int)"],
"sk_X509_ALGOR_reserve":["int","(struct stack_st_X509_ALGOR *, int)"],
"sk_X509_ALGOR_free":["void","(struct stack_st_X509_ALGOR *)"],
"sk_X509_ALGOR_zero":["void","(struct stack_st_X509_ALGOR *)"],
"sk_X509_ALGOR_delete":["X509_ALGOR *","(struct stack_st_X509_ALGOR *, int)"],
"sk_X509_ALGOR_delete_ptr":["X509_ALGOR *","(struct stack_st_X509_ALGOR *, X509_ALGOR *)"],
"sk_X509_ALGOR_push":["int","(struct stack_st_X509_ALGOR *, X509_ALGOR *)"],
"sk_X509_ALGOR_unshift":["int","(struct stack_st_X509_ALGOR *, X509_ALGOR *)"],
"sk_X509_ALGOR_pop":["X509_ALGOR *","(struct stack_st_X509_ALGOR *)"],
"sk_X509_ALGOR_shift":["X509_ALGOR *","(struct stack_st_X509_ALGOR *)"],
"sk_X509_ALGOR_pop_free":["void","(struct stack_st_X509_ALGOR *, sk_X509_ALGOR_freefunc)"],
"sk_X509_ALGOR_insert":["int","(struct stack_st_X509_ALGOR *, X509_ALGOR *, int)"],
"sk_X509_ALGOR_set":["X509_ALGOR *","(struct stack_st_X509_ALGOR *, int, X509_ALGOR *)"],
"sk_X509_ALGOR_find":["int","(struct stack_st_X509_ALGOR *, X509_ALGOR *)"],
"sk_X509_ALGOR_find_ex":["int","(struct stack_st_X509_ALGOR *, X509_ALGOR *)"],
"sk_X509_ALGOR_sort":["void","(struct stack_st_X509_ALGOR *)"],
"sk_X509_ALGOR_is_sorted":["int","(const struct stack_st_X509_ALGOR *)"],
"sk_X509_ALGOR_dup":["struct stack_st_X509_ALGOR *","(const struct stack_st_X509_ALGOR *)"],
"sk_X509_ALGOR_deep_copy":["struct stack_st_X509_ALGOR *","(const struct stack_st_X509_ALGOR *, sk_X509_ALGOR_copyfunc, sk_X509_ALGOR_freefunc)"],
"sk_X509_ALGOR_set_cmp_func":["sk_X509_ALGOR_compfunc","(struct stack_st_X509_ALGOR *, sk_X509_ALGOR_compfunc)"],
"sk_ASN1_STRING_TABLE_num":["int","(const struct stack_st_ASN1_STRING_TABLE *)"],
"sk_ASN1_STRING_TABLE_value":["ASN1_STRING_TABLE *","(const struct stack_st_ASN1_STRING_TABLE *, int)"],
"sk_ASN1_STRING_TABLE_new":["struct stack_st_ASN1_STRING_TABLE *","(sk_ASN1_STRING_TABLE_compfunc)"],
"sk_ASN1_STRING_TABLE_new_null":["struct stack_st_ASN1_STRING_TABLE *","()"],
"sk_ASN1_STRING_TABLE_new_reserve":["struct stack_st_ASN1_STRING_TABLE *","(sk_ASN1_STRING_TABLE_compfunc, int)"],
"sk_ASN1_STRING_TABLE_reserve":["int","(struct stack_st_ASN1_STRING_TABLE *, int)"],
"sk_ASN1_STRING_TABLE_free":["void","(struct stack_st_ASN1_STRING_TABLE *)"],
"sk_ASN1_STRING_TABLE_zero":["void","(struct stack_st_ASN1_STRING_TABLE *)"],
"sk_ASN1_STRING_TABLE_delete":["ASN1_STRING_TABLE *","(struct stack_st_ASN1_STRING_TABLE *, int)"],
"sk_ASN1_STRING_TABLE_delete_ptr":["ASN1_STRING_TABLE *","(struct stack_st_ASN1_STRING_TABLE *, ASN1_STRING_TABLE *)"],
"sk_ASN1_STRING_TABLE_push":["int","(struct stack_st_ASN1_STRING_TABLE *, ASN1_STRING_TABLE *)"],
"sk_ASN1_STRING_TABLE_unshift":["int","(struct stack_st_ASN1_STRING_TABLE *, ASN1_STRING_TABLE *)"],
"sk_ASN1_STRING_TABLE_pop":["ASN1_STRING_TABLE *","(struct stack_st_ASN1_STRING_TABLE *)"],
"sk_ASN1_STRING_TABLE_shift":["ASN1_STRING_TABLE *","(struct stack_st_ASN1_STRING_TABLE *)"],
"sk_ASN1_STRING_TABLE_pop_free":["void","(struct stack_st_ASN1_STRING_TABLE *, sk_ASN1_STRING_TABLE_freefunc)"],
"sk_ASN1_STRING_TABLE_insert":["int","(struct stack_st_ASN1_STRING_TABLE *, ASN1_STRING_TABLE *, int)"],
"sk_ASN1_STRING_TABLE_set":["ASN1_STRING_TABLE *","(struct stack_st_ASN1_STRING_TABLE *, int, ASN1_STRING_TABLE *)"],
"sk_ASN1_STRING_TABLE_find":["int","(struct stack_st_ASN1_STRING_TABLE *, ASN1_STRING_TABLE *)"],
"sk_ASN1_STRING_TABLE_find_ex":["int","(struct stack_st_ASN1_STRING_TABLE *, ASN1_STRING_TABLE *)"],
"sk_ASN1_STRING_TABLE_sort":["void","(struct stack_st_ASN1_STRING_TABLE *)"],
"sk_ASN1_STRING_TABLE_is_sorted":["int","(const struct stack_st_ASN1_STRING_TABLE *)"],
"sk_ASN1_STRING_TABLE_dup":["struct stack_st_ASN1_STRING_TABLE *","(const struct stack_st_ASN1_STRING_TABLE *)"],
"sk_ASN1_STRING_TABLE_deep_copy":["struct stack_st_ASN1_STRING_TABLE *","(const struct stack_st_ASN1_STRING_TABLE *, sk_ASN1_STRING_TABLE_copyfunc, sk_ASN1_STRING_TABLE_freefunc)"],
"sk_ASN1_STRING_TABLE_set_cmp_func":["sk_ASN1_STRING_TABLE_compfunc","(struct stack_st_ASN1_STRING_TABLE *, sk_ASN1_STRING_TABLE_compfunc)"],
"sk_ASN1_INTEGER_num":["int","(const struct stack_st_ASN1_INTEGER *)"],
"sk_ASN1_INTEGER_value":["ASN1_INTEGER *","(const struct stack_st_ASN1_INTEGER *, int)"],
"sk_ASN1_INTEGER_new":["struct stack_st_ASN1_INTEGER *","(sk_ASN1_INTEGER_compfunc)"],
"sk_ASN1_INTEGER_new_null":["struct stack_st_ASN1_INTEGER *","()"],
"sk_ASN1_INTEGER_new_reserve":["struct stack_st_ASN1_INTEGER *","(sk_ASN1_INTEGER_compfunc, int)"],
"sk_ASN1_INTEGER_reserve":["int","(struct stack_st_ASN1_INTEGER *, int)"],
"sk_ASN1_INTEGER_free":["void","(struct stack_st_ASN1_INTEGER *)"],
"sk_ASN1_INTEGER_zero":["void","(struct stack_st_ASN1_INTEGER *)"],
"sk_ASN1_INTEGER_delete":["ASN1_INTEGER *","(struct stack_st_ASN1_INTEGER *, int)"],
"sk_ASN1_INTEGER_delete_ptr":["ASN1_INTEGER *","(struct stack_st_ASN1_INTEGER *, ASN1_INTEGER *)"],
"sk_ASN1_INTEGER_push":["int","(struct stack_st_ASN1_INTEGER *, ASN1_INTEGER *)"],
"sk_ASN1_INTEGER_unshift":["int","(struct stack_st_ASN1_INTEGER *, ASN1_INTEGER *)"],
"sk_ASN1_INTEGER_pop":["ASN1_INTEGER *","(struct stack_st_ASN1_INTEGER *)"],
"sk_ASN1_INTEGER_shift":["ASN1_INTEGER *","(struct stack_st_ASN1_INTEGER *)"],
"sk_ASN1_INTEGER_pop_free":["void","(struct stack_st_ASN1_INTEGER *, sk_ASN1_INTEGER_freefunc)"],
"sk_ASN1_INTEGER_insert":["int","(struct stack_st_ASN1_INTEGER *, ASN1_INTEGER *, int)"],
"sk_ASN1_INTEGER_set":["ASN1_INTEGER *","(struct stack_st_ASN1_INTEGER *, int, ASN1_INTEGER *)"],
"sk_ASN1_INTEGER_find":["int","(struct stack_st_ASN1_INTEGER *, ASN1_INTEGER *)"],
"sk_ASN1_INTEGER_find_ex":["int","(struct stack_st_ASN1_INTEGER *, ASN1_INTEGER *)"],
"sk_ASN1_INTEGER_sort":["void","(struct stack_st_ASN1_INTEGER *)"],
"sk_ASN1_INTEGER_is_sorted":["int","(const struct stack_st_ASN1_INTEGER *)"],
"sk_ASN1_INTEGER_dup":["struct stack_st_ASN1_INTEGER *","(const struct stack_st_ASN1_INTEGER *)"],
"sk_ASN1_INTEGER_deep_copy":["struct stack_st_ASN1_INTEGER *","(const struct stack_st_ASN1_INTEGER *, sk_ASN1_INTEGER_copyfunc, sk_ASN1_INTEGER_freefunc)"],
"sk_ASN1_INTEGER_set_cmp_func":["sk_ASN1_INTEGER_compfunc","(struct stack_st_ASN1_INTEGER *, sk_ASN1_INTEGER_compfunc)"],
"sk_ASN1_GENERALSTRING_num":["int","(const struct stack_st_ASN1_GENERALSTRING *)"],
"sk_ASN1_GENERALSTRING_value":["ASN1_GENERALSTRING *","(const struct stack_st_ASN1_GENERALSTRING *, int)"],
"sk_ASN1_GENERALSTRING_new":["struct stack_st_ASN1_GENERALSTRING *","(sk_ASN1_GENERALSTRING_compfunc)"],
"sk_ASN1_GENERALSTRING_new_null":["struct stack_st_ASN1_GENERALSTRING *","()"],
"sk_ASN1_GENERALSTRING_new_reserve":["struct stack_st_ASN1_GENERALSTRING *","(sk_ASN1_GENERALSTRING_compfunc, int)"],
"sk_ASN1_GENERALSTRING_reserve":["int","(struct stack_st_ASN1_GENERALSTRING *, int)"],
"sk_ASN1_GENERALSTRING_free":["void","(struct stack_st_ASN1_GENERALSTRING *)"],
"sk_ASN1_GENERALSTRING_zero":["void","(struct stack_st_ASN1_GENERALSTRING *)"],
"sk_ASN1_GENERALSTRING_delete":["ASN1_GENERALSTRING *","(struct stack_st_ASN1_GENERALSTRING *, int)"],
"sk_ASN1_GENERALSTRING_delete_ptr":["ASN1_GENERALSTRING *","(struct stack_st_ASN1_GENERALSTRING *, ASN1_GENERALSTRING *)"],
"sk_ASN1_GENERALSTRING_push":["int","(struct stack_st_ASN1_GENERALSTRING *, ASN1_GENERALSTRING *)"],
"sk_ASN1_GENERALSTRING_unshift":["int","(struct stack_st_ASN1_GENERALSTRING *, ASN1_GENERALSTRING *)"],
"sk_ASN1_GENERALSTRING_pop":["ASN1_GENERALSTRING *","(struct stack_st_ASN1_GENERALSTRING *)"],
"sk_ASN1_GENERALSTRING_shift":["ASN1_GENERALSTRING *","(struct stack_st_ASN1_GENERALSTRING *)"],
"sk_ASN1_GENERALSTRING_pop_free":["void","(struct stack_st_ASN1_GENERALSTRING *, sk_ASN1_GENERALSTRING_freefunc)"],
"sk_ASN1_GENERALSTRING_insert":["int","(struct stack_st_ASN1_GENERALSTRING *, ASN1_GENERALSTRING *, int)"],
"sk_ASN1_GENERALSTRING_set":["ASN1_GENERALSTRING *","(struct stack_st_ASN1_GENERALSTRING *, int, ASN1_GENERALSTRING *)"],
"sk_ASN1_GENERALSTRING_find":["int","(struct stack_st_ASN1_GENERALSTRING *, ASN1_GENERALSTRING *)"],
"sk_ASN1_GENERALSTRING_find_ex":["int","(struct stack_st_ASN1_GENERALSTRING *, ASN1_GENERALSTRING *)"],
"sk_ASN1_GENERALSTRING_sort":["void","(struct stack_st_ASN1_GENERALSTRING *)"],
"sk_ASN1_GENERALSTRING_is_sorted":["int","(const struct stack_st_ASN1_GENERALSTRING *)"],
"sk_ASN1_GENERALSTRING_dup":["struct stack_st_ASN1_GENERALSTRING *","(const struct stack_st_ASN1_GENERALSTRING *)"],
"sk_ASN1_GENERALSTRING_deep_copy":["struct stack_st_ASN1_GENERALSTRING *","(const struct stack_st_ASN1_GENERALSTRING *, sk_ASN1_GENERALSTRING_copyfunc, sk_ASN1_GENERALSTRING_freefunc)"],
"sk_ASN1_GENERALSTRING_set_cmp_func":["sk_ASN1_GENERALSTRING_compfunc","(struct stack_st_ASN1_GENERALSTRING *, sk_ASN1_GENERALSTRING_compfunc)"],
"sk_ASN1_UTF8STRING_num":["int","(const struct stack_st_ASN1_UTF8STRING *)"],
"sk_ASN1_UTF8STRING_value":["ASN1_UTF8STRING *","(const struct stack_st_ASN1_UTF8STRING *, int)"],
"sk_ASN1_UTF8STRING_new":["struct stack_st_ASN1_UTF8STRING *","(sk_ASN1_UTF8STRING_compfunc)"],
"sk_ASN1_UTF8STRING_new_null":["struct stack_st_ASN1_UTF8STRING *","()"],
"sk_ASN1_UTF8STRING_new_reserve":["struct stack_st_ASN1_UTF8STRING *","(sk_ASN1_UTF8STRING_compfunc, int)"],
"sk_ASN1_UTF8STRING_reserve":["int","(struct stack_st_ASN1_UTF8STRING *, int)"],
"sk_ASN1_UTF8STRING_free":["void","(struct stack_st_ASN1_UTF8STRING *)"],
"sk_ASN1_UTF8STRING_zero":["void","(struct stack_st_ASN1_UTF8STRING *)"],
"sk_ASN1_UTF8STRING_delete":["ASN1_UTF8STRING *","(struct stack_st_ASN1_UTF8STRING *, int)"],
"sk_ASN1_UTF8STRING_delete_ptr":["ASN1_UTF8STRING *","(struct stack_st_ASN1_UTF8STRING *, ASN1_UTF8STRING *)"],
"sk_ASN1_UTF8STRING_push":["int","(struct stack_st_ASN1_UTF8STRING *, ASN1_UTF8STRING *)"],
"sk_ASN1_UTF8STRING_unshift":["int","(struct stack_st_ASN1_UTF8STRING *, ASN1_UTF8STRING *)"],
"sk_ASN1_UTF8STRING_pop":["ASN1_UTF8STRING *","(struct stack_st_ASN1_UTF8STRING *)"],
"sk_ASN1_UTF8STRING_shift":["ASN1_UTF8STRING *","(struct stack_st_ASN1_UTF8STRING *)"],
"sk_ASN1_UTF8STRING_pop_free":["void","(struct stack_st_ASN1_UTF8STRING *, sk_ASN1_UTF8STRING_freefunc)"],
"sk_ASN1_UTF8STRING_insert":["int","(struct stack_st_ASN1_UTF8STRING *, ASN1_UTF8STRING *, int)"],
"sk_ASN1_UTF8STRING_set":["ASN1_UTF8STRING *","(struct stack_st_ASN1_UTF8STRING *, int, ASN1_UTF8STRING *)"],
"sk_ASN1_UTF8STRING_find":["int","(struct stack_st_ASN1_UTF8STRING *, ASN1_UTF8STRING *)"],
"sk_ASN1_UTF8STRING_find_ex":["int","(struct stack_st_ASN1_UTF8STRING *, ASN1_UTF8STRING *)"],
"sk_ASN1_UTF8STRING_sort":["void","(struct stack_st_ASN1_UTF8STRING *)"],
"sk_ASN1_UTF8STRING_is_sorted":["int","(const struct stack_st_ASN1_UTF8STRING *)"],
"sk_ASN1_UTF8STRING_dup":["struct stack_st_ASN1_UTF8STRING *","(const struct stack_st_ASN1_UTF8STRING *)"],
"sk_ASN1_UTF8STRING_deep_copy":["struct stack_st_ASN1_UTF8STRING *","(const struct stack_st_ASN1_UTF8STRING *, sk_ASN1_UTF8STRING_copyfunc, sk_ASN1_UTF8STRING_freefunc)"],
"sk_ASN1_UTF8STRING_set_cmp_func":["sk_ASN1_UTF8STRING_compfunc","(struct stack_st_ASN1_UTF8STRING *, sk_ASN1_UTF8STRING_compfunc)"],
"sk_ASN1_TYPE_num":["int","(const struct stack_st_ASN1_TYPE *)"],
"sk_ASN1_TYPE_value":["ASN1_TYPE *","(const struct stack_st_ASN1_TYPE *, int)"],
"sk_ASN1_TYPE_new":["struct stack_st_ASN1_TYPE *","(sk_ASN1_TYPE_compfunc)"],
"sk_ASN1_TYPE_new_null":["struct stack_st_ASN1_TYPE *","()"],
"sk_ASN1_TYPE_new_reserve":["struct stack_st_ASN1_TYPE *","(sk_ASN1_TYPE_compfunc, int)"],
"sk_ASN1_TYPE_reserve":["int","(struct stack_st_ASN1_TYPE *, int)"],
"sk_ASN1_TYPE_free":["void","(struct stack_st_ASN1_TYPE *)"],
"sk_ASN1_TYPE_zero":["void","(struct stack_st_ASN1_TYPE *)"],
"sk_ASN1_TYPE_delete":["ASN1_TYPE *","(struct stack_st_ASN1_TYPE *, int)"],
"sk_ASN1_TYPE_delete_ptr":["ASN1_TYPE *","(struct stack_st_ASN1_TYPE *, ASN1_TYPE *)"],
"sk_ASN1_TYPE_push":["int","(struct stack_st_ASN1_TYPE *, ASN1_TYPE *)"],
"sk_ASN1_TYPE_unshift":["int","(struct stack_st_ASN1_TYPE *, ASN1_TYPE *)"],
"sk_ASN1_TYPE_pop":["ASN1_TYPE *","(struct stack_st_ASN1_TYPE *)"],
"sk_ASN1_TYPE_shift":["ASN1_TYPE *","(struct stack_st_ASN1_TYPE *)"],
"sk_ASN1_TYPE_pop_free":["void","(struct stack_st_ASN1_TYPE *, sk_ASN1_TYPE_freefunc)"],
"sk_ASN1_TYPE_insert":["int","(struct stack_st_ASN1_TYPE *, ASN1_TYPE *, int)"],
"sk_ASN1_TYPE_set":["ASN1_TYPE *","(struct stack_st_ASN1_TYPE *, int, ASN1_TYPE *)"],
"sk_ASN1_TYPE_find":["int","(struct stack_st_ASN1_TYPE *, ASN1_TYPE *)"],
"sk_ASN1_TYPE_find_ex":["int","(struct stack_st_ASN1_TYPE *, ASN1_TYPE *)"],
"sk_ASN1_TYPE_sort":["void","(struct stack_st_ASN1_TYPE *)"],
"sk_ASN1_TYPE_is_sorted":["int","(const struct stack_st_ASN1_TYPE *)"],
"sk_ASN1_TYPE_dup":["struct stack_st_ASN1_TYPE *","(const struct stack_st_ASN1_TYPE *)"],
"sk_ASN1_TYPE_deep_copy":["struct stack_st_ASN1_TYPE *","(const struct stack_st_ASN1_TYPE *, sk_ASN1_TYPE_copyfunc, sk_ASN1_TYPE_freefunc)"],
"sk_ASN1_TYPE_set_cmp_func":["sk_ASN1_TYPE_compfunc","(struct stack_st_ASN1_TYPE *, sk_ASN1_TYPE_compfunc)"],
"d2i_ASN1_SEQUENCE_ANY":["ASN1_SEQUENCE_ANY *","(ASN1_SEQUENCE_ANY **, const unsigned char **, long)"],
"i2d_ASN1_SEQUENCE_ANY":["int","(const ASN1_SEQUENCE_ANY *, unsigned char **)"],
"d2i_ASN1_SET_ANY":["ASN1_SEQUENCE_ANY *","(ASN1_SEQUENCE_ANY **, const unsigned char **, long)"],
"i2d_ASN1_SET_ANY":["int","(const ASN1_SEQUENCE_ANY *, unsigned char **)"],
"ASN1_TYPE_new":["ASN1_TYPE *","()"],
"ASN1_TYPE_free":["void","(ASN1_TYPE *)"],
"d2i_ASN1_TYPE":["ASN1_TYPE *","(ASN1_TYPE **, const unsigned char **, long)"],
"i2d_ASN1_TYPE":["int","(ASN1_TYPE *, unsigned char **)"],
"ASN1_TYPE_get":["int","(const ASN1_TYPE *)"],
"ASN1_TYPE_set":["void","(ASN1_TYPE *, int, void *)"],
"ASN1_TYPE_set1":["int","(ASN1_TYPE *, int, const void *)"],
"ASN1_TYPE_cmp":["int","(const ASN1_TYPE *, const ASN1_TYPE *)"],
"ASN1_TYPE_pack_sequence":["ASN1_TYPE *","(const ASN1_ITEM *, void *, ASN1_TYPE **)"],
"ASN1_TYPE_unpack_sequence":["void *","(const ASN1_ITEM *, const ASN1_TYPE *)"],
"ASN1_OBJECT_new":["ASN1_OBJECT *","()"],
"ASN1_OBJECT_free":["void","(ASN1_OBJECT *)"],
"i2d_ASN1_OBJECT":["int","(const ASN1_OBJECT *, unsigned char **)"],
"d2i_ASN1_OBJECT":["ASN1_OBJECT *","(ASN1_OBJECT **, const unsigned char **, long)"],
"sk_ASN1_OBJECT_num":["int","(const struct stack_st_ASN1_OBJECT *)"],
"sk_ASN1_OBJECT_value":["ASN1_OBJECT *","(const struct stack_st_ASN1_OBJECT *, int)"],
"sk_ASN1_OBJECT_new":["struct stack_st_ASN1_OBJECT *","(sk_ASN1_OBJECT_compfunc)"],
"sk_ASN1_OBJECT_new_null":["struct stack_st_ASN1_OBJECT *","()"],
"sk_ASN1_OBJECT_new_reserve":["struct stack_st_ASN1_OBJECT *","(sk_ASN1_OBJECT_compfunc, int)"],
"sk_ASN1_OBJECT_reserve":["int","(struct stack_st_ASN1_OBJECT *, int)"],
"sk_ASN1_OBJECT_free":["void","(struct stack_st_ASN1_OBJECT *)"],
"sk_ASN1_OBJECT_zero":["void","(struct stack_st_ASN1_OBJECT *)"],
"sk_ASN1_OBJECT_delete":["ASN1_OBJECT *","(struct stack_st_ASN1_OBJECT *, int)"],
"sk_ASN1_OBJECT_delete_ptr":["ASN1_OBJECT *","(struct stack_st_ASN1_OBJECT *, ASN1_OBJECT *)"],
"sk_ASN1_OBJECT_push":["int","(struct stack_st_ASN1_OBJECT *, ASN1_OBJECT *)"],
"sk_ASN1_OBJECT_unshift":["int","(struct stack_st_ASN1_OBJECT *, ASN1_OBJECT *)"],
"sk_ASN1_OBJECT_pop":["ASN1_OBJECT *","(struct stack_st_ASN1_OBJECT *)"],
"sk_ASN1_OBJECT_shift":["ASN1_OBJECT *","(struct stack_st_ASN1_OBJECT *)"],
"sk_ASN1_OBJECT_pop_free":["void","(struct stack_st_ASN1_OBJECT *, sk_ASN1_OBJECT_freefunc)"],
"sk_ASN1_OBJECT_insert":["int","(struct stack_st_ASN1_OBJECT *, ASN1_OBJECT *, int)"],
"sk_ASN1_OBJECT_set":["ASN1_OBJECT *","(struct stack_st_ASN1_OBJECT *, int, ASN1_OBJECT *)"],
"sk_ASN1_OBJECT_find":["int","(struct stack_st_ASN1_OBJECT *, ASN1_OBJECT *)"],
"sk_ASN1_OBJECT_find_ex":["int","(struct stack_st_ASN1_OBJECT *, ASN1_OBJECT *)"],
"sk_ASN1_OBJECT_sort":["void","(struct stack_st_ASN1_OBJECT *)"],
"sk_ASN1_OBJECT_is_sorted":["int","(const struct stack_st_ASN1_OBJECT *)"],
"sk_ASN1_OBJECT_dup":["struct stack_st_ASN1_OBJECT *","(const struct stack_st_ASN1_OBJECT *)"],
"sk_ASN1_OBJECT_deep_copy":["struct stack_st_ASN1_OBJECT *","(const struct stack_st_ASN1_OBJECT *, sk_ASN1_OBJECT_copyfunc, sk_ASN1_OBJECT_freefunc)"],
"sk_ASN1_OBJECT_set_cmp_func":["sk_ASN1_OBJECT_compfunc","(struct stack_st_ASN1_OBJECT *, sk_ASN1_OBJECT_compfunc)"],
"ASN1_STRING_new":["ASN1_STRING *","()"],
"ASN1_STRING_free":["void","(ASN1_STRING *)"],
"ASN1_STRING_clear_free":["void","(ASN1_STRING *)"],
"ASN1_STRING_copy":["int","(ASN1_STRING *, const ASN1_STRING *)"],
"ASN1_STRING_dup":["ASN1_STRING *","(const ASN1_STRING *)"],
"ASN1_STRING_type_new":["ASN1_STRING *","(int)"],
"ASN1_STRING_cmp":["int","(const ASN1_STRING *, const ASN1_STRING *)"],
"ASN1_STRING_set":["int","(ASN1_STRING *, const void *, int)"],
"ASN1_STRING_set0":["void","(ASN1_STRING *, void *, int)"],
"ASN1_STRING_length":["int","(const ASN1_STRING *)"],
"ASN1_STRING_length_set":["void","(ASN1_STRING *, int)"],
"ASN1_STRING_type":["int","(const ASN1_STRING *)"],
"ASN1_STRING_data":["unsigned char *","(ASN1_STRING *)"],
"ASN1_STRING_get0_data":["const unsigned char *","(const ASN1_STRING *)"],
"ASN1_BIT_STRING_new":["ASN1_BIT_STRING *","()"],
"ASN1_BIT_STRING_free":["void","(ASN1_BIT_STRING *)"],
"d2i_ASN1_BIT_STRING":["ASN1_BIT_STRING *","(ASN1_BIT_STRING **, const unsigned char **, long)"],
"i2d_ASN1_BIT_STRING":["int","(ASN1_BIT_STRING *, unsigned char **)"],
"ASN1_BIT_STRING_set":["int","(ASN1_BIT_STRING *, unsigned char *, int)"],
"ASN1_BIT_STRING_set_bit":["int","(ASN1_BIT_STRING *, int, int)"],
"ASN1_BIT_STRING_get_bit":["int","(const ASN1_BIT_STRING *, int)"],
"ASN1_BIT_STRING_check":["int","(const ASN1_BIT_STRING *, const unsigned char *, int)"],
"ASN1_BIT_STRING_name_print":["int","(BIO *, ASN1_BIT_STRING *, BIT_STRING_BITNAME *, int)"],
"ASN1_BIT_STRING_num_asc":["int","(const char *, BIT_STRING_BITNAME *)"],
"ASN1_BIT_STRING_set_asc":["int","(ASN1_BIT_STRING *, const char *, int, BIT_STRING_BITNAME *)"],
"ASN1_INTEGER_new":["ASN1_INTEGER *","()"],
"ASN1_INTEGER_free":["void","(ASN1_INTEGER *)"],
"d2i_ASN1_INTEGER":["ASN1_INTEGER *","(ASN1_INTEGER **, const unsigned char **, long)"],
"i2d_ASN1_INTEGER":["int","(ASN1_INTEGER *, unsigned char **)"],
"d2i_ASN1_UINTEGER":["ASN1_INTEGER *","(ASN1_INTEGER **, const unsigned char **, long)"],
"ASN1_INTEGER_dup":["ASN1_INTEGER *","(const ASN1_INTEGER *)"],
"ASN1_INTEGER_cmp":["int","(const ASN1_INTEGER *, const ASN1_INTEGER *)"],
"ASN1_ENUMERATED_new":["ASN1_ENUMERATED *","()"],
"ASN1_ENUMERATED_free":["void","(ASN1_ENUMERATED *)"],
"d2i_ASN1_ENUMERATED":["ASN1_ENUMERATED *","(ASN1_ENUMERATED **, const unsigned char **, long)"],
"i2d_ASN1_ENUMERATED":["int","(ASN1_ENUMERATED *, unsigned char **)"],
"ASN1_UTCTIME_check":["int","(const ASN1_UTCTIME *)"],
"ASN1_UTCTIME_set":["ASN1_UTCTIME *","(ASN1_UTCTIME *, time_t)"],
"ASN1_UTCTIME_adj":["ASN1_UTCTIME *","(ASN1_UTCTIME *, time_t, int, long)"],
"ASN1_UTCTIME_set_string":["int","(ASN1_UTCTIME *, const char *)"],
"ASN1_UTCTIME_cmp_time_t":["int","(const ASN1_UTCTIME *, time_t)"],
"ASN1_GENERALIZEDTIME_check":["int","(const ASN1_GENERALIZEDTIME *)"],
"ASN1_GENERALIZEDTIME_set":["ASN1_GENERALIZEDTIME *","(ASN1_GENERALIZEDTIME *, time_t)"],
"ASN1_GENERALIZEDTIME_adj":["ASN1_GENERALIZEDTIME *","(ASN1_GENERALIZEDTIME *, time_t, int, long)"],
"ASN1_GENERALIZEDTIME_set_string":["int","(ASN1_GENERALIZEDTIME *, const char *)"],
"ASN1_TIME_diff":["int","(int *, int *, const ASN1_TIME *, const ASN1_TIME *)"],
"ASN1_OCTET_STRING_new":["ASN1_OCTET_STRING *","()"],
"ASN1_OCTET_STRING_free":["void","(ASN1_OCTET_STRING *)"],
"d2i_ASN1_OCTET_STRING":["ASN1_OCTET_STRING *","(ASN1_OCTET_STRING **, const unsigned char **, long)"],
"i2d_ASN1_OCTET_STRING":["int","(ASN1_OCTET_STRING *, unsigned char **)"],
"ASN1_OCTET_STRING_dup":["ASN1_OCTET_STRING *","(const ASN1_OCTET_STRING *)"],
"ASN1_OCTET_STRING_cmp":["int","(const ASN1_OCTET_STRING *, const ASN1_OCTET_STRING *)"],
"ASN1_OCTET_STRING_set":["int","(ASN1_OCTET_STRING *, const unsigned char *, int)"],
"ASN1_VISIBLESTRING_new":["ASN1_VISIBLESTRING *","()"],
"ASN1_VISIBLESTRING_free":["void","(ASN1_VISIBLESTRING *)"],
"d2i_ASN1_VISIBLESTRING":["ASN1_VISIBLESTRING *","(ASN1_VISIBLESTRING **, const unsigned char **, long)"],
"i2d_ASN1_VISIBLESTRING":["int","(ASN1_VISIBLESTRING *, unsigned char **)"],
"ASN1_UNIVERSALSTRING_new":["ASN1_UNIVERSALSTRING *","()"],
"ASN1_UNIVERSALSTRING_free":["void","(ASN1_UNIVERSALSTRING *)"],
"d2i_ASN1_UNIVERSALSTRING":["ASN1_UNIVERSALSTRING *","(ASN1_UNIVERSALSTRING **, const unsigned char **, long)"],
"i2d_ASN1_UNIVERSALSTRING":["int","(ASN1_UNIVERSALSTRING *, unsigned char **)"],
"ASN1_UTF8STRING_new":["ASN1_UTF8STRING *","()"],
"ASN1_UTF8STRING_free":["void","(ASN1_UTF8STRING *)"],
"d2i_ASN1_UTF8STRING":["ASN1_UTF8STRING *","(ASN1_UTF8STRING **, const unsigned char **, long)"],
"i2d_ASN1_UTF8STRING":["int","(ASN1_UTF8STRING *, unsigned char **)"],
"ASN1_NULL_new":["ASN1_NULL *","()"],
"ASN1_NULL_free":["void","(ASN1_NULL *)"],
"d2i_ASN1_NULL":["ASN1_NULL *","(ASN1_NULL **, const unsigned char **, long)"],
"i2d_ASN1_NULL":["int","(ASN1_NULL *, unsigned char **)"],
"ASN1_BMPSTRING_new":["ASN1_BMPSTRING *","()"],
"ASN1_BMPSTRING_free":["void","(ASN1_BMPSTRING *)"],
"d2i_ASN1_BMPSTRING":["ASN1_BMPSTRING *","(ASN1_BMPSTRING **, const unsigned char **, long)"],
"i2d_ASN1_BMPSTRING":["int","(ASN1_BMPSTRING *, unsigned char **)"],
"UTF8_getc":["int","(const unsigned char *, int, unsigned long *)"],
"UTF8_putc":["int","(unsigned char *, int, unsigned long)"],
"ASN1_PRINTABLE_new":["ASN1_STRING *","()"],
"ASN1_PRINTABLE_free":["void","(ASN1_STRING *)"],
"d2i_ASN1_PRINTABLE":["ASN1_STRING *","(ASN1_STRING **, const unsigned char **, long)"],
"i2d_ASN1_PRINTABLE":["int","(ASN1_STRING *, unsigned char **)"],
"DIRECTORYSTRING_new":["ASN1_STRING *","()"],
"DIRECTORYSTRING_free":["void","(ASN1_STRING *)"],
"d2i_DIRECTORYSTRING":["ASN1_STRING *","(ASN1_STRING **, const unsigned char **, long)"],
"i2d_DIRECTORYSTRING":["int","(ASN1_STRING *, unsigned char **)"],
"DISPLAYTEXT_new":["ASN1_STRING *","()"],
"DISPLAYTEXT_free":["void","(ASN1_STRING *)"],
"d2i_DISPLAYTEXT":["ASN1_STRING *","(ASN1_STRING **, const unsigned char **, long)"],
"i2d_DISPLAYTEXT":["int","(ASN1_STRING *, unsigned char **)"],
"ASN1_PRINTABLESTRING_new":["ASN1_PRINTABLESTRING *","()"],
"ASN1_PRINTABLESTRING_free":["void","(ASN1_PRINTABLESTRING *)"],
"d2i_ASN1_PRINTABLESTRING":["ASN1_PRINTABLESTRING *","(ASN1_PRINTABLESTRING **, const unsigned char **, long)"],
"i2d_ASN1_PRINTABLESTRING":["int","(ASN1_PRINTABLESTRING *, unsigned char **)"],
"ASN1_T61STRING_new":["ASN1_T61STRING *","()"],
"ASN1_T61STRING_free":["void","(ASN1_T61STRING *)"],
"d2i_ASN1_T61STRING":["ASN1_T61STRING *","(ASN1_T61STRING **, const unsigned char **, long)"],
"i2d_ASN1_T61STRING":["int","(ASN1_T61STRING *, unsigned char **)"],
"ASN1_IA5STRING_new":["ASN1_IA5STRING *","()"],
"ASN1_IA5STRING_free":["void","(ASN1_IA5STRING *)"],
"d2i_ASN1_IA5STRING":["ASN1_IA5STRING *","(ASN1_IA5STRING **, const unsigned char **, long)"],
"i2d_ASN1_IA5STRING":["int","(ASN1_IA5STRING *, unsigned char **)"],
"ASN1_GENERALSTRING_new":["ASN1_GENERALSTRING *","()"],
"ASN1_GENERALSTRING_free":["void","(ASN1_GENERALSTRING *)"],
"d2i_ASN1_GENERALSTRING":["ASN1_GENERALSTRING *","(ASN1_GENERALSTRING **, const unsigned char **, long)"],
"i2d_ASN1_GENERALSTRING":["int","(ASN1_GENERALSTRING *, unsigned char **)"],
"ASN1_UTCTIME_new":["ASN1_UTCTIME *","()"],
"ASN1_UTCTIME_free":["void","(ASN1_UTCTIME *)"],
"d2i_ASN1_UTCTIME":["ASN1_UTCTIME *","(ASN1_UTCTIME **, const unsigned char **, long)"],
"i2d_ASN1_UTCTIME":["int","(ASN1_UTCTIME *, unsigned char **)"],
"ASN1_GENERALIZEDTIME_new":["ASN1_GENERALIZEDTIME *","()"],
"ASN1_GENERALIZEDTIME_free":["void","(ASN1_GENERALIZEDTIME *)"],
"d2i_ASN1_GENERALIZEDTIME":["ASN1_GENERALIZEDTIME *","(ASN1_GENERALIZEDTIME **, const unsigned char **, long)"],
"i2d_ASN1_GENERALIZEDTIME":["int","(ASN1_GENERALIZEDTIME *, unsigned char **)"],
"ASN1_TIME_new":["ASN1_TIME *","()"],
"ASN1_TIME_free":["void","(ASN1_TIME *)"],
"d2i_ASN1_TIME":["ASN1_TIME *","(ASN1_TIME **, const unsigned char **, long)"],
"i2d_ASN1_TIME":["int","(ASN1_TIME *, unsigned char **)"],
"ASN1_TIME_set":["ASN1_TIME *","(ASN1_TIME *, time_t)"],
"ASN1_TIME_adj":["ASN1_TIME *","(ASN1_TIME *, time_t, int, long)"],
"ASN1_TIME_check":["int","(const ASN1_TIME *)"],
"ASN1_TIME_to_generalizedtime":["ASN1_GENERALIZEDTIME *","(const ASN1_TIME *, ASN1_GENERALIZEDTIME **)"],
"ASN1_TIME_set_string":["int","(ASN1_TIME *, const char *)"],
"ASN1_TIME_set_string_X509":["int","(ASN1_TIME *, const char *)"],
"ASN1_TIME_to_tm":["int","(const ASN1_TIME *, struct tm *)"],
"ASN1_TIME_normalize":["int","(ASN1_TIME *)"],
"ASN1_TIME_cmp_time_t":["int","(const ASN1_TIME *, time_t)"],
"ASN1_TIME_compare":["int","(const ASN1_TIME *, const ASN1_TIME *)"],
"i2a_ASN1_INTEGER":["int","(BIO *, const ASN1_INTEGER *)"],
"a2i_ASN1_INTEGER":["int","(BIO *, ASN1_INTEGER *, char *, int)"],
"i2a_ASN1_ENUMERATED":["int","(BIO *, const ASN1_ENUMERATED *)"],
"a2i_ASN1_ENUMERATED":["int","(BIO *, ASN1_ENUMERATED *, char *, int)"],
"i2a_ASN1_OBJECT":["int","(BIO *, const ASN1_OBJECT *)"],
"a2i_ASN1_STRING":["int","(BIO *, ASN1_STRING *, char *, int)"],
"i2a_ASN1_STRING":["int","(BIO *, const ASN1_STRING *, int)"],
"i2t_ASN1_OBJECT":["int","(char *, int, const ASN1_OBJECT *)"],
"a2d_ASN1_OBJECT":["int","(unsigned char *, int, const char *, int)"],
"ASN1_OBJECT_create":["ASN1_OBJECT *","(int, unsigned char *, int, const char *, const char *)"],
"ASN1_INTEGER_get_int64":["int","(int64_t *, const ASN1_INTEGER *)"],
"ASN1_INTEGER_set_int64":["int","(ASN1_INTEGER *, int64_t)"],
"ASN1_INTEGER_get_uint64":["int","(int *, const ASN1_INTEGER *)"],
"ASN1_INTEGER_set_uint64":["int","(ASN1_INTEGER *, int)"],
"ASN1_INTEGER_set":["int","(ASN1_INTEGER *, long)"],
"ASN1_INTEGER_get":["long","(const ASN1_INTEGER *)"],
"BN_to_ASN1_INTEGER":["ASN1_INTEGER *","(const BIGNUM *, ASN1_INTEGER *)"],
"ASN1_INTEGER_to_BN":["BIGNUM *","(const ASN1_INTEGER *, BIGNUM *)"],
"ASN1_ENUMERATED_get_int64":["int","(int64_t *, const ASN1_ENUMERATED *)"],
"ASN1_ENUMERATED_set_int64":["int","(ASN1_ENUMERATED *, int64_t)"],
"ASN1_ENUMERATED_set":["int","(ASN1_ENUMERATED *, long)"],
"ASN1_ENUMERATED_get":["long","(const ASN1_ENUMERATED *)"],
"BN_to_ASN1_ENUMERATED":["ASN1_ENUMERATED *","(const BIGNUM *, ASN1_ENUMERATED *)"],
"ASN1_ENUMERATED_to_BN":["BIGNUM *","(const ASN1_ENUMERATED *, BIGNUM *)"],
"ASN1_PRINTABLE_type":["int","(const unsigned char *, int)"],
"ASN1_tag2bit":["unsigned long","(int)"],
"ASN1_get_object":["int","(const unsigned char **, long *, int *, int *, long)"],
"ASN1_check_infinite_end":["int","(unsigned char **, long)"],
"ASN1_const_check_infinite_end":["int","(const unsigned char **, long)"],
"ASN1_put_object":["void","(unsigned char **, int, int, int, int)"],
"ASN1_put_eoc":["int","(unsigned char **)"],
"ASN1_object_size":["int","(int, int, int)"],
"ASN1_dup":["void *","(i2d_of_void *, d2i_of_void *, void *)"],
"ASN1_item_dup":["void *","(const ASN1_ITEM *, void *)"],
"ASN1_d2i_fp":["void *","(void *(*)(void), d2i_of_void *, int *, void **)"],
"ASN1_item_d2i_fp":["void *","(const ASN1_ITEM *, int *, void *)"],
"ASN1_i2d_fp":["int","(i2d_of_void *, int *, void *)"],
"ASN1_item_i2d_fp":["int","(const ASN1_ITEM *, int *, void *)"],
"ASN1_STRING_print_ex_fp":["int","(int *, const ASN1_STRING *, unsigned long)"],
"ASN1_STRING_to_UTF8":["int","(unsigned char **, const ASN1_STRING *)"],
"ASN1_d2i_bio":["void *","(void *(*)(void), d2i_of_void *, BIO *, void **)"],
"ASN1_item_d2i_bio":["void *","(const ASN1_ITEM *, BIO *, void *)"],
"ASN1_i2d_bio":["int","(i2d_of_void *, BIO *, unsigned char *)"],
"ASN1_item_i2d_bio":["int","(const ASN1_ITEM *, BIO *, void *)"],
"ASN1_UTCTIME_print":["int","(BIO *, const ASN1_UTCTIME *)"],
"ASN1_GENERALIZEDTIME_print":["int","(BIO *, const ASN1_GENERALIZEDTIME *)"],
"ASN1_TIME_print":["int","(BIO *, const ASN1_TIME *)"],
"ASN1_STRING_print":["int","(BIO *, const ASN1_STRING *)"],
"ASN1_STRING_print_ex":["int","(BIO *, const ASN1_STRING *, unsigned long)"],
"ASN1_buf_print":["int","(BIO *, const unsigned char *, int, int)"],
"ASN1_bn_print":["int","(BIO *, const char *, const BIGNUM *, unsigned char *, int)"],
"ASN1_parse":["int","(BIO *, const unsigned char *, long, int)"],
"ASN1_parse_dump":["int","(BIO *, const unsigned char *, long, int, int)"],
"ASN1_tag2str":["const char *","(int)"],
"ASN1_UNIVERSALSTRING_to_string":["int","(ASN1_UNIVERSALSTRING *)"],
"ASN1_TYPE_set_octetstring":["int","(ASN1_TYPE *, unsigned char *, int)"],
"ASN1_TYPE_get_octetstring":["int","(const ASN1_TYPE *, unsigned char *, int)"],
"ASN1_TYPE_set_int_octetstring":["int","(ASN1_TYPE *, long, unsigned char *, int)"],
"ASN1_TYPE_get_int_octetstring":["int","(const ASN1_TYPE *, long *, unsigned char *, int)"],
"ASN1_item_unpack":["void *","(const ASN1_STRING *, const ASN1_ITEM *)"],
"ASN1_item_pack":["ASN1_STRING *","(void *, const ASN1_ITEM *, ASN1_OCTET_STRING **)"],
"ASN1_STRING_set_default_mask":["void","(unsigned long)"],
"ASN1_STRING_set_default_mask_asc":["int","(const char *)"],
"ASN1_STRING_get_default_mask":["unsigned long","()"],
"ASN1_mbstring_copy":["int","(ASN1_STRING **, const unsigned char *, int, int, unsigned long)"],
"ASN1_mbstring_ncopy":["int","(ASN1_STRING **, const unsigned char *, int, int, unsigned long, long, long)"],
"ASN1_STRING_set_by_NID":["ASN1_STRING *","(ASN1_STRING **, const unsigned char *, int, int, int)"],
"ASN1_STRING_TABLE_get":["ASN1_STRING_TABLE *","(int)"],
"ASN1_STRING_TABLE_add":["int","(int, long, long, unsigned long, unsigned long)"],
"ASN1_STRING_TABLE_cleanup":["void","()"],
"ASN1_item_new":["ASN1_VALUE *","(const ASN1_ITEM *)"],
"ASN1_item_free":["void","(ASN1_VALUE *, const ASN1_ITEM *)"],
"ASN1_item_d2i":["ASN1_VALUE *","(ASN1_VALUE **, const unsigned char **, long, const ASN1_ITEM *)"],
"ASN1_item_i2d":["int","(ASN1_VALUE *, unsigned char **, const ASN1_ITEM *)"],
"ASN1_item_ndef_i2d":["int","(ASN1_VALUE *, unsigned char **, const ASN1_ITEM *)"],
"ASN1_add_oid_module":["void","()"],
"ASN1_add_stable_module":["void","()"],
"ASN1_generate_nconf":["ASN1_TYPE *","(const char *, CONF *)"],
"ASN1_generate_v3":["ASN1_TYPE *","(const char *, X509V3_CTX *)"],
"ASN1_str2mask":["int","(const char *, unsigned long *)"],
"ASN1_item_print":["int","(BIO *, ASN1_VALUE *, int, const ASN1_ITEM *, const ASN1_PCTX *)"],
"ASN1_PCTX_new":["ASN1_PCTX *","()"],
"ASN1_PCTX_free":["void","(ASN1_PCTX *)"],
"ASN1_PCTX_get_flags":["unsigned long","(const ASN1_PCTX *)"],
"ASN1_PCTX_set_flags":["void","(ASN1_PCTX *, unsigned long)"],
"ASN1_PCTX_get_nm_flags":["unsigned long","(const ASN1_PCTX *)"],
"ASN1_PCTX_set_nm_flags":["void","(ASN1_PCTX *, unsigned long)"],
"ASN1_PCTX_get_cert_flags":["unsigned long","(const ASN1_PCTX *)"],
"ASN1_PCTX_set_cert_flags":["void","(ASN1_PCTX *, unsigned long)"],
"ASN1_PCTX_get_oid_flags":["unsigned long","(const ASN1_PCTX *)"],
"ASN1_PCTX_set_oid_flags":["void","(ASN1_PCTX *, unsigned long)"],
"ASN1_PCTX_get_str_flags":["unsigned long","(const ASN1_PCTX *)"],
"ASN1_PCTX_set_str_flags":["void","(ASN1_PCTX *, unsigned long)"],
"ASN1_SCTX_new":["ASN1_SCTX *","(int (*)(ASN1_SCTX *))"],
"ASN1_SCTX_free":["void","(ASN1_SCTX *)"],
"ASN1_SCTX_get_item":["const ASN1_ITEM *","(ASN1_SCTX *)"],
"ASN1_SCTX_get_template":["const ASN1_TEMPLATE *","(ASN1_SCTX *)"],
"ASN1_SCTX_get_flags":["unsigned long","(ASN1_SCTX *)"],
"ASN1_SCTX_set_app_data":["void","(ASN1_SCTX *, void *)"],
"ASN1_SCTX_get_app_data":["void *","(ASN1_SCTX *)"],
"BIO_f_asn1":["const BIO_METHOD *","()"],
"BIO_new_NDEF":["BIO *","(BIO *, ASN1_VALUE *, const ASN1_ITEM *)"],
"i2d_ASN1_bio_stream":["int","(BIO *, ASN1_VALUE *, BIO *, int, const ASN1_ITEM *)"],
"PEM_write_bio_ASN1_stream":["int","(BIO *, ASN1_VALUE *, BIO *, int, const char *, const ASN1_ITEM *)"],
"SMIME_write_ASN1":["int","(BIO *, ASN1_VALUE *, BIO *, int, int, int, struct stack_st_X509_ALGOR *, const ASN1_ITEM *)"],
"SMIME_read_ASN1":["ASN1_VALUE *","(BIO *, BIO **, const ASN1_ITEM *)"],
"SMIME_crlf_copy":["int","(BIO *, BIO *, int)"],
"SMIME_text":["int","(BIO *, BIO *)"],
"ASN1_ITEM_lookup":["const ASN1_ITEM *","(const char *)"],
"ASN1_ITEM_get":["const ASN1_ITEM *","(int)"],
"sk_ASN1_VALUE_num":["int","(const struct stack_st_ASN1_VALUE *)"],
"sk_ASN1_VALUE_value":["ASN1_VALUE *","(const struct stack_st_ASN1_VALUE *, int)"],
"sk_ASN1_VALUE_new":["struct stack_st_ASN1_VALUE *","(sk_ASN1_VALUE_compfunc)"],
"sk_ASN1_VALUE_new_null":["struct stack_st_ASN1_VALUE *","()"],
"sk_ASN1_VALUE_new_reserve":["struct stack_st_ASN1_VALUE *","(sk_ASN1_VALUE_compfunc, int)"],
"sk_ASN1_VALUE_reserve":["int","(struct stack_st_ASN1_VALUE *, int)"],
"sk_ASN1_VALUE_free":["void","(struct stack_st_ASN1_VALUE *)"],
"sk_ASN1_VALUE_zero":["void","(struct stack_st_ASN1_VALUE *)"],
"sk_ASN1_VALUE_delete":["ASN1_VALUE *","(struct stack_st_ASN1_VALUE *, int)"],
"sk_ASN1_VALUE_delete_ptr":["ASN1_VALUE *","(struct stack_st_ASN1_VALUE *, ASN1_VALUE *)"],
"sk_ASN1_VALUE_push":["int","(struct stack_st_ASN1_VALUE *, ASN1_VALUE *)"],
"sk_ASN1_VALUE_unshift":["int","(struct stack_st_ASN1_VALUE *, ASN1_VALUE *)"],
"sk_ASN1_VALUE_pop":["ASN1_VALUE *","(struct stack_st_ASN1_VALUE *)"],
"sk_ASN1_VALUE_shift":["ASN1_VALUE *","(struct stack_st_ASN1_VALUE *)"],
"sk_ASN1_VALUE_pop_free":["void","(struct stack_st_ASN1_VALUE *, sk_ASN1_VALUE_freefunc)"],
"sk_ASN1_VALUE_insert":["int","(struct stack_st_ASN1_VALUE *, ASN1_VALUE *, int)"],
"sk_ASN1_VALUE_set":["ASN1_VALUE *","(struct stack_st_ASN1_VALUE *, int, ASN1_VALUE *)"],
"sk_ASN1_VALUE_find":["int","(struct stack_st_ASN1_VALUE *, ASN1_VALUE *)"],
"sk_ASN1_VALUE_find_ex":["int","(struct stack_st_ASN1_VALUE *, ASN1_VALUE *)"],
"sk_ASN1_VALUE_sort":["void","(struct stack_st_ASN1_VALUE *)"],
"sk_ASN1_VALUE_is_sorted":["int","(const struct stack_st_ASN1_VALUE *)"],
"sk_ASN1_VALUE_dup":["struct stack_st_ASN1_VALUE *","(const struct stack_st_ASN1_VALUE *)"],
"sk_ASN1_VALUE_deep_copy":["struct stack_st_ASN1_VALUE *","(const struct stack_st_ASN1_VALUE *, sk_ASN1_VALUE_copyfunc, sk_ASN1_VALUE_freefunc)"],
"sk_ASN1_VALUE_set_cmp_func":["sk_ASN1_VALUE_compfunc","(struct stack_st_ASN1_VALUE *, sk_ASN1_VALUE_compfunc)"],
"ASN1_item_ex_new":["int","(ASN1_VALUE **, const ASN1_ITEM *)"],
"ASN1_item_ex_free":["void","(ASN1_VALUE **, const ASN1_ITEM *)"],
"ASN1_item_ex_d2i":["int","(ASN1_VALUE **, const unsigned char **, long, const ASN1_ITEM *, int, int, char, ASN1_TLC *)"],
"ASN1_item_ex_i2d":["int","(ASN1_VALUE **, unsigned char **, const ASN1_ITEM *, int, int)"],
"BF_set_key":["void","(BF_KEY *, int, const unsigned char *)"],
"BF_encrypt":["void","(unsigned int *, const BF_KEY *)"],
"BF_decrypt":["void","(unsigned int *, const BF_KEY *)"],
"BF_ecb_encrypt":["void","(const unsigned char *, unsigned char *, const BF_KEY *, int)"],
"BF_cbc_encrypt":["void","(const unsigned char *, unsigned char *, long, const BF_KEY *, unsigned char *, int)"],
"BF_cfb64_encrypt":["void","(const unsigned char *, unsigned char *, long, const BF_KEY *, unsigned char *, int *, int)"],
"BF_ofb64_encrypt":["void","(const unsigned char *, unsigned char *, long, const BF_KEY *, unsigned char *, int *)"],
"BF_options":["const char *","()"],
"ERR_load_BUF_strings":["int","()"],
"BUF_MEM_new":["BUF_MEM *","()"],
"BUF_MEM_new_ex":["BUF_MEM *","(unsigned long)"],
"BUF_MEM_free":["void","(BUF_MEM *)"],
"BUF_MEM_grow":["int","(BUF_MEM *, int)"],
"BUF_MEM_grow_clean":["int","(BUF_MEM *, int)"],
"BUF_reverse":["void","(unsigned char *, const unsigned char *, int)"],
"Camellia_set_key":["int","(const unsigned char *, const int, CAMELLIA_KEY *)"],
"Camellia_encrypt":["void","(const unsigned char *, unsigned char *, const CAMELLIA_KEY *)"],
"Camellia_decrypt":["void","(const unsigned char *, unsigned char *, const CAMELLIA_KEY *)"],
"Camellia_ecb_encrypt":["void","(const unsigned char *, unsigned char *, const CAMELLIA_KEY *, const int)"],
"Camellia_cbc_encrypt":["void","(const unsigned char *, unsigned char *, int, const CAMELLIA_KEY *, unsigned char *, const int)"],
"Camellia_cfb128_encrypt":["void","(const unsigned char *, unsigned char *, int, const CAMELLIA_KEY *, unsigned char *, int *, const int)"],
"Camellia_cfb1_encrypt":["void","(const unsigned char *, unsigned char *, int, const CAMELLIA_KEY *, unsigned char *, int *, const int)"],
"Camellia_cfb8_encrypt":["void","(const unsigned char *, unsigned char *, int, const CAMELLIA_KEY *, unsigned char *, int *, const int)"],
"Camellia_ofb128_encrypt":["void","(const unsigned char *, unsigned char *, int, const CAMELLIA_KEY *, unsigned char *, int *)"],
"Camellia_ctr128_encrypt":["void","(const unsigned char *, unsigned char *, int, const CAMELLIA_KEY *, unsigned char *, unsigned char *, unsigned int *)"],
"CAST_set_key":["void","(CAST_KEY *, int, const unsigned char *)"],
"CAST_ecb_encrypt":["void","(const unsigned char *, unsigned char *, const CAST_KEY *, int)"],
"CAST_encrypt":["void","(unsigned int *, const CAST_KEY *)"],
"CAST_decrypt":["void","(unsigned int *, const CAST_KEY *)"],
"CAST_cbc_encrypt":["void","(const unsigned char *, unsigned char *, long, const CAST_KEY *, unsigned char *, int)"],
"CAST_cfb64_encrypt":["void","(const unsigned char *, unsigned char *, long, const CAST_KEY *, unsigned char *, int *, int)"],
"CAST_ofb64_encrypt":["void","(const unsigned char *, unsigned char *, long, const CAST_KEY *, unsigned char *, int *)"],
"ERR_load_EVP_strings":["int","()"],
"ERR_load_OBJ_strings":["int","()"],
"OBJ_NAME_init":["int","()"],
"OBJ_NAME_new_index":["int","(unsigned long (*)(const char *), int (*)(const char *, const char *), void (*)(const char *, int, const char *))"],
"OBJ_NAME_get":["const char *","(const char *, int)"],
"OBJ_NAME_add":["int","(const char *, int, const char *)"],
"OBJ_NAME_remove":["int","(const char *, int)"],
"OBJ_NAME_cleanup":["void","(int)"],
"OBJ_NAME_do_all":["void","(int, void (*)(const OBJ_NAME *, void *), void *)"],
"OBJ_NAME_do_all_sorted":["void","(int, void (*)(const OBJ_NAME *, void *), void *)"],
"OBJ_dup":["ASN1_OBJECT *","(const ASN1_OBJECT *)"],
"OBJ_nid2obj":["ASN1_OBJECT *","(int)"],
"OBJ_nid2ln":["const char *","(int)"],
"OBJ_nid2sn":["const char *","(int)"],
"OBJ_obj2nid":["int","(const ASN1_OBJECT *)"],
"OBJ_txt2obj":["ASN1_OBJECT *","(const char *, int)"],
"OBJ_obj2txt":["int","(char *, int, const ASN1_OBJECT *, int)"],
"OBJ_txt2nid":["int","(const char *)"],
"OBJ_ln2nid":["int","(const char *)"],
"OBJ_sn2nid":["int","(const char *)"],
"OBJ_cmp":["int","(const ASN1_OBJECT *, const ASN1_OBJECT *)"],
"OBJ_bsearch_":["const void *","(const void *, const void *, int, int, int (*)(const void *, const void *))"],
"OBJ_bsearch_ex_":["const void *","(const void *, const void *, int, int, int (*)(const void *, const void *), int)"],
"OBJ_new_nid":["int","(int)"],
"OBJ_add_object":["int","(const ASN1_OBJECT *)"],
"OBJ_create":["int","(const char *, const char *, const char *)"],
"OBJ_create_objects":["int","(BIO *)"],
"OBJ_length":["int","(const ASN1_OBJECT *)"],
"OBJ_get0_data":["const unsigned char *","(const ASN1_OBJECT *)"],
"OBJ_find_sigid_algs":["int","(int, int *, int *)"],
"OBJ_find_sigid_by_algs":["int","(int *, int, int)"],
"OBJ_add_sigid":["int","(int, int, int)"],
"OBJ_sigid_free":["void","()"],
"EVP_MD_meth_new":["EVP_MD *","(int, int)"],
"EVP_MD_meth_dup":["EVP_MD *","(const EVP_MD *)"],
"EVP_MD_meth_free":["void","(EVP_MD *)"],
"EVP_MD_meth_set_input_blocksize":["int","(EVP_MD *, int)"],
"EVP_MD_meth_set_result_size":["int","(EVP_MD *, int)"],
"EVP_MD_meth_set_app_datasize":["int","(EVP_MD *, int)"],
"EVP_MD_meth_set_flags":["int","(EVP_MD *, unsigned long)"],
"EVP_MD_meth_set_init":["int","(EVP_MD *, int (*)(EVP_MD_CTX *))"],
"EVP_MD_meth_set_update":["int","(EVP_MD *, int (*)(EVP_MD_CTX *, const void *, int))"],
"EVP_MD_meth_set_final":["int","(EVP_MD *, int (*)(EVP_MD_CTX *, unsigned char *))"],
"EVP_MD_meth_set_copy":["int","(EVP_MD *, int (*)(EVP_MD_CTX *, const EVP_MD_CTX *))"],
"EVP_MD_meth_set_cleanup":["int","(EVP_MD *, int (*)(EVP_MD_CTX *))"],
"EVP_MD_meth_set_ctrl":["int","(EVP_MD *, int (*)(EVP_MD_CTX *, int, int, void *))"],
"EVP_MD_meth_get_input_blocksize":["int","(const EVP_MD *)"],
"EVP_MD_meth_get_result_size":["int","(const EVP_MD *)"],
"EVP_MD_meth_get_app_datasize":["int","(const EVP_MD *)"],
"EVP_MD_meth_get_flags":["unsigned long","(const EVP_MD *)"],
"EVP_MD_meth_get_init":["int (*)(EVP_MD_CTX *)","(const EVP_MD *)"],
"EVP_MD_meth_get_update":["int (*)(EVP_MD_CTX *, const void *, int)","(const EVP_MD *)"],
"EVP_MD_meth_get_final":["int (*)(EVP_MD_CTX *, unsigned char *)","(const EVP_MD *)"],
"EVP_MD_meth_get_copy":["int (*)(EVP_MD_CTX *, const EVP_MD_CTX *)","(const EVP_MD *)"],
"EVP_MD_meth_get_cleanup":["int (*)(EVP_MD_CTX *)","(const EVP_MD *)"],
"EVP_MD_meth_get_ctrl":["int (*)(EVP_MD_CTX *, int, int, void *)","(const EVP_MD *)"],
"EVP_CIPHER_meth_new":["EVP_CIPHER *","(int, int, int)"],
"EVP_CIPHER_meth_dup":["EVP_CIPHER *","(const EVP_CIPHER *)"],
"EVP_CIPHER_meth_free":["void","(EVP_CIPHER *)"],
"EVP_CIPHER_meth_set_iv_length":["int","(EVP_CIPHER *, int)"],
"EVP_CIPHER_meth_set_flags":["int","(EVP_CIPHER *, unsigned long)"],
"EVP_CIPHER_meth_set_impl_ctx_size":["int","(EVP_CIPHER *, int)"],
"EVP_CIPHER_meth_set_init":["int","(EVP_CIPHER *, int (*)(EVP_CIPHER_CTX *, const unsigned char *, const unsigned char *, int))"],
"EVP_CIPHER_meth_set_do_cipher":["int","(EVP_CIPHER *, int (*)(EVP_CIPHER_CTX *, unsigned char *, const unsigned char *, int))"],
"EVP_CIPHER_meth_set_cleanup":["int","(EVP_CIPHER *, int (*)(EVP_CIPHER_CTX *))"],
"EVP_CIPHER_meth_set_set_asn1_params":["int","(EVP_CIPHER *, int (*)(EVP_CIPHER_CTX *, ASN1_TYPE *))"],
"EVP_CIPHER_meth_set_get_asn1_params":["int","(EVP_CIPHER *, int (*)(EVP_CIPHER_CTX *, ASN1_TYPE *))"],
"EVP_CIPHER_meth_set_ctrl":["int","(EVP_CIPHER *, int (*)(EVP_CIPHER_CTX *, int, int, void *))"],
"EVP_CIPHER_meth_get_init":["int (*)(EVP_CIPHER_CTX *, const unsigned char *, const unsigned char *, int)","(const EVP_CIPHER *)"],
"EVP_CIPHER_meth_get_do_cipher":["int (*)(EVP_CIPHER_CTX *, unsigned char *, const unsigned char *, int)","(const EVP_CIPHER *)"],
"EVP_CIPHER_meth_get_cleanup":["int (*)(EVP_CIPHER_CTX *)","(const EVP_CIPHER *)"],
"EVP_CIPHER_meth_get_set_asn1_params":["int (*)(EVP_CIPHER_CTX *, ASN1_TYPE *)","(const EVP_CIPHER *)"],
"EVP_CIPHER_meth_get_get_asn1_params":["int (*)(EVP_CIPHER_CTX *, ASN1_TYPE *)","(const EVP_CIPHER *)"],
"EVP_CIPHER_meth_get_ctrl":["int (*)(EVP_CIPHER_CTX *, int, int, void *)","(const EVP_CIPHER *)"],
"EVP_MD_type":["int","(const EVP_MD *)"],
"EVP_MD_pkey_type":["int","(const EVP_MD *)"],
"EVP_MD_size":["int","(const EVP_MD *)"],
"EVP_MD_block_size":["int","(const EVP_MD *)"],
"EVP_MD_flags":["unsigned long","(const EVP_MD *)"],
"EVP_MD_CTX_md":["const EVP_MD *","(const EVP_MD_CTX *)"],
"EVP_MD_CTX_update_fn":["int (*)(EVP_MD_CTX *, const void *, int)","(EVP_MD_CTX *)"],
"EVP_MD_CTX_set_update_fn":["void","(EVP_MD_CTX *, int (*)(EVP_MD_CTX *, const void *, int))"],
"EVP_MD_CTX_pkey_ctx":["EVP_PKEY_CTX *","(const EVP_MD_CTX *)"],
"EVP_MD_CTX_set_pkey_ctx":["void","(EVP_MD_CTX *, EVP_PKEY_CTX *)"],
"EVP_MD_CTX_md_data":["void *","(const EVP_MD_CTX *)"],
"EVP_CIPHER_nid":["int","(const EVP_CIPHER *)"],
"EVP_CIPHER_block_size":["int","(const EVP_CIPHER *)"],
"EVP_CIPHER_impl_ctx_size":["int","(const EVP_CIPHER *)"],
"EVP_CIPHER_key_length":["int","(const EVP_CIPHER *)"],
"EVP_CIPHER_iv_length":["int","(const EVP_CIPHER *)"],
"EVP_CIPHER_flags":["unsigned long","(const EVP_CIPHER *)"],
"EVP_CIPHER_CTX_cipher":["const EVP_CIPHER *","(const EVP_CIPHER_CTX *)"],
"EVP_CIPHER_CTX_encrypting":["int","(const EVP_CIPHER_CTX *)"],
"EVP_CIPHER_CTX_nid":["int","(const EVP_CIPHER_CTX *)"],
"EVP_CIPHER_CTX_block_size":["int","(const EVP_CIPHER_CTX *)"],
"EVP_CIPHER_CTX_key_length":["int","(const EVP_CIPHER_CTX *)"],
"EVP_CIPHER_CTX_iv_length":["int","(const EVP_CIPHER_CTX *)"],
"EVP_CIPHER_CTX_iv":["const unsigned char *","(const EVP_CIPHER_CTX *)"],
"EVP_CIPHER_CTX_original_iv":["const unsigned char *","(const EVP_CIPHER_CTX *)"],
"EVP_CIPHER_CTX_iv_noconst":["unsigned char *","(EVP_CIPHER_CTX *)"],
"EVP_CIPHER_CTX_buf_noconst":["unsigned char *","(EVP_CIPHER_CTX *)"],
"EVP_CIPHER_CTX_num":["int","(const EVP_CIPHER_CTX *)"],
"EVP_CIPHER_CTX_set_num":["void","(EVP_CIPHER_CTX *, int)"],
"EVP_CIPHER_CTX_copy":["int","(EVP_CIPHER_CTX *, const EVP_CIPHER_CTX *)"],
"EVP_CIPHER_CTX_get_app_data":["void *","(const EVP_CIPHER_CTX *)"],
"EVP_CIPHER_CTX_set_app_data":["void","(EVP_CIPHER_CTX *, void *)"],
"EVP_CIPHER_CTX_get_cipher_data":["void *","(const EVP_CIPHER_CTX *)"],
"EVP_CIPHER_CTX_set_cipher_data":["void *","(EVP_CIPHER_CTX *, void *)"],
"EVP_Cipher":["int","(EVP_CIPHER_CTX *, unsigned char *, const unsigned char *, unsigned int)"],
"EVP_MD_CTX_ctrl":["int","(EVP_MD_CTX *, int, int, void *)"],
"EVP_MD_CTX_new":["EVP_MD_CTX *","()"],
"EVP_MD_CTX_reset":["int","(EVP_MD_CTX *)"],
"EVP_MD_CTX_free":["void","(EVP_MD_CTX *)"],
"EVP_MD_CTX_copy_ex":["int","(EVP_MD_CTX *, const EVP_MD_CTX *)"],
"EVP_MD_CTX_set_flags":["void","(EVP_MD_CTX *, int)"],
"EVP_MD_CTX_clear_flags":["void","(EVP_MD_CTX *, int)"],
"EVP_MD_CTX_test_flags":["int","(const EVP_MD_CTX *, int)"],
"EVP_DigestInit_ex":["int","(EVP_MD_CTX *, const EVP_MD *, ENGINE *)"],
"EVP_DigestUpdate":["int","(EVP_MD_CTX *, const void *, int)"],
"EVP_DigestFinal_ex":["int","(EVP_MD_CTX *, unsigned char *, unsigned int *)"],
"EVP_Digest":["int","(const void *, int, unsigned char *, unsigned int *, const EVP_MD *, ENGINE *)"],
"EVP_MD_CTX_copy":["int","(EVP_MD_CTX *, const EVP_MD_CTX *)"],
"EVP_DigestInit":["int","(EVP_MD_CTX *, const EVP_MD *)"],
"EVP_DigestFinal":["int","(EVP_MD_CTX *, unsigned char *, unsigned int *)"],
"EVP_DigestFinalXOF":["int","(EVP_MD_CTX *, unsigned char *, int)"],
"EVP_read_pw_string":["int","(char *, int, const char *, int)"],
"EVP_read_pw_string_min":["int","(char *, int, int, const char *, int)"],
"EVP_set_pw_prompt":["void","(const char *)"],
"EVP_get_pw_prompt":["char *","()"],
"EVP_BytesToKey":["int","(const EVP_CIPHER *, const EVP_MD *, const unsigned char *, const unsigned char *, int, int, unsigned char *, unsigned char *)"],
"EVP_CIPHER_CTX_set_flags":["void","(EVP_CIPHER_CTX *, int)"],
"EVP_CIPHER_CTX_clear_flags":["void","(EVP_CIPHER_CTX *, int)"],
"EVP_CIPHER_CTX_test_flags":["int","(const EVP_CIPHER_CTX *, int)"],
"EVP_EncryptInit":["int","(EVP_CIPHER_CTX *, const EVP_CIPHER *, const unsigned char *, const unsigned char *)"],
"EVP_EncryptInit_ex":["int","(EVP_CIPHER_CTX *, const EVP_CIPHER *, ENGINE *, const unsigned char *, const unsigned char *)"],
"EVP_EncryptUpdate":["int","(EVP_CIPHER_CTX *, unsigned char *, int *, const unsigned char *, int)"],
"EVP_EncryptFinal_ex":["int","(EVP_CIPHER_CTX *, unsigned char *, int *)"],
"EVP_EncryptFinal":["int","(EVP_CIPHER_CTX *, unsigned char *, int *)"],
"EVP_DecryptInit":["int","(EVP_CIPHER_CTX *, const EVP_CIPHER *, const unsigned char *, const unsigned char *)"],
"EVP_DecryptInit_ex":["int","(EVP_CIPHER_CTX *, const EVP_CIPHER *, ENGINE *, const unsigned char *, const unsigned char *)"],
"EVP_DecryptUpdate":["int","(EVP_CIPHER_CTX *, unsigned char *, int *, const unsigned char *, int)"],
"EVP_DecryptFinal":["int","(EVP_CIPHER_CTX *, unsigned char *, int *)"],
"EVP_DecryptFinal_ex":["int","(EVP_CIPHER_CTX *, unsigned char *, int *)"],
"EVP_CipherInit":["int","(EVP_CIPHER_CTX *, const EVP_CIPHER *, const unsigned char *, const unsigned char *, int)"],
"EVP_CipherInit_ex":["int","(EVP_CIPHER_CTX *, const EVP_CIPHER *, ENGINE *, const unsigned char *, const unsigned char *, int)"],
"EVP_CipherUpdate":["int","(EVP_CIPHER_CTX *, unsigned char *, int *, const unsigned char *, int)"],
"EVP_CipherFinal":["int","(EVP_CIPHER_CTX *, unsigned char *, int *)"],
"EVP_CipherFinal_ex":["int","(EVP_CIPHER_CTX *, unsigned char *, int *)"],
"EVP_SignFinal":["int","(EVP_MD_CTX *, unsigned char *, unsigned int *, EVP_PKEY *)"],
"EVP_DigestSign":["int","(EVP_MD_CTX *, unsigned char *, int *, const unsigned char *, int)"],
"EVP_VerifyFinal":["int","(EVP_MD_CTX *, const unsigned char *, unsigned int, EVP_PKEY *)"],
"EVP_DigestVerify":["int","(EVP_MD_CTX *, const unsigned char *, int, const unsigned char *, int)"],
"EVP_DigestSignInit":["int","(EVP_MD_CTX *, EVP_PKEY_CTX **, const EVP_MD *, ENGINE *, EVP_PKEY *)"],
"EVP_DigestSignFinal":["int","(EVP_MD_CTX *, unsigned char *, int *)"],
"EVP_DigestVerifyInit":["int","(EVP_MD_CTX *, EVP_PKEY_CTX **, const EVP_MD *, ENGINE *, EVP_PKEY *)"],
"EVP_DigestVerifyFinal":["int","(EVP_MD_CTX *, const unsigned char *, int)"],
"EVP_OpenInit":["int","(EVP_CIPHER_CTX *, const EVP_CIPHER *, const unsigned char *, int, const unsigned char *, EVP_PKEY *)"],
"EVP_OpenFinal":["int","(EVP_CIPHER_CTX *, unsigned char *, int *)"],
"EVP_SealInit":["int","(EVP_CIPHER_CTX *, const EVP_CIPHER *, unsigned char **, int *, unsigned char *, EVP_PKEY **, int)"],
"EVP_SealFinal":["int","(EVP_CIPHER_CTX *, unsigned char *, int *)"],
"EVP_ENCODE_CTX_new":["EVP_ENCODE_CTX *","()"],
"EVP_ENCODE_CTX_free":["void","(EVP_ENCODE_CTX *)"],
"EVP_ENCODE_CTX_copy":["int","(EVP_ENCODE_CTX *, EVP_ENCODE_CTX *)"],
"EVP_ENCODE_CTX_num":["int","(EVP_ENCODE_CTX *)"],
"EVP_EncodeInit":["void","(EVP_ENCODE_CTX *)"],
"EVP_EncodeUpdate":["int","(EVP_ENCODE_CTX *, unsigned char *, int *, const unsigned char *, int)"],
"EVP_EncodeFinal":["void","(EVP_ENCODE_CTX *, unsigned char *, int *)"],
"EVP_EncodeBlock":["int","(unsigned char *, const unsigned char *, int)"],
"EVP_DecodeInit":["void","(EVP_ENCODE_CTX *)"],
"EVP_DecodeUpdate":["int","(EVP_ENCODE_CTX *, unsigned char *, int *, const unsigned char *, int)"],
"EVP_DecodeFinal":["int","(EVP_ENCODE_CTX *, unsigned char *, int *)"],
"EVP_DecodeBlock":["int","(unsigned char *, const unsigned char *, int)"],
"EVP_CIPHER_CTX_new":["EVP_CIPHER_CTX *","()"],
"EVP_CIPHER_CTX_reset":["int","(EVP_CIPHER_CTX *)"],
"EVP_CIPHER_CTX_free":["void","(EVP_CIPHER_CTX *)"],
"EVP_CIPHER_CTX_set_key_length":["int","(EVP_CIPHER_CTX *, int)"],
"EVP_CIPHER_CTX_set_padding":["int","(EVP_CIPHER_CTX *, int)"],
"EVP_CIPHER_CTX_ctrl":["int","(EVP_CIPHER_CTX *, int, int, void *)"],
"EVP_CIPHER_CTX_rand_key":["int","(EVP_CIPHER_CTX *, unsigned char *)"],
"BIO_f_md":["const BIO_METHOD *","()"],
"BIO_f_base64":["const BIO_METHOD *","()"],
"BIO_f_cipher":["const BIO_METHOD *","()"],
"BIO_f_reliable":["const BIO_METHOD *","()"],
"BIO_set_cipher":["int","(BIO *, const EVP_CIPHER *, const unsigned char *, const unsigned char *, int)"],
"EVP_md_null":["const EVP_MD *","()"],
"EVP_md4":["const EVP_MD *","()"],
"EVP_md5":["const EVP_MD *","()"],
"EVP_md5_sha1":["const EVP_MD *","()"],
"EVP_blake2b512":["const EVP_MD *","()"],
"EVP_blake2s256":["const EVP_MD *","()"],
"EVP_sha1":["const EVP_MD *","()"],
"EVP_sha224":["const EVP_MD *","()"],
"EVP_sha256":["const EVP_MD *","()"],
"EVP_sha384":["const EVP_MD *","()"],
"EVP_sha512":["const EVP_MD *","()"],
"EVP_sha512_224":["const EVP_MD *","()"],
"EVP_sha512_256":["const EVP_MD *","()"],
"EVP_sha3_224":["const EVP_MD *","()"],
"EVP_sha3_256":["const EVP_MD *","()"],
"EVP_sha3_384":["const EVP_MD *","()"],
"EVP_sha3_512":["const EVP_MD *","()"],
"EVP_shake128":["const EVP_MD *","()"],
"EVP_shake256":["const EVP_MD *","()"],
"EVP_ripemd160":["const EVP_MD *","()"],
"EVP_whirlpool":["const EVP_MD *","()"],
"EVP_sm3":["const EVP_MD *","()"],
"EVP_enc_null":["const EVP_CIPHER *","()"],
"EVP_des_ecb":["const EVP_CIPHER *","()"],
"EVP_des_ede":["const EVP_CIPHER *","()"],
"EVP_des_ede3":["const EVP_CIPHER *","()"],
"EVP_des_ede_ecb":["const EVP_CIPHER *","()"],
"EVP_des_ede3_ecb":["const EVP_CIPHER *","()"],
"EVP_des_cfb64":["const EVP_CIPHER *","()"],
"EVP_des_cfb1":["const EVP_CIPHER *","()"],
"EVP_des_cfb8":["const EVP_CIPHER *","()"],
"EVP_des_ede_cfb64":["const EVP_CIPHER *","()"],
"EVP_des_ede3_cfb64":["const EVP_CIPHER *","()"],
"EVP_des_ede3_cfb1":["const EVP_CIPHER *","()"],
"EVP_des_ede3_cfb8":["const EVP_CIPHER *","()"],
"EVP_des_ofb":["const EVP_CIPHER *","()"],
"EVP_des_ede_ofb":["const EVP_CIPHER *","()"],
"EVP_des_ede3_ofb":["const EVP_CIPHER *","()"],
"EVP_des_cbc":["const EVP_CIPHER *","()"],
"EVP_des_ede_cbc":["const EVP_CIPHER *","()"],
"EVP_des_ede3_cbc":["const EVP_CIPHER *","()"],
"EVP_desx_cbc":["const EVP_CIPHER *","()"],
"EVP_des_ede3_wrap":["const EVP_CIPHER *","()"],
"EVP_rc4":["const EVP_CIPHER *","()"],
"EVP_rc4_40":["const EVP_CIPHER *","()"],
"EVP_rc4_hmac_md5":["const EVP_CIPHER *","()"],
"EVP_rc2_ecb":["const EVP_CIPHER *","()"],
"EVP_rc2_cbc":["const EVP_CIPHER *","()"],
"EVP_rc2_40_cbc":["const EVP_CIPHER *","()"],
"EVP_rc2_64_cbc":["const EVP_CIPHER *","()"],
"EVP_rc2_cfb64":["const EVP_CIPHER *","()"],
"EVP_rc2_ofb":["const EVP_CIPHER *","()"],
"EVP_bf_ecb":["const EVP_CIPHER *","()"],
"EVP_bf_cbc":["const EVP_CIPHER *","()"],
"EVP_bf_cfb64":["const EVP_CIPHER *","()"],
"EVP_bf_ofb":["const EVP_CIPHER *","()"],
"EVP_cast5_ecb":["const EVP_CIPHER *","()"],
"EVP_cast5_cbc":["const EVP_CIPHER *","()"],
"EVP_cast5_cfb64":["const EVP_CIPHER *","()"],
"EVP_cast5_ofb":["const EVP_CIPHER *","()"],
"EVP_aes_128_ecb":["const EVP_CIPHER *","()"],
"EVP_aes_128_cbc":["const EVP_CIPHER *","()"],
"EVP_aes_128_cfb1":["const EVP_CIPHER *","()"],
"EVP_aes_128_cfb8":["const EVP_CIPHER *","()"],
"EVP_aes_128_cfb128":["const EVP_CIPHER *","()"],
"EVP_aes_128_ofb":["const EVP_CIPHER *","()"],
"EVP_aes_128_ctr":["const EVP_CIPHER *","()"],
"EVP_aes_128_ccm":["const EVP_CIPHER *","()"],
"EVP_aes_128_gcm":["const EVP_CIPHER *","()"],
"EVP_aes_128_xts":["const EVP_CIPHER *","()"],
"EVP_aes_128_wrap":["const EVP_CIPHER *","()"],
"EVP_aes_128_wrap_pad":["const EVP_CIPHER *","()"],
"EVP_aes_128_ocb":["const EVP_CIPHER *","()"],
"EVP_aes_192_ecb":["const EVP_CIPHER *","()"],
"EVP_aes_192_cbc":["const EVP_CIPHER *","()"],
"EVP_aes_192_cfb1":["const EVP_CIPHER *","()"],
"EVP_aes_192_cfb8":["const EVP_CIPHER *","()"],
"EVP_aes_192_cfb128":["const EVP_CIPHER *","()"],
"EVP_aes_192_ofb":["const EVP_CIPHER *","()"],
"EVP_aes_192_ctr":["const EVP_CIPHER *","()"],
"EVP_aes_192_ccm":["const EVP_CIPHER *","()"],
"EVP_aes_192_gcm":["const EVP_CIPHER *","()"],
"EVP_aes_192_wrap":["const EVP_CIPHER *","()"],
"EVP_aes_192_wrap_pad":["const EVP_CIPHER *","()"],
"EVP_aes_192_ocb":["const EVP_CIPHER *","()"],
"EVP_aes_256_ecb":["const EVP_CIPHER *","()"],
"EVP_aes_256_cbc":["const EVP_CIPHER *","()"],
"EVP_aes_256_cfb1":["const EVP_CIPHER *","()"],
"EVP_aes_256_cfb8":["const EVP_CIPHER *","()"],
"EVP_aes_256_cfb128":["const EVP_CIPHER *","()"],
"EVP_aes_256_ofb":["const EVP_CIPHER *","()"],
"EVP_aes_256_ctr":["const EVP_CIPHER *","()"],
"EVP_aes_256_ccm":["const EVP_CIPHER *","()"],
"EVP_aes_256_gcm":["const EVP_CIPHER *","()"],
"EVP_aes_256_xts":["const EVP_CIPHER *","()"],
"EVP_aes_256_wrap":["const EVP_CIPHER *","()"],
"EVP_aes_256_wrap_pad":["const EVP_CIPHER *","()"],
"EVP_aes_256_ocb":["const EVP_CIPHER *","()"],
"EVP_aes_128_cbc_hmac_sha1":["const EVP_CIPHER *","()"],
"EVP_aes_256_cbc_hmac_sha1":["const EVP_CIPHER *","()"],
"EVP_aes_128_cbc_hmac_sha256":["const EVP_CIPHER *","()"],
"EVP_aes_256_cbc_hmac_sha256":["const EVP_CIPHER *","()"],
"EVP_aria_128_ecb":["const EVP_CIPHER *","()"],
"EVP_aria_128_cbc":["const EVP_CIPHER *","()"],
"EVP_aria_128_cfb1":["const EVP_CIPHER *","()"],
"EVP_aria_128_cfb8":["const EVP_CIPHER *","()"],
"EVP_aria_128_cfb128":["const EVP_CIPHER *","()"],
"EVP_aria_128_ctr":["const EVP_CIPHER *","()"],
"EVP_aria_128_ofb":["const EVP_CIPHER *","()"],
"EVP_aria_128_gcm":["const EVP_CIPHER *","()"],
"EVP_aria_128_ccm":["const EVP_CIPHER *","()"],
"EVP_aria_192_ecb":["const EVP_CIPHER *","()"],
"EVP_aria_192_cbc":["const EVP_CIPHER *","()"],
"EVP_aria_192_cfb1":["const EVP_CIPHER *","()"],
"EVP_aria_192_cfb8":["const EVP_CIPHER *","()"],
"EVP_aria_192_cfb128":["const EVP_CIPHER *","()"],
"EVP_aria_192_ctr":["const EVP_CIPHER *","()"],
"EVP_aria_192_ofb":["const EVP_CIPHER *","()"],
"EVP_aria_192_gcm":["const EVP_CIPHER *","()"],
"EVP_aria_192_ccm":["const EVP_CIPHER *","()"],
"EVP_aria_256_ecb":["const EVP_CIPHER *","()"],
"EVP_aria_256_cbc":["const EVP_CIPHER *","()"],
"EVP_aria_256_cfb1":["const EVP_CIPHER *","()"],
"EVP_aria_256_cfb8":["const EVP_CIPHER *","()"],
"EVP_aria_256_cfb128":["const EVP_CIPHER *","()"],
"EVP_aria_256_ctr":["const EVP_CIPHER *","()"],
"EVP_aria_256_ofb":["const EVP_CIPHER *","()"],
"EVP_aria_256_gcm":["const EVP_CIPHER *","()"],
"EVP_aria_256_ccm":["const EVP_CIPHER *","()"],
"EVP_camellia_128_ecb":["const EVP_CIPHER *","()"],
"EVP_camellia_128_cbc":["const EVP_CIPHER *","()"],
"EVP_camellia_128_cfb1":["const EVP_CIPHER *","()"],
"EVP_camellia_128_cfb8":["const EVP_CIPHER *","()"],
"EVP_camellia_128_cfb128":["const EVP_CIPHER *","()"],
"EVP_camellia_128_ofb":["const EVP_CIPHER *","()"],
"EVP_camellia_128_ctr":["const EVP_CIPHER *","()"],
"EVP_camellia_192_ecb":["const EVP_CIPHER *","()"],
"EVP_camellia_192_cbc":["const EVP_CIPHER *","()"],
"EVP_camellia_192_cfb1":["const EVP_CIPHER *","()"],
"EVP_camellia_192_cfb8":["const EVP_CIPHER *","()"],
"EVP_camellia_192_cfb128":["const EVP_CIPHER *","()"],
"EVP_camellia_192_ofb":["const EVP_CIPHER *","()"],
"EVP_camellia_192_ctr":["const EVP_CIPHER *","()"],
"EVP_camellia_256_ecb":["const EVP_CIPHER *","()"],
"EVP_camellia_256_cbc":["const EVP_CIPHER *","()"],
"EVP_camellia_256_cfb1":["const EVP_CIPHER *","()"],
"EVP_camellia_256_cfb8":["const EVP_CIPHER *","()"],
"EVP_camellia_256_cfb128":["const EVP_CIPHER *","()"],
"EVP_camellia_256_ofb":["const EVP_CIPHER *","()"],
"EVP_camellia_256_ctr":["const EVP_CIPHER *","()"],
"EVP_chacha20":["const EVP_CIPHER *","()"],
"EVP_chacha20_poly1305":["const EVP_CIPHER *","()"],
"EVP_seed_ecb":["const EVP_CIPHER *","()"],
"EVP_seed_cbc":["const EVP_CIPHER *","()"],
"EVP_seed_cfb128":["const EVP_CIPHER *","()"],
"EVP_seed_ofb":["const EVP_CIPHER *","()"],
"EVP_sm4_ecb":["const EVP_CIPHER *","()"],
"EVP_sm4_cbc":["const EVP_CIPHER *","()"],
"EVP_sm4_cfb128":["const EVP_CIPHER *","()"],
"EVP_sm4_ofb":["const EVP_CIPHER *","()"],
"EVP_sm4_ctr":["const EVP_CIPHER *","()"],
"EVP_add_cipher":["int","(const EVP_CIPHER *)"],
"EVP_add_digest":["int","(const EVP_MD *)"],
"EVP_get_cipherbyname":["const EVP_CIPHER *","(const char *)"],
"EVP_get_digestbyname":["const EVP_MD *","(const char *)"],
"EVP_CIPHER_do_all":["void","(void (*)(const EVP_CIPHER *, const char *, const char *, void *), void *)"],
"EVP_CIPHER_do_all_sorted":["void","(void (*)(const EVP_CIPHER *, const char *, const char *, void *), void *)"],
"EVP_MD_do_all":["void","(void (*)(const EVP_MD *, const char *, const char *, void *), void *)"],
"EVP_MD_do_all_sorted":["void","(void (*)(const EVP_MD *, const char *, const char *, void *), void *)"],
"EVP_PKEY_decrypt_old":["int","(unsigned char *, const unsigned char *, int, EVP_PKEY *)"],
"EVP_PKEY_encrypt_old":["int","(unsigned char *, const unsigned char *, int, EVP_PKEY *)"],
"EVP_PKEY_type":["int","(int)"],
"EVP_PKEY_id":["int","(const EVP_PKEY *)"],
"EVP_PKEY_base_id":["int","(const EVP_PKEY *)"],
"EVP_PKEY_bits":["int","(const EVP_PKEY *)"],
"EVP_PKEY_security_bits":["int","(const EVP_PKEY *)"],
"EVP_PKEY_size":["int","(const EVP_PKEY *)"],
"EVP_PKEY_set_type":["int","(EVP_PKEY *, int)"],
"EVP_PKEY_set_type_str":["int","(EVP_PKEY *, const char *, int)"],
"EVP_PKEY_set_alias_type":["int","(EVP_PKEY *, int)"],
"EVP_PKEY_set1_engine":["int","(EVP_PKEY *, ENGINE *)"],
"EVP_PKEY_get0_engine":["ENGINE *","(const EVP_PKEY *)"],
"EVP_PKEY_assign":["int","(EVP_PKEY *, int, void *)"],
"EVP_PKEY_get0":["void *","(const EVP_PKEY *)"],
"EVP_PKEY_get0_hmac":["const unsigned char *","(const EVP_PKEY *, int *)"],
"EVP_PKEY_get0_poly1305":["const unsigned char *","(const EVP_PKEY *, int *)"],
"EVP_PKEY_get0_siphash":["const unsigned char *","(const EVP_PKEY *, int *)"],
"EVP_PKEY_set1_RSA":["int","(EVP_PKEY *, struct rsa_st *)"],
"EVP_PKEY_get0_RSA":["struct rsa_st *","(EVP_PKEY *)"],
"EVP_PKEY_get1_RSA":["struct rsa_st *","(EVP_PKEY *)"],
"EVP_PKEY_set1_DSA":["int","(EVP_PKEY *, struct dsa_st *)"],
"EVP_PKEY_get0_DSA":["struct dsa_st *","(EVP_PKEY *)"],
"EVP_PKEY_get1_DSA":["struct dsa_st *","(EVP_PKEY *)"],
"EVP_PKEY_set1_DH":["int","(EVP_PKEY *, struct dh_st *)"],
"EVP_PKEY_get0_DH":["struct dh_st *","(EVP_PKEY *)"],
"EVP_PKEY_get1_DH":["struct dh_st *","(EVP_PKEY *)"],
"EVP_PKEY_set1_EC_KEY":["int","(EVP_PKEY *, struct ec_key_st *)"],
"EVP_PKEY_get0_EC_KEY":["struct ec_key_st *","(EVP_PKEY *)"],
"EVP_PKEY_get1_EC_KEY":["struct ec_key_st *","(EVP_PKEY *)"],
"EVP_PKEY_new":["EVP_PKEY *","()"],
"EVP_PKEY_up_ref":["int","(EVP_PKEY *)"],
"EVP_PKEY_free":["void","(EVP_PKEY *)"],
"d2i_PublicKey":["EVP_PKEY *","(int, EVP_PKEY **, const unsigned char **, long)"],
"i2d_PublicKey":["int","(EVP_PKEY *, unsigned char **)"],
"d2i_PrivateKey":["EVP_PKEY *","(int, EVP_PKEY **, const unsigned char **, long)"],
"d2i_AutoPrivateKey":["EVP_PKEY *","(EVP_PKEY **, const unsigned char **, long)"],
"i2d_PrivateKey":["int","(EVP_PKEY *, unsigned char **)"],
"EVP_PKEY_copy_parameters":["int","(EVP_PKEY *, const EVP_PKEY *)"],
"EVP_PKEY_missing_parameters":["int","(const EVP_PKEY *)"],
"EVP_PKEY_save_parameters":["int","(EVP_PKEY *, int)"],
"EVP_PKEY_cmp_parameters":["int","(const EVP_PKEY *, const EVP_PKEY *)"],
"EVP_PKEY_cmp":["int","(const EVP_PKEY *, const EVP_PKEY *)"],
"EVP_PKEY_print_public":["int","(BIO *, const EVP_PKEY *, int, ASN1_PCTX *)"],
"EVP_PKEY_print_private":["int","(BIO *, const EVP_PKEY *, int, ASN1_PCTX *)"],
"EVP_PKEY_print_params":["int","(BIO *, const EVP_PKEY *, int, ASN1_PCTX *)"],
"EVP_PKEY_get_default_digest_nid":["int","(EVP_PKEY *, int *)"],
"EVP_PKEY_set1_tls_encodedpoint":["int","(EVP_PKEY *, const unsigned char *, int)"],
"EVP_PKEY_get1_tls_encodedpoint":["int","(EVP_PKEY *, unsigned char **)"],
"EVP_CIPHER_type":["int","(const EVP_CIPHER *)"],
"EVP_CIPHER_param_to_asn1":["int","(EVP_CIPHER_CTX *, ASN1_TYPE *)"],
"EVP_CIPHER_asn1_to_param":["int","(EVP_CIPHER_CTX *, ASN1_TYPE *)"],
"EVP_CIPHER_set_asn1_iv":["int","(EVP_CIPHER_CTX *, ASN1_TYPE *)"],
"EVP_CIPHER_get_asn1_iv":["int","(EVP_CIPHER_CTX *, ASN1_TYPE *)"],
"PKCS5_PBE_keyivgen":["int","(EVP_CIPHER_CTX *, const char *, int, ASN1_TYPE *, const EVP_CIPHER *, const EVP_MD *, int)"],
"PKCS5_PBKDF2_HMAC_SHA1":["int","(const char *, int, const unsigned char *, int, int, int, unsigned char *)"],
"PKCS5_PBKDF2_HMAC":["int","(const char *, int, const unsigned char *, int, int, const EVP_MD *, int, unsigned char *)"],
"PKCS5_v2_PBE_keyivgen":["int","(EVP_CIPHER_CTX *, const char *, int, ASN1_TYPE *, const EVP_CIPHER *, const EVP_MD *, int)"],
"EVP_PBE_scrypt":["int","(const char *, int, const unsigned char *, int, int, int, int, int, unsigned char *, int)"],
"PKCS5_v2_scrypt_keyivgen":["int","(EVP_CIPHER_CTX *, const char *, int, ASN1_TYPE *, const EVP_CIPHER *, const EVP_MD *, int)"],
"PKCS5_PBE_add":["void","()"],
"EVP_PBE_CipherInit":["int","(ASN1_OBJECT *, const char *, int, ASN1_TYPE *, EVP_CIPHER_CTX *, int)"],
"EVP_PBE_alg_add_type":["int","(int, int, int, int, EVP_PBE_KEYGEN *)"],
"EVP_PBE_alg_add":["int","(int, const EVP_CIPHER *, const EVP_MD *, EVP_PBE_KEYGEN *)"],
"EVP_PBE_find":["int","(int, int, int *, int *, EVP_PBE_KEYGEN **)"],
"EVP_PBE_cleanup":["void","()"],
"EVP_PBE_get":["int","(int *, int *, int)"],
"EVP_PKEY_asn1_get_count":["int","()"],
"EVP_PKEY_asn1_get0":["const EVP_PKEY_ASN1_METHOD *","(int)"],
"EVP_PKEY_asn1_find":["const EVP_PKEY_ASN1_METHOD *","(ENGINE **, int)"],
"EVP_PKEY_asn1_find_str":["const EVP_PKEY_ASN1_METHOD *","(ENGINE **, const char *, int)"],
"EVP_PKEY_asn1_add0":["int","(const EVP_PKEY_ASN1_METHOD *)"],
"EVP_PKEY_asn1_add_alias":["int","(int, int)"],
"EVP_PKEY_asn1_get0_info":["int","(int *, int *, int *, const char **, const char **, const EVP_PKEY_ASN1_METHOD *)"],
"EVP_PKEY_get0_asn1":["const EVP_PKEY_ASN1_METHOD *","(const EVP_PKEY *)"],
"EVP_PKEY_asn1_new":["EVP_PKEY_ASN1_METHOD *","(int, int, const char *, const char *)"],
"EVP_PKEY_asn1_copy":["void","(EVP_PKEY_ASN1_METHOD *, const EVP_PKEY_ASN1_METHOD *)"],
"EVP_PKEY_asn1_free":["void","(EVP_PKEY_ASN1_METHOD *)"],
"EVP_PKEY_asn1_set_public":["void","(EVP_PKEY_ASN1_METHOD *, int (*)(EVP_PKEY *, X509_PUBKEY *), int (*)(X509_PUBKEY *, const EVP_PKEY *), int (*)(const EVP_PKEY *, const EVP_PKEY *), int (*)(BIO *, const EVP_PKEY *, int, ASN1_PCTX *), int (*)(const EVP_PKEY *), int (*)(const EVP_PKEY *))"],
"EVP_PKEY_asn1_set_private":["void","(EVP_PKEY_ASN1_METHOD *, int (*)(EVP_PKEY *, const PKCS8_PRIV_KEY_INFO *), int (*)(PKCS8_PRIV_KEY_INFO *, const EVP_PKEY *), int (*)(BIO *, const EVP_PKEY *, int, ASN1_PCTX *))"],
"EVP_PKEY_asn1_set_param":["void","(EVP_PKEY_ASN1_METHOD *, int (*)(EVP_PKEY *, const unsigned char **, int), int (*)(const EVP_PKEY *, unsigned char **), int (*)(const EVP_PKEY *), int (*)(EVP_PKEY *, const EVP_PKEY *), int (*)(const EVP_PKEY *, const EVP_PKEY *), int (*)(BIO *, const EVP_PKEY *, int, ASN1_PCTX *))"],
"EVP_PKEY_asn1_set_free":["void","(EVP_PKEY_ASN1_METHOD *, void (*)(EVP_PKEY *))"],
"EVP_PKEY_asn1_set_ctrl":["void","(EVP_PKEY_ASN1_METHOD *, int (*)(EVP_PKEY *, int, long, void *))"],
"EVP_PKEY_asn1_set_item":["void","(EVP_PKEY_ASN1_METHOD *, int (*)(EVP_MD_CTX *, const ASN1_ITEM *, void *, X509_ALGOR *, ASN1_BIT_STRING *, EVP_PKEY *), int (*)(EVP_MD_CTX *, const ASN1_ITEM *, void *, X509_ALGOR *, X509_ALGOR *, ASN1_BIT_STRING *))"],
"EVP_PKEY_asn1_set_siginf":["void","(EVP_PKEY_ASN1_METHOD *, int (*)(X509_SIG_INFO *, const X509_ALGOR *, const ASN1_STRING *))"],
"EVP_PKEY_asn1_set_check":["void","(EVP_PKEY_ASN1_METHOD *, int (*)(const EVP_PKEY *))"],
"EVP_PKEY_asn1_set_public_check":["void","(EVP_PKEY_ASN1_METHOD *, int (*)(const EVP_PKEY *))"],
"EVP_PKEY_asn1_set_param_check":["void","(EVP_PKEY_ASN1_METHOD *, int (*)(const EVP_PKEY *))"],
"EVP_PKEY_asn1_set_set_priv_key":["void","(EVP_PKEY_ASN1_METHOD *, int (*)(EVP_PKEY *, const unsigned char *, int))"],
"EVP_PKEY_asn1_set_set_pub_key":["void","(EVP_PKEY_ASN1_METHOD *, int (*)(EVP_PKEY *, const unsigned char *, int))"],
"EVP_PKEY_asn1_set_get_priv_key":["void","(EVP_PKEY_ASN1_METHOD *, int (*)(const EVP_PKEY *, unsigned char *, int *))"],
"EVP_PKEY_asn1_set_get_pub_key":["void","(EVP_PKEY_ASN1_METHOD *, int (*)(const EVP_PKEY *, unsigned char *, int *))"],
"EVP_PKEY_asn1_set_security_bits":["void","(EVP_PKEY_ASN1_METHOD *, int (*)(const EVP_PKEY *))"],
"EVP_PKEY_meth_find":["const EVP_PKEY_METHOD *","(int)"],
"EVP_PKEY_meth_new":["EVP_PKEY_METHOD *","(int, int)"],
"EVP_PKEY_meth_get0_info":["void","(int *, int *, const EVP_PKEY_METHOD *)"],
"EVP_PKEY_meth_copy":["void","(EVP_PKEY_METHOD *, const EVP_PKEY_METHOD *)"],
"EVP_PKEY_meth_free":["void","(EVP_PKEY_METHOD *)"],
"EVP_PKEY_meth_add0":["int","(const EVP_PKEY_METHOD *)"],
"EVP_PKEY_meth_remove":["int","(const EVP_PKEY_METHOD *)"],
"EVP_PKEY_meth_get_count":["int","()"],
"EVP_PKEY_meth_get0":["const EVP_PKEY_METHOD *","(int)"],
"EVP_PKEY_CTX_new":["EVP_PKEY_CTX *","(EVP_PKEY *, ENGINE *)"],
"EVP_PKEY_CTX_new_id":["EVP_PKEY_CTX *","(int, ENGINE *)"],
"EVP_PKEY_CTX_dup":["EVP_PKEY_CTX *","(EVP_PKEY_CTX *)"],
"EVP_PKEY_CTX_free":["void","(EVP_PKEY_CTX *)"],
"EVP_PKEY_CTX_ctrl":["int","(EVP_PKEY_CTX *, int, int, int, int, void *)"],
"EVP_PKEY_CTX_ctrl_str":["int","(EVP_PKEY_CTX *, const char *, const char *)"],
"EVP_PKEY_CTX_ctrl_uint64":["int","(EVP_PKEY_CTX *, int, int, int, int)"],
"EVP_PKEY_CTX_str2ctrl":["int","(EVP_PKEY_CTX *, int, const char *)"],
"EVP_PKEY_CTX_hex2ctrl":["int","(EVP_PKEY_CTX *, int, const char *)"],
"EVP_PKEY_CTX_md":["int","(EVP_PKEY_CTX *, int, int, const char *)"],
"EVP_PKEY_CTX_get_operation":["int","(EVP_PKEY_CTX *)"],
"EVP_PKEY_CTX_set0_keygen_info":["void","(EVP_PKEY_CTX *, int *, int)"],
"EVP_PKEY_new_mac_key":["EVP_PKEY *","(int, ENGINE *, const unsigned char *, int)"],
"EVP_PKEY_new_raw_private_key":["EVP_PKEY *","(int, ENGINE *, const unsigned char *, int)"],
"EVP_PKEY_new_raw_public_key":["EVP_PKEY *","(int, ENGINE *, const unsigned char *, int)"],
"EVP_PKEY_get_raw_private_key":["int","(const EVP_PKEY *, unsigned char *, int *)"],
"EVP_PKEY_get_raw_public_key":["int","(const EVP_PKEY *, unsigned char *, int *)"],
"EVP_PKEY_new_CMAC_key":["EVP_PKEY *","(ENGINE *, const unsigned char *, int, const EVP_CIPHER *)"],
"EVP_PKEY_CTX_set_data":["void","(EVP_PKEY_CTX *, void *)"],
"EVP_PKEY_CTX_get_data":["void *","(EVP_PKEY_CTX *)"],
"EVP_PKEY_CTX_get0_pkey":["EVP_PKEY *","(EVP_PKEY_CTX *)"],
"EVP_PKEY_CTX_get0_peerkey":["EVP_PKEY *","(EVP_PKEY_CTX *)"],
"EVP_PKEY_CTX_set_app_data":["void","(EVP_PKEY_CTX *, void *)"],
"EVP_PKEY_CTX_get_app_data":["void *","(EVP_PKEY_CTX *)"],
"EVP_PKEY_sign_init":["int","(EVP_PKEY_CTX *)"],
"EVP_PKEY_sign":["int","(EVP_PKEY_CTX *, unsigned char *, int *, const unsigned char *, int)"],
"EVP_PKEY_verify_init":["int","(EVP_PKEY_CTX *)"],
"EVP_PKEY_verify":["int","(EVP_PKEY_CTX *, const unsigned char *, int, const unsigned char *, int)"],
"EVP_PKEY_verify_recover_init":["int","(EVP_PKEY_CTX *)"],
"EVP_PKEY_verify_recover":["int","(EVP_PKEY_CTX *, unsigned char *, int *, const unsigned char *, int)"],
"EVP_PKEY_encrypt_init":["int","(EVP_PKEY_CTX *)"],
"EVP_PKEY_encrypt":["int","(EVP_PKEY_CTX *, unsigned char *, int *, const unsigned char *, int)"],
"EVP_PKEY_decrypt_init":["int","(EVP_PKEY_CTX *)"],
"EVP_PKEY_decrypt":["int","(EVP_PKEY_CTX *, unsigned char *, int *, const unsigned char *, int)"],
"EVP_PKEY_derive_init":["int","(EVP_PKEY_CTX *)"],
"EVP_PKEY_derive_set_peer":["int","(EVP_PKEY_CTX *, EVP_PKEY *)"],
"EVP_PKEY_derive":["int","(EVP_PKEY_CTX *, unsigned char *, int *)"],
"EVP_PKEY_paramgen_init":["int","(EVP_PKEY_CTX *)"],
"EVP_PKEY_paramgen":["int","(EVP_PKEY_CTX *, EVP_PKEY **)"],
"EVP_PKEY_keygen_init":["int","(EVP_PKEY_CTX *)"],
"EVP_PKEY_keygen":["int","(EVP_PKEY_CTX *, EVP_PKEY **)"],
"EVP_PKEY_check":["int","(EVP_PKEY_CTX *)"],
"EVP_PKEY_public_check":["int","(EVP_PKEY_CTX *)"],
"EVP_PKEY_param_check":["int","(EVP_PKEY_CTX *)"],
"EVP_PKEY_CTX_set_cb":["void","(EVP_PKEY_CTX *, EVP_PKEY_gen_cb *)"],
"EVP_PKEY_CTX_get_cb":["EVP_PKEY_gen_cb *","(EVP_PKEY_CTX *)"],
"EVP_PKEY_CTX_get_keygen_info":["int","(EVP_PKEY_CTX *, int)"],
"EVP_PKEY_meth_set_init":["void","(EVP_PKEY_METHOD *, int (*)(EVP_PKEY_CTX *))"],
"EVP_PKEY_meth_set_copy":["void","(EVP_PKEY_METHOD *, int (*)(EVP_PKEY_CTX *, EVP_PKEY_CTX *))"],
"EVP_PKEY_meth_set_cleanup":["void","(EVP_PKEY_METHOD *, void (*)(EVP_PKEY_CTX *))"],
"EVP_PKEY_meth_set_paramgen":["void","(EVP_PKEY_METHOD *, int (*)(EVP_PKEY_CTX *), int (*)(EVP_PKEY_CTX *, EVP_PKEY *))"],
"EVP_PKEY_meth_set_keygen":["void","(EVP_PKEY_METHOD *, int (*)(EVP_PKEY_CTX *), int (*)(EVP_PKEY_CTX *, EVP_PKEY *))"],
"EVP_PKEY_meth_set_sign":["void","(EVP_PKEY_METHOD *, int (*)(EVP_PKEY_CTX *), int (*)(EVP_PKEY_CTX *, unsigned char *, int *, const unsigned char *, int))"],
"EVP_PKEY_meth_set_verify":["void","(EVP_PKEY_METHOD *, int (*)(EVP_PKEY_CTX *), int (*)(EVP_PKEY_CTX *, const unsigned char *, int, const unsigned char *, int))"],
"EVP_PKEY_meth_set_verify_recover":["void","(EVP_PKEY_METHOD *, int (*)(EVP_PKEY_CTX *), int (*)(EVP_PKEY_CTX *, unsigned char *, int *, const unsigned char *, int))"],
"EVP_PKEY_meth_set_signctx":["void","(EVP_PKEY_METHOD *, int (*)(EVP_PKEY_CTX *, EVP_MD_CTX *), int (*)(EVP_PKEY_CTX *, unsigned char *, int *, EVP_MD_CTX *))"],
"EVP_PKEY_meth_set_verifyctx":["void","(EVP_PKEY_METHOD *, int (*)(EVP_PKEY_CTX *, EVP_MD_CTX *), int (*)(EVP_PKEY_CTX *, const unsigned char *, int, EVP_MD_CTX *))"],
"EVP_PKEY_meth_set_encrypt":["void","(EVP_PKEY_METHOD *, int (*)(EVP_PKEY_CTX *), int (*)(EVP_PKEY_CTX *, unsigned char *, int *, const unsigned char *, int))"],
"EVP_PKEY_meth_set_decrypt":["void","(EVP_PKEY_METHOD *, int (*)(EVP_PKEY_CTX *), int (*)(EVP_PKEY_CTX *, unsigned char *, int *, const unsigned char *, int))"],
"EVP_PKEY_meth_set_derive":["void","(EVP_PKEY_METHOD *, int (*)(EVP_PKEY_CTX *), int (*)(EVP_PKEY_CTX *, unsigned char *, int *))"],
"EVP_PKEY_meth_set_ctrl":["void","(EVP_PKEY_METHOD *, int (*)(EVP_PKEY_CTX *, int, int, void *), int (*)(EVP_PKEY_CTX *, const char *, const char *))"],
"EVP_PKEY_meth_set_digestsign":["void","(EVP_PKEY_METHOD *, int (*)(EVP_MD_CTX *, unsigned char *, int *, const unsigned char *, int))"],
"EVP_PKEY_meth_set_digestverify":["void","(EVP_PKEY_METHOD *, int (*)(EVP_MD_CTX *, const unsigned char *, int, const unsigned char *, int))"],
"EVP_PKEY_meth_set_check":["void","(EVP_PKEY_METHOD *, int (*)(EVP_PKEY *))"],
"EVP_PKEY_meth_set_public_check":["void","(EVP_PKEY_METHOD *, int (*)(EVP_PKEY *))"],
"EVP_PKEY_meth_set_param_check":["void","(EVP_PKEY_METHOD *, int (*)(EVP_PKEY *))"],
"EVP_PKEY_meth_set_digest_custom":["void","(EVP_PKEY_METHOD *, int (*)(EVP_PKEY_CTX *, EVP_MD_CTX *))"],
"EVP_PKEY_meth_get_init":["void","(const EVP_PKEY_METHOD *, int (**)(EVP_PKEY_CTX *))"],
"EVP_PKEY_meth_get_copy":["void","(const EVP_PKEY_METHOD *, int (**)(EVP_PKEY_CTX *, EVP_PKEY_CTX *))"],
"EVP_PKEY_meth_get_cleanup":["void","(const EVP_PKEY_METHOD *, void (**)(EVP_PKEY_CTX *))"],
"EVP_PKEY_meth_get_paramgen":["void","(const EVP_PKEY_METHOD *, int (**)(EVP_PKEY_CTX *), int (**)(EVP_PKEY_CTX *, EVP_PKEY *))"],
"EVP_PKEY_meth_get_keygen":["void","(const EVP_PKEY_METHOD *, int (**)(EVP_PKEY_CTX *), int (**)(EVP_PKEY_CTX *, EVP_PKEY *))"],
"EVP_PKEY_meth_get_sign":["void","(const EVP_PKEY_METHOD *, int (**)(EVP_PKEY_CTX *), int (**)(EVP_PKEY_CTX *, unsigned char *, int *, const unsigned char *, int))"],
"EVP_PKEY_meth_get_verify":["void","(const EVP_PKEY_METHOD *, int (**)(EVP_PKEY_CTX *), int (**)(EVP_PKEY_CTX *, const unsigned char *, int, const unsigned char *, int))"],
"EVP_PKEY_meth_get_verify_recover":["void","(const EVP_PKEY_METHOD *, int (**)(EVP_PKEY_CTX *), int (**)(EVP_PKEY_CTX *, unsigned char *, int *, const unsigned char *, int))"],
"EVP_PKEY_meth_get_signctx":["void","(const EVP_PKEY_METHOD *, int (**)(EVP_PKEY_CTX *, EVP_MD_CTX *), int (**)(EVP_PKEY_CTX *, unsigned char *, int *, EVP_MD_CTX *))"],
"EVP_PKEY_meth_get_verifyctx":["void","(const EVP_PKEY_METHOD *, int (**)(EVP_PKEY_CTX *, EVP_MD_CTX *), int (**)(EVP_PKEY_CTX *, const unsigned char *, int, EVP_MD_CTX *))"],
"EVP_PKEY_meth_get_encrypt":["void","(const EVP_PKEY_METHOD *, int (**)(EVP_PKEY_CTX *), int (**)(EVP_PKEY_CTX *, unsigned char *, int *, const unsigned char *, int))"],
"EVP_PKEY_meth_get_decrypt":["void","(const EVP_PKEY_METHOD *, int (**)(EVP_PKEY_CTX *), int (**)(EVP_PKEY_CTX *, unsigned char *, int *, const unsigned char *, int))"],
"EVP_PKEY_meth_get_derive":["void","(const EVP_PKEY_METHOD *, int (**)(EVP_PKEY_CTX *), int (**)(EVP_PKEY_CTX *, unsigned char *, int *))"],
"EVP_PKEY_meth_get_ctrl":["void","(const EVP_PKEY_METHOD *, int (**)(EVP_PKEY_CTX *, int, int, void *), int (**)(EVP_PKEY_CTX *, const char *, const char *))"],
"EVP_PKEY_meth_get_digestsign":["void","(EVP_PKEY_METHOD *, int (**)(EVP_MD_CTX *, unsigned char *, int *, const unsigned char *, int))"],
"EVP_PKEY_meth_get_digestverify":["void","(EVP_PKEY_METHOD *, int (**)(EVP_MD_CTX *, const unsigned char *, int, const unsigned char *, int))"],
"EVP_PKEY_meth_get_check":["void","(const EVP_PKEY_METHOD *, int (**)(EVP_PKEY *))"],
"EVP_PKEY_meth_get_public_check":["void","(const EVP_PKEY_METHOD *, int (**)(EVP_PKEY *))"],
"EVP_PKEY_meth_get_param_check":["void","(const EVP_PKEY_METHOD *, int (**)(EVP_PKEY *))"],
"EVP_PKEY_meth_get_digest_custom":["void","(EVP_PKEY_METHOD *, int (**)(EVP_PKEY_CTX *, EVP_MD_CTX *))"],
"EVP_add_alg_module":["void","()"],
"CMAC_CTX_new":["CMAC_CTX *","()"],
"CMAC_CTX_cleanup":["void","(CMAC_CTX *)"],
"CMAC_CTX_free":["void","(CMAC_CTX *)"],
"CMAC_CTX_get0_cipher_ctx":["EVP_CIPHER_CTX *","(CMAC_CTX *)"],
"CMAC_CTX_copy":["int","(CMAC_CTX *, const CMAC_CTX *)"],
"CMAC_Init":["int","(CMAC_CTX *, const void *, int, const EVP_CIPHER *, ENGINE *)"],
"CMAC_Update":["int","(CMAC_CTX *, const void *, int)"],
"CMAC_Final":["int","(CMAC_CTX *, unsigned char *, int *)"],
"CMAC_resume":["int","(CMAC_CTX *)"],
"ERR_load_EC_strings":["int","()"],
"EC_GFp_simple_method":["const EC_METHOD *","()"],
"EC_GFp_mont_method":["const EC_METHOD *","()"],
"EC_GFp_nist_method":["const EC_METHOD *","()"],
"EC_GFp_nistp224_method":["const EC_METHOD *","()"],
"EC_GFp_nistp256_method":["const EC_METHOD *","()"],
"EC_GFp_nistp521_method":["const EC_METHOD *","()"],
"EC_GF2m_simple_method":["const EC_METHOD *","()"],
"EC_GROUP_new":["EC_GROUP *","(const EC_METHOD *)"],
"EC_GROUP_free":["void","(EC_GROUP *)"],
"EC_GROUP_clear_free":["void","(EC_GROUP *)"],
"EC_GROUP_copy":["int","(EC_GROUP *, const EC_GROUP *)"],
"EC_GROUP_dup":["EC_GROUP *","(const EC_GROUP *)"],
"EC_GROUP_method_of":["const EC_METHOD *","(const EC_GROUP *)"],
"EC_METHOD_get_field_type":["int","(const EC_METHOD *)"],
"EC_GROUP_set_generator":["int","(EC_GROUP *, const EC_POINT *, const BIGNUM *, const BIGNUM *)"],
"EC_GROUP_get0_generator":["const EC_POINT *","(const EC_GROUP *)"],
"EC_GROUP_get_mont_data":["BN_MONT_CTX *","(const EC_GROUP *)"],
"EC_GROUP_get_order":["int","(const EC_GROUP *, BIGNUM *, BN_CTX *)"],
"EC_GROUP_get0_order":["const BIGNUM *","(const EC_GROUP *)"],
"EC_GROUP_order_bits":["int","(const EC_GROUP *)"],
"EC_GROUP_get_cofactor":["int","(const EC_GROUP *, BIGNUM *, BN_CTX *)"],
"EC_GROUP_get0_cofactor":["const BIGNUM *","(const EC_GROUP *)"],
"EC_GROUP_set_curve_name":["void","(EC_GROUP *, int)"],
"EC_GROUP_get_curve_name":["int","(const EC_GROUP *)"],
"EC_GROUP_set_asn1_flag":["void","(EC_GROUP *, int)"],
"EC_GROUP_get_asn1_flag":["int","(const EC_GROUP *)"],
"EC_GROUP_set_point_conversion_form":["void","(EC_GROUP *, point_conversion_form_t)"],
"EC_GROUP_get_point_conversion_form":["point_conversion_form_t","(const EC_GROUP *)"],
"EC_GROUP_get0_seed":["unsigned char *","(const EC_GROUP *)"],
"EC_GROUP_get_seed_len":["int","(const EC_GROUP *)"],
"EC_GROUP_set_seed":["int","(EC_GROUP *, const unsigned char *, int)"],
"EC_GROUP_set_curve":["int","(EC_GROUP *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"EC_GROUP_get_curve":["int","(const EC_GROUP *, BIGNUM *, BIGNUM *, BIGNUM *, BN_CTX *)"],
"EC_GROUP_set_curve_GFp":["int","(EC_GROUP *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"EC_GROUP_get_curve_GFp":["int","(const EC_GROUP *, BIGNUM *, BIGNUM *, BIGNUM *, BN_CTX *)"],
"EC_GROUP_set_curve_GF2m":["int","(EC_GROUP *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"EC_GROUP_get_curve_GF2m":["int","(const EC_GROUP *, BIGNUM *, BIGNUM *, BIGNUM *, BN_CTX *)"],
"EC_GROUP_get_degree":["int","(const EC_GROUP *)"],
"EC_GROUP_check":["int","(const EC_GROUP *, BN_CTX *)"],
"EC_GROUP_check_discriminant":["int","(const EC_GROUP *, BN_CTX *)"],
"EC_GROUP_cmp":["int","(const EC_GROUP *, const EC_GROUP *, BN_CTX *)"],
"EC_GROUP_new_curve_GFp":["EC_GROUP *","(const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"EC_GROUP_new_curve_GF2m":["EC_GROUP *","(const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"EC_GROUP_new_by_curve_name":["EC_GROUP *","(int)"],
"EC_GROUP_new_from_ecparameters":["EC_GROUP *","(const ECPARAMETERS *)"],
"EC_GROUP_get_ecparameters":["ECPARAMETERS *","(const EC_GROUP *, ECPARAMETERS *)"],
"EC_GROUP_new_from_ecpkparameters":["EC_GROUP *","(const ECPKPARAMETERS *)"],
"EC_GROUP_get_ecpkparameters":["ECPKPARAMETERS *","(const EC_GROUP *, ECPKPARAMETERS *)"],
"EC_get_builtin_curves":["int","(EC_builtin_curve *, int)"],
"EC_curve_nid2nist":["const char *","(int)"],
"EC_curve_nist2nid":["int","(const char *)"],
"EC_POINT_new":["EC_POINT *","(const EC_GROUP *)"],
"EC_POINT_free":["void","(EC_POINT *)"],
"EC_POINT_clear_free":["void","(EC_POINT *)"],
"EC_POINT_copy":["int","(EC_POINT *, const EC_POINT *)"],
"EC_POINT_dup":["EC_POINT *","(const EC_POINT *, const EC_GROUP *)"],
"EC_POINT_method_of":["const EC_METHOD *","(const EC_POINT *)"],
"EC_POINT_set_to_infinity":["int","(const EC_GROUP *, EC_POINT *)"],
"EC_POINT_set_Jprojective_coordinates_GFp":["int","(const EC_GROUP *, EC_POINT *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"EC_POINT_get_Jprojective_coordinates_GFp":["int","(const EC_GROUP *, const EC_POINT *, BIGNUM *, BIGNUM *, BIGNUM *, BN_CTX *)"],
"EC_POINT_set_affine_coordinates":["int","(const EC_GROUP *, EC_POINT *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"EC_POINT_get_affine_coordinates":["int","(const EC_GROUP *, const EC_POINT *, BIGNUM *, BIGNUM *, BN_CTX *)"],
"EC_POINT_set_affine_coordinates_GFp":["int","(const EC_GROUP *, EC_POINT *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"EC_POINT_get_affine_coordinates_GFp":["int","(const EC_GROUP *, const EC_POINT *, BIGNUM *, BIGNUM *, BN_CTX *)"],
"EC_POINT_set_compressed_coordinates":["int","(const EC_GROUP *, EC_POINT *, const BIGNUM *, int, BN_CTX *)"],
"EC_POINT_set_compressed_coordinates_GFp":["int","(const EC_GROUP *, EC_POINT *, const BIGNUM *, int, BN_CTX *)"],
"EC_POINT_set_affine_coordinates_GF2m":["int","(const EC_GROUP *, EC_POINT *, const BIGNUM *, const BIGNUM *, BN_CTX *)"],
"EC_POINT_get_affine_coordinates_GF2m":["int","(const EC_GROUP *, const EC_POINT *, BIGNUM *, BIGNUM *, BN_CTX *)"],
"EC_POINT_set_compressed_coordinates_GF2m":["int","(const EC_GROUP *, EC_POINT *, const BIGNUM *, int, BN_CTX *)"],
"EC_POINT_point2oct":["int","(const EC_GROUP *, const EC_POINT *, point_conversion_form_t, unsigned char *, int, BN_CTX *)"],
"EC_POINT_oct2point":["int","(const EC_GROUP *, EC_POINT *, const unsigned char *, int, BN_CTX *)"],
"EC_POINT_point2buf":["int","(const EC_GROUP *, const EC_POINT *, point_conversion_form_t, unsigned char **, BN_CTX *)"],
"EC_POINT_point2bn":["BIGNUM *","(const EC_GROUP *, const EC_POINT *, point_conversion_form_t, BIGNUM *, BN_CTX *)"],
"EC_POINT_bn2point":["EC_POINT *","(const EC_GROUP *, const BIGNUM *, EC_POINT *, BN_CTX *)"],
"EC_POINT_point2hex":["char *","(const EC_GROUP *, const EC_POINT *, point_conversion_form_t, BN_CTX *)"],
"EC_POINT_hex2point":["EC_POINT *","(const EC_GROUP *, const char *, EC_POINT *, BN_CTX *)"],
"EC_POINT_add":["int","(const EC_GROUP *, EC_POINT *, const EC_POINT *, const EC_POINT *, BN_CTX *)"],
"EC_POINT_dbl":["int","(const EC_GROUP *, EC_POINT *, const EC_POINT *, BN_CTX *)"],
"EC_POINT_invert":["int","(const EC_GROUP *, EC_POINT *, BN_CTX *)"],
"EC_POINT_is_at_infinity":["int","(const EC_GROUP *, const EC_POINT *)"],
"EC_POINT_is_on_curve":["int","(const EC_GROUP *, const EC_POINT *, BN_CTX *)"],
"EC_POINT_cmp":["int","(const EC_GROUP *, const EC_POINT *, const EC_POINT *, BN_CTX *)"],
"EC_POINT_make_affine":["int","(const EC_GROUP *, EC_POINT *, BN_CTX *)"],
"EC_POINTs_make_affine":["int","(const EC_GROUP *, int, EC_POINT **, BN_CTX *)"],
"EC_POINTs_mul":["int","(const EC_GROUP *, EC_POINT *, const BIGNUM *, int, const EC_POINT **, const BIGNUM **, BN_CTX *)"],
"EC_POINT_mul":["int","(const EC_GROUP *, EC_POINT *, const BIGNUM *, const EC_POINT *, const BIGNUM *, BN_CTX *)"],
"EC_GROUP_precompute_mult":["int","(EC_GROUP *, BN_CTX *)"],
"EC_GROUP_have_precompute_mult":["int","(const EC_GROUP *)"],
"ECPKPARAMETERS_new":["ECPKPARAMETERS *","()"],
"ECPKPARAMETERS_free":["void","(ECPKPARAMETERS *)"],
"ECPARAMETERS_new":["ECPARAMETERS *","()"],
"ECPARAMETERS_free":["void","(ECPARAMETERS *)"],
"EC_GROUP_get_basis_type":["int","(const EC_GROUP *)"],
"EC_GROUP_get_trinomial_basis":["int","(const EC_GROUP *, unsigned int *)"],
"EC_GROUP_get_pentanomial_basis":["int","(const EC_GROUP *, unsigned int *, unsigned int *, unsigned int *)"],
"d2i_ECPKParameters":["EC_GROUP *","(EC_GROUP **, const unsigned char **, long)"],
"i2d_ECPKParameters":["int","(const EC_GROUP *, unsigned char **)"],
"ECPKParameters_print":["int","(BIO *, const EC_GROUP *, int)"],
"ECPKParameters_print_fp":["int","(int *, const EC_GROUP *, int)"],
"EC_KEY_new":["EC_KEY *","()"],
"EC_KEY_get_flags":["int","(const EC_KEY *)"],
"EC_KEY_set_flags":["void","(EC_KEY *, int)"],
"EC_KEY_clear_flags":["void","(EC_KEY *, int)"],
"EC_KEY_new_by_curve_name":["EC_KEY *","(int)"],
"EC_KEY_free":["void","(EC_KEY *)"],
"EC_KEY_copy":["EC_KEY *","(EC_KEY *, const EC_KEY *)"],
"EC_KEY_dup":["EC_KEY *","(const EC_KEY *)"],
"EC_KEY_up_ref":["int","(EC_KEY *)"],
"EC_KEY_get0_engine":["ENGINE *","(const EC_KEY *)"],
"EC_KEY_get0_group":["const EC_GROUP *","(const EC_KEY *)"],
"EC_KEY_set_group":["int","(EC_KEY *, const EC_GROUP *)"],
"EC_KEY_get0_private_key":["const BIGNUM *","(const EC_KEY *)"],
"EC_KEY_set_private_key":["int","(EC_KEY *, const BIGNUM *)"],
"EC_KEY_get0_public_key":["const EC_POINT *","(const EC_KEY *)"],
"EC_KEY_set_public_key":["int","(EC_KEY *, const EC_POINT *)"],
"EC_KEY_get_enc_flags":["unsigned int","(const EC_KEY *)"],
"EC_KEY_set_enc_flags":["void","(EC_KEY *, unsigned int)"],
"EC_KEY_get_conv_form":["point_conversion_form_t","(const EC_KEY *)"],
"EC_KEY_set_conv_form":["void","(EC_KEY *, point_conversion_form_t)"],
"EC_KEY_set_ex_data":["int","(EC_KEY *, int, void *)"],
"EC_KEY_get_ex_data":["void *","(const EC_KEY *, int)"],
"EC_KEY_set_asn1_flag":["void","(EC_KEY *, int)"],
"EC_KEY_precompute_mult":["int","(EC_KEY *, BN_CTX *)"],
"EC_KEY_generate_key":["int","(EC_KEY *)"],
"EC_KEY_check_key":["int","(const EC_KEY *)"],
"EC_KEY_can_sign":["int","(const EC_KEY *)"],
"EC_KEY_set_public_key_affine_coordinates":["int","(EC_KEY *, BIGNUM *, BIGNUM *)"],
"EC_KEY_key2buf":["int","(const EC_KEY *, point_conversion_form_t, unsigned char **, BN_CTX *)"],
"EC_KEY_oct2key":["int","(EC_KEY *, const unsigned char *, int, BN_CTX *)"],
"EC_KEY_oct2priv":["int","(EC_KEY *, const unsigned char *, int)"],
"EC_KEY_priv2oct":["int","(const EC_KEY *, unsigned char *, int)"],
"EC_KEY_priv2buf":["int","(const EC_KEY *, unsigned char **)"],
"d2i_ECPrivateKey":["EC_KEY *","(EC_KEY **, const unsigned char **, long)"],
"i2d_ECPrivateKey":["int","(EC_KEY *, unsigned char **)"],
"d2i_ECParameters":["EC_KEY *","(EC_KEY **, const unsigned char **, long)"],
"i2d_ECParameters":["int","(EC_KEY *, unsigned char **)"],
"o2i_ECPublicKey":["EC_KEY *","(EC_KEY **, const unsigned char **, long)"],
"i2o_ECPublicKey":["int","(const EC_KEY *, unsigned char **)"],
"ECParameters_print":["int","(BIO *, const EC_KEY *)"],
"EC_KEY_print":["int","(BIO *, const EC_KEY *, int)"],
"ECParameters_print_fp":["int","(int *, const EC_KEY *)"],
"EC_KEY_print_fp":["int","(int *, const EC_KEY *, int)"],
"EC_KEY_OpenSSL":["const EC_KEY_METHOD *","()"],
"EC_KEY_get_default_method":["const EC_KEY_METHOD *","()"],
"EC_KEY_set_default_method":["void","(const EC_KEY_METHOD *)"],
"EC_KEY_get_method":["const EC_KEY_METHOD *","(const EC_KEY *)"],
"EC_KEY_set_method":["int","(EC_KEY *, const EC_KEY_METHOD *)"],
"EC_KEY_new_method":["EC_KEY *","(ENGINE *)"],
"ECDH_KDF_X9_62":["int","(unsigned char *, int, const unsigned char *, int, const unsigned char *, int, const EVP_MD *)"],
"ECDH_compute_key":["int","(void *, int, const EC_POINT *, const EC_KEY *, void *(*)(const void *, int, void *, int *))"],
"ECDSA_SIG_new":["ECDSA_SIG *","()"],
"ECDSA_SIG_free":["void","(ECDSA_SIG *)"],
"i2d_ECDSA_SIG":["int","(const ECDSA_SIG *, unsigned char **)"],
"d2i_ECDSA_SIG":["ECDSA_SIG *","(ECDSA_SIG **, const unsigned char **, long)"],
"ECDSA_SIG_get0":["void","(const ECDSA_SIG *, const BIGNUM **, const BIGNUM **)"],
"ECDSA_SIG_get0_r":["const BIGNUM *","(const ECDSA_SIG *)"],
"ECDSA_SIG_get0_s":["const BIGNUM *","(const ECDSA_SIG *)"],
"ECDSA_SIG_set0":["int","(ECDSA_SIG *, BIGNUM *, BIGNUM *)"],
"ECDSA_do_sign":["ECDSA_SIG *","(const unsigned char *, int, EC_KEY *)"],
"ECDSA_do_sign_ex":["ECDSA_SIG *","(const unsigned char *, int, const BIGNUM *, const BIGNUM *, EC_KEY *)"],
"ECDSA_do_verify":["int","(const unsigned char *, int, const ECDSA_SIG *, EC_KEY *)"],
"ECDSA_sign_setup":["int","(EC_KEY *, BN_CTX *, BIGNUM **, BIGNUM **)"],
"ECDSA_sign":["int","(int, const unsigned char *, int, unsigned char *, unsigned int *, EC_KEY *)"],
"ECDSA_sign_ex":["int","(int, const unsigned char *, int, unsigned char *, unsigned int *, const BIGNUM *, const BIGNUM *, EC_KEY *)"],
"ECDSA_verify":["int","(int, const unsigned char *, int, const unsigned char *, int, EC_KEY *)"],
"ECDSA_size":["int","(const EC_KEY *)"],
"EC_KEY_METHOD_new":["EC_KEY_METHOD *","(const EC_KEY_METHOD *)"],
"EC_KEY_METHOD_free":["void","(EC_KEY_METHOD *)"],
"EC_KEY_METHOD_set_init":["void","(EC_KEY_METHOD *, int (*)(EC_KEY *), void (*)(EC_KEY *), int (*)(EC_KEY *, const EC_KEY *), int (*)(EC_KEY *, const EC_GROUP *), int (*)(EC_KEY *, const BIGNUM *), int (*)(EC_KEY *, const EC_POINT *))"],
"EC_KEY_METHOD_set_keygen":["void","(EC_KEY_METHOD *, int (*)(EC_KEY *))"],
"EC_KEY_METHOD_set_compute_key":["void","(EC_KEY_METHOD *, int (*)(unsigned char **, int *, const EC_POINT *, const EC_KEY *))"],
"EC_KEY_METHOD_set_sign":["void","(EC_KEY_METHOD *, int (*)(int, const unsigned char *, int, unsigned char *, unsigned int *, const BIGNUM *, const BIGNUM *, EC_KEY *), int (*)(EC_KEY *, BN_CTX *, BIGNUM **, BIGNUM **), ECDSA_SIG *(*)(const unsigned char *, int, const BIGNUM *, const BIGNUM *, EC_KEY *))"],
"EC_KEY_METHOD_set_verify":["void","(EC_KEY_METHOD *, int (*)(int, const unsigned char *, int, const unsigned char *, int, EC_KEY *), int (*)(const unsigned char *, int, const ECDSA_SIG *, EC_KEY *))"],
"EC_KEY_METHOD_get_init":["void","(const EC_KEY_METHOD *, int (**)(EC_KEY *), void (**)(EC_KEY *), int (**)(EC_KEY *, const EC_KEY *), int (**)(EC_KEY *, const EC_GROUP *), int (**)(EC_KEY *, const BIGNUM *), int (**)(EC_KEY *, const EC_POINT *))"],
"EC_KEY_METHOD_get_keygen":["void","(const EC_KEY_METHOD *, int (**)(EC_KEY *))"],
"EC_KEY_METHOD_get_compute_key":["void","(const EC_KEY_METHOD *, int (**)(unsigned char **, int *, const EC_POINT *, const EC_KEY *))"],
"EC_KEY_METHOD_get_sign":["void","(const EC_KEY_METHOD *, int (**)(int, const unsigned char *, int, unsigned char *, unsigned int *, const BIGNUM *, const BIGNUM *, EC_KEY *), int (**)(EC_KEY *, BN_CTX *, BIGNUM **, BIGNUM **), ECDSA_SIG *(**)(const unsigned char *, int, const BIGNUM *, const BIGNUM *, EC_KEY *))"],
"EC_KEY_METHOD_get_verify":["void","(const EC_KEY_METHOD *, int (**)(int, const unsigned char *, int, const unsigned char *, int, EC_KEY *), int (**)(const unsigned char *, int, const ECDSA_SIG *, EC_KEY *))"],
"ERR_load_RSA_strings":["int","()"],
"RSA_new":["RSA *","()"],
"RSA_new_method":["RSA *","(ENGINE *)"],
"RSA_bits":["int","(const RSA *)"],
"RSA_size":["int","(const RSA *)"],
"RSA_security_bits":["int","(const RSA *)"],
"RSA_set0_key":["int","(RSA *, BIGNUM *, BIGNUM *, BIGNUM *)"],
"RSA_set0_factors":["int","(RSA *, BIGNUM *, BIGNUM *)"],
"RSA_set0_crt_params":["int","(RSA *, BIGNUM *, BIGNUM *, BIGNUM *)"],
"RSA_set0_multi_prime_params":["int","(RSA *, BIGNUM **, BIGNUM **, BIGNUM **, int)"],
"RSA_get0_key":["void","(const RSA *, const BIGNUM **, const BIGNUM **, const BIGNUM **)"],
"RSA_get0_factors":["void","(const RSA *, const BIGNUM **, const BIGNUM **)"],
"RSA_get_multi_prime_extra_count":["int","(const RSA *)"],
"RSA_get0_multi_prime_factors":["int","(const RSA *, const BIGNUM **)"],
"RSA_get0_crt_params":["void","(const RSA *, const BIGNUM **, const BIGNUM **, const BIGNUM **)"],
"RSA_get0_multi_prime_crt_params":["int","(const RSA *, const BIGNUM **, const BIGNUM **)"],
"RSA_get0_n":["const BIGNUM *","(const RSA *)"],
"RSA_get0_e":["const BIGNUM *","(const RSA *)"],
"RSA_get0_d":["const BIGNUM *","(const RSA *)"],
"RSA_get0_p":["const BIGNUM *","(const RSA *)"],
"RSA_get0_q":["const BIGNUM *","(const RSA *)"],
"RSA_get0_dmp1":["const BIGNUM *","(const RSA *)"],
"RSA_get0_dmq1":["const BIGNUM *","(const RSA *)"],
"RSA_get0_iqmp":["const BIGNUM *","(const RSA *)"],
"RSA_get0_pss_params":["const RSA_PSS_PARAMS *","(const RSA *)"],
"RSA_clear_flags":["void","(RSA *, int)"],
"RSA_test_flags":["int","(const RSA *, int)"],
"RSA_set_flags":["void","(RSA *, int)"],
"RSA_get_version":["int","(RSA *)"],
"RSA_get0_engine":["ENGINE *","(const RSA *)"],
"RSA_generate_key":["RSA *","(int, unsigned long, void (*)(int, int, void *), void *)"],
"RSA_generate_key_ex":["int","(RSA *, int, BIGNUM *, BN_GENCB *)"],
"RSA_generate_multi_prime_key":["int","(RSA *, int, int, BIGNUM *, BN_GENCB *)"],
"RSA_X931_derive_ex":["int","(RSA *, BIGNUM *, BIGNUM *, BIGNUM *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_GENCB *)"],
"RSA_X931_generate_key_ex":["int","(RSA *, int, const BIGNUM *, BN_GENCB *)"],
"RSA_check_key":["int","(const RSA *)"],
"RSA_check_key_ex":["int","(const RSA *, BN_GENCB *)"],
"RSA_public_encrypt":["int","(int, const unsigned char *, unsigned char *, RSA *, int)"],
"RSA_private_encrypt":["int","(int, const unsigned char *, unsigned char *, RSA *, int)"],
"RSA_public_decrypt":["int","(int, const unsigned char *, unsigned char *, RSA *, int)"],
"RSA_private_decrypt":["int","(int, const unsigned char *, unsigned char *, RSA *, int)"],
"RSA_free":["void","(RSA *)"],
"RSA_up_ref":["int","(RSA *)"],
"RSA_flags":["int","(const RSA *)"],
"RSA_set_default_method":["void","(const RSA_METHOD *)"],
"RSA_get_default_method":["const RSA_METHOD *","()"],
"RSA_null_method":["const RSA_METHOD *","()"],
"RSA_get_method":["const RSA_METHOD *","(const RSA *)"],
"RSA_set_method":["int","(RSA *, const RSA_METHOD *)"],
"RSA_PKCS1_OpenSSL":["const RSA_METHOD *","()"],
"RSA_pkey_ctx_ctrl":["int","(EVP_PKEY_CTX *, int, int, int, void *)"],
"d2i_RSAPublicKey":["RSA *","(RSA **, const unsigned char **, long)"],
"i2d_RSAPublicKey":["int","(const RSA *, unsigned char **)"],
"d2i_RSAPrivateKey":["RSA *","(RSA **, const unsigned char **, long)"],
"i2d_RSAPrivateKey":["int","(const RSA *, unsigned char **)"],
"RSA_PSS_PARAMS_new":["RSA_PSS_PARAMS *","()"],
"RSA_PSS_PARAMS_free":["void","(RSA_PSS_PARAMS *)"],
"d2i_RSA_PSS_PARAMS":["RSA_PSS_PARAMS *","(RSA_PSS_PARAMS **, const unsigned char **, long)"],
"i2d_RSA_PSS_PARAMS":["int","(RSA_PSS_PARAMS *, unsigned char **)"],
"RSA_OAEP_PARAMS_new":["RSA_OAEP_PARAMS *","()"],
"RSA_OAEP_PARAMS_free":["void","(RSA_OAEP_PARAMS *)"],
"d2i_RSA_OAEP_PARAMS":["RSA_OAEP_PARAMS *","(RSA_OAEP_PARAMS **, const unsigned char **, long)"],
"i2d_RSA_OAEP_PARAMS":["int","(RSA_OAEP_PARAMS *, unsigned char **)"],
"RSA_print_fp":["int","(int *, const RSA *, int)"],
"RSA_print":["int","(BIO *, const RSA *, int)"],
"RSA_sign":["int","(int, const unsigned char *, unsigned int, unsigned char *, unsigned int *, RSA *)"],
"RSA_verify":["int","(int, const unsigned char *, unsigned int, const unsigned char *, unsigned int, RSA *)"],
"RSA_sign_ASN1_OCTET_STRING":["int","(int, const unsigned char *, unsigned int, unsigned char *, unsigned int *, RSA *)"],
"RSA_verify_ASN1_OCTET_STRING":["int","(int, const unsigned char *, unsigned int, unsigned char *, unsigned int, RSA *)"],
"RSA_blinding_on":["int","(RSA *, BN_CTX *)"],
"RSA_blinding_off":["void","(RSA *)"],
"RSA_setup_blinding":["BN_BLINDING *","(RSA *, BN_CTX *)"],
"RSA_padding_add_PKCS1_type_1":["int","(unsigned char *, int, const unsigned char *, int)"],
"RSA_padding_check_PKCS1_type_1":["int","(unsigned char *, int, const unsigned char *, int, int)"],
"RSA_padding_add_PKCS1_type_2":["int","(unsigned char *, int, const unsigned char *, int)"],
"RSA_padding_check_PKCS1_type_2":["int","(unsigned char *, int, const unsigned char *, int, int)"],
"PKCS1_MGF1":["int","(unsigned char *, long, const unsigned char *, long, const EVP_MD *)"],
"RSA_padding_add_PKCS1_OAEP":["int","(unsigned char *, int, const unsigned char *, int, const unsigned char *, int)"],
"RSA_padding_check_PKCS1_OAEP":["int","(unsigned char *, int, const unsigned char *, int, int, const unsigned char *, int)"],
"RSA_padding_add_PKCS1_OAEP_mgf1":["int","(unsigned char *, int, const unsigned char *, int, const unsigned char *, int, const EVP_MD *, const EVP_MD *)"],
"RSA_padding_check_PKCS1_OAEP_mgf1":["int","(unsigned char *, int, const unsigned char *, int, int, const unsigned char *, int, const EVP_MD *, const EVP_MD *)"],
"RSA_padding_add_SSLv23":["int","(unsigned char *, int, const unsigned char *, int)"],
"RSA_padding_check_SSLv23":["int","(unsigned char *, int, const unsigned char *, int, int)"],
"RSA_padding_add_none":["int","(unsigned char *, int, const unsigned char *, int)"],
"RSA_padding_check_none":["int","(unsigned char *, int, const unsigned char *, int, int)"],
"RSA_padding_add_X931":["int","(unsigned char *, int, const unsigned char *, int)"],
"RSA_padding_check_X931":["int","(unsigned char *, int, const unsigned char *, int, int)"],
"RSA_X931_hash_id":["int","(int)"],
"RSA_verify_PKCS1_PSS":["int","(RSA *, const unsigned char *, const EVP_MD *, const unsigned char *, int)"],
"RSA_padding_add_PKCS1_PSS":["int","(RSA *, unsigned char *, const unsigned char *, const EVP_MD *, int)"],
"RSA_verify_PKCS1_PSS_mgf1":["int","(RSA *, const unsigned char *, const EVP_MD *, const EVP_MD *, const unsigned char *, int)"],
"RSA_padding_add_PKCS1_PSS_mgf1":["int","(RSA *, unsigned char *, const unsigned char *, const EVP_MD *, const EVP_MD *, int)"],
"RSA_set_ex_data":["int","(RSA *, int, void *)"],
"RSA_get_ex_data":["void *","(const RSA *, int)"],
"RSAPublicKey_dup":["RSA *","(RSA *)"],
"RSAPrivateKey_dup":["RSA *","(RSA *)"],
"RSA_meth_new":["RSA_METHOD *","(const char *, int)"],
"RSA_meth_free":["void","(RSA_METHOD *)"],
"RSA_meth_dup":["RSA_METHOD *","(const RSA_METHOD *)"],
"RSA_meth_get0_name":["const char *","(const RSA_METHOD *)"],
"RSA_meth_set1_name":["int","(RSA_METHOD *, const char *)"],
"RSA_meth_get_flags":["int","(const RSA_METHOD *)"],
"RSA_meth_set_flags":["int","(RSA_METHOD *, int)"],
"RSA_meth_get0_app_data":["void *","(const RSA_METHOD *)"],
"RSA_meth_set0_app_data":["int","(RSA_METHOD *, void *)"],
"RSA_meth_get_pub_enc":["int (*)(int, const unsigned char *, unsigned char *, RSA *, int)","(const RSA_METHOD *)"],
"RSA_meth_set_pub_enc":["int","(RSA_METHOD *, int (*)(int, const unsigned char *, unsigned char *, RSA *, int))"],
"RSA_meth_get_pub_dec":["int (*)(int, const unsigned char *, unsigned char *, RSA *, int)","(const RSA_METHOD *)"],
"RSA_meth_set_pub_dec":["int","(RSA_METHOD *, int (*)(int, const unsigned char *, unsigned char *, RSA *, int))"],
"RSA_meth_get_priv_enc":["int (*)(int, const unsigned char *, unsigned char *, RSA *, int)","(const RSA_METHOD *)"],
"RSA_meth_set_priv_enc":["int","(RSA_METHOD *, int (*)(int, const unsigned char *, unsigned char *, RSA *, int))"],
"RSA_meth_get_priv_dec":["int (*)(int, const unsigned char *, unsigned char *, RSA *, int)","(const RSA_METHOD *)"],
"RSA_meth_set_priv_dec":["int","(RSA_METHOD *, int (*)(int, const unsigned char *, unsigned char *, RSA *, int))"],
"RSA_meth_get_mod_exp":["int (*)(BIGNUM *, const BIGNUM *, RSA *, BN_CTX *)","(const RSA_METHOD *)"],
"RSA_meth_set_mod_exp":["int","(RSA_METHOD *, int (*)(BIGNUM *, const BIGNUM *, RSA *, BN_CTX *))"],
"RSA_meth_get_bn_mod_exp":["int (*)(BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *)","(const RSA_METHOD *)"],
"RSA_meth_set_bn_mod_exp":["int","(RSA_METHOD *, int (*)(BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *))"],
"RSA_meth_get_init":["int (*)(RSA *)","(const RSA_METHOD *)"],
"RSA_meth_set_init":["int","(RSA_METHOD *, int (*)(RSA *))"],
"RSA_meth_get_finish":["int (*)(RSA *)","(const RSA_METHOD *)"],
"RSA_meth_set_finish":["int","(RSA_METHOD *, int (*)(RSA *))"],
"RSA_meth_get_sign":["int (*)(int, const unsigned char *, unsigned int, unsigned char *, unsigned int *, const RSA *)","(const RSA_METHOD *)"],
"RSA_meth_set_sign":["int","(RSA_METHOD *, int (*)(int, const unsigned char *, unsigned int, unsigned char *, unsigned int *, const RSA *))"],
"RSA_meth_get_verify":["int (*)(int, const unsigned char *, unsigned int, const unsigned char *, unsigned int, const RSA *)","(const RSA_METHOD *)"],
"RSA_meth_set_verify":["int","(RSA_METHOD *, int (*)(int, const unsigned char *, unsigned int, const unsigned char *, unsigned int, const RSA *))"],
"RSA_meth_get_keygen":["int (*)(RSA *, int, BIGNUM *, BN_GENCB *)","(const RSA_METHOD *)"],
"RSA_meth_set_keygen":["int","(RSA_METHOD *, int (*)(RSA *, int, BIGNUM *, BN_GENCB *))"],
"RSA_meth_get_multi_prime_keygen":["int (*)(RSA *, int, int, BIGNUM *, BN_GENCB *)","(const RSA_METHOD *)"],
"RSA_meth_set_multi_prime_keygen":["int","(RSA_METHOD *, int (*)(RSA *, int, int, BIGNUM *, BN_GENCB *))"],
"ERR_load_DH_strings":["int","()"],
"DHparams_dup":["DH *","(DH *)"],
"DH_OpenSSL":["const DH_METHOD *","()"],
"DH_set_default_method":["void","(const DH_METHOD *)"],
"DH_get_default_method":["const DH_METHOD *","()"],
"DH_set_method":["int","(DH *, const DH_METHOD *)"],
"DH_new_method":["DH *","(ENGINE *)"],
"DH_new":["DH *","()"],
"DH_free":["void","(DH *)"],
"DH_up_ref":["int","(DH *)"],
"DH_bits":["int","(const DH *)"],
"DH_size":["int","(const DH *)"],
"DH_security_bits":["int","(const DH *)"],
"DH_set_ex_data":["int","(DH *, int, void *)"],
"DH_get_ex_data":["void *","(DH *, int)"],
"DH_generate_parameters":["DH *","(int, int, void (*)(int, int, void *), void *)"],
"DH_generate_parameters_ex":["int","(DH *, int, int, BN_GENCB *)"],
"DH_check_params_ex":["int","(const DH *)"],
"DH_check_ex":["int","(const DH *)"],
"DH_check_pub_key_ex":["int","(const DH *, const BIGNUM *)"],
"DH_check_params":["int","(const DH *, int *)"],
"DH_check":["int","(const DH *, int *)"],
"DH_check_pub_key":["int","(const DH *, const BIGNUM *, int *)"],
"DH_generate_key":["int","(DH *)"],
"DH_compute_key":["int","(unsigned char *, const BIGNUM *, DH *)"],
"DH_compute_key_padded":["int","(unsigned char *, const BIGNUM *, DH *)"],
"d2i_DHparams":["DH *","(DH **, const unsigned char **, long)"],
"i2d_DHparams":["int","(const DH *, unsigned char **)"],
"d2i_DHxparams":["DH *","(DH **, const unsigned char **, long)"],
"i2d_DHxparams":["int","(const DH *, unsigned char **)"],
"DHparams_print_fp":["int","(int *, const DH *)"],
"DHparams_print":["int","(BIO *, const DH *)"],
"DH_get_1024_160":["DH *","()"],
"DH_get_2048_224":["DH *","()"],
"DH_get_2048_256":["DH *","()"],
"DH_new_by_nid":["DH *","(int)"],
"DH_get_nid":["int","(const DH *)"],
"DH_KDF_X9_42":["int","(unsigned char *, int, const unsigned char *, int, ASN1_OBJECT *, const unsigned char *, int, const EVP_MD *)"],
"DH_get0_pqg":["void","(const DH *, const BIGNUM **, const BIGNUM **, const BIGNUM **)"],
"DH_set0_pqg":["int","(DH *, BIGNUM *, BIGNUM *, BIGNUM *)"],
"DH_get0_key":["void","(const DH *, const BIGNUM **, const BIGNUM **)"],
"DH_set0_key":["int","(DH *, BIGNUM *, BIGNUM *)"],
"DH_get0_p":["const BIGNUM *","(const DH *)"],
"DH_get0_q":["const BIGNUM *","(const DH *)"],
"DH_get0_g":["const BIGNUM *","(const DH *)"],
"DH_get0_priv_key":["const BIGNUM *","(const DH *)"],
"DH_get0_pub_key":["const BIGNUM *","(const DH *)"],
"DH_clear_flags":["void","(DH *, int)"],
"DH_test_flags":["int","(const DH *, int)"],
"DH_set_flags":["void","(DH *, int)"],
"DH_get0_engine":["ENGINE *","(DH *)"],
"DH_get_length":["long","(const DH *)"],
"DH_set_length":["int","(DH *, long)"],
"DH_meth_new":["DH_METHOD *","(const char *, int)"],
"DH_meth_free":["void","(DH_METHOD *)"],
"DH_meth_dup":["DH_METHOD *","(const DH_METHOD *)"],
"DH_meth_get0_name":["const char *","(const DH_METHOD *)"],
"DH_meth_set1_name":["int","(DH_METHOD *, const char *)"],
"DH_meth_get_flags":["int","(const DH_METHOD *)"],
"DH_meth_set_flags":["int","(DH_METHOD *, int)"],
"DH_meth_get0_app_data":["void *","(const DH_METHOD *)"],
"DH_meth_set0_app_data":["int","(DH_METHOD *, void *)"],
"DH_meth_get_generate_key":["int (*)(DH *)","(const DH_METHOD *)"],
"DH_meth_set_generate_key":["int","(DH_METHOD *, int (*)(DH *))"],
"DH_meth_get_compute_key":["int (*)(unsigned char *, const BIGNUM *, DH *)","(const DH_METHOD *)"],
"DH_meth_set_compute_key":["int","(DH_METHOD *, int (*)(unsigned char *, const BIGNUM *, DH *))"],
"DH_meth_get_bn_mod_exp":["int (*)(const DH *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *)","(const DH_METHOD *)"],
"DH_meth_set_bn_mod_exp":["int","(DH_METHOD *, int (*)(const DH *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *))"],
"DH_meth_get_init":["int (*)(DH *)","(const DH_METHOD *)"],
"DH_meth_set_init":["int","(DH_METHOD *, int (*)(DH *))"],
"DH_meth_get_finish":["int (*)(DH *)","(const DH_METHOD *)"],
"DH_meth_set_finish":["int","(DH_METHOD *, int (*)(DH *))"],
"DH_meth_get_generate_params":["int (*)(DH *, int, int, BN_GENCB *)","(const DH_METHOD *)"],
"DH_meth_set_generate_params":["int","(DH_METHOD *, int (*)(DH *, int, int, BN_GENCB *))"],
"ERR_load_DSA_strings":["int","()"],
"DSAparams_dup":["DSA *","(DSA *)"],
"DSA_SIG_new":["DSA_SIG *","()"],
"DSA_SIG_free":["void","(DSA_SIG *)"],
"i2d_DSA_SIG":["int","(const DSA_SIG *, unsigned char **)"],
"d2i_DSA_SIG":["DSA_SIG *","(DSA_SIG **, const unsigned char **, long)"],
"DSA_SIG_get0":["void","(const DSA_SIG *, const BIGNUM **, const BIGNUM **)"],
"DSA_SIG_set0":["int","(DSA_SIG *, BIGNUM *, BIGNUM *)"],
"DSA_do_sign":["DSA_SIG *","(const unsigned char *, int, DSA *)"],
"DSA_do_verify":["int","(const unsigned char *, int, DSA_SIG *, DSA *)"],
"DSA_OpenSSL":["const DSA_METHOD *","()"],
"DSA_set_default_method":["void","(const DSA_METHOD *)"],
"DSA_get_default_method":["const DSA_METHOD *","()"],
"DSA_set_method":["int","(DSA *, const DSA_METHOD *)"],
"DSA_get_method":["const DSA_METHOD *","(DSA *)"],
"DSA_new":["DSA *","()"],
"DSA_new_method":["DSA *","(ENGINE *)"],
"DSA_free":["void","(DSA *)"],
"DSA_up_ref":["int","(DSA *)"],
"DSA_size":["int","(const DSA *)"],
"DSA_bits":["int","(const DSA *)"],
"DSA_security_bits":["int","(const DSA *)"],
"DSA_sign_setup":["int","(DSA *, BN_CTX *, BIGNUM **, BIGNUM **)"],
"DSA_sign":["int","(int, const unsigned char *, int, unsigned char *, unsigned int *, DSA *)"],
"DSA_verify":["int","(int, const unsigned char *, int, const unsigned char *, int, DSA *)"],
"DSA_set_ex_data":["int","(DSA *, int, void *)"],
"DSA_get_ex_data":["void *","(DSA *, int)"],
"d2i_DSAPublicKey":["DSA *","(DSA **, const unsigned char **, long)"],
"d2i_DSAPrivateKey":["DSA *","(DSA **, const unsigned char **, long)"],
"d2i_DSAparams":["DSA *","(DSA **, const unsigned char **, long)"],
"DSA_generate_parameters":["DSA *","(int, unsigned char *, int, int *, unsigned long *, void (*)(int, int, void *), void *)"],
"DSA_generate_parameters_ex":["int","(DSA *, int, const unsigned char *, int, int *, unsigned long *, BN_GENCB *)"],
"DSA_generate_key":["int","(DSA *)"],
"i2d_DSAPublicKey":["int","(const DSA *, unsigned char **)"],
"i2d_DSAPrivateKey":["int","(const DSA *, unsigned char **)"],
"i2d_DSAparams":["int","(const DSA *, unsigned char **)"],
"DSAparams_print":["int","(BIO *, const DSA *)"],
"DSA_print":["int","(BIO *, const DSA *, int)"],
"DSAparams_print_fp":["int","(int *, const DSA *)"],
"DSA_print_fp":["int","(int *, const DSA *, int)"],
"DSA_dup_DH":["DH *","(const DSA *)"],
"DSA_get0_pqg":["void","(const DSA *, const BIGNUM **, const BIGNUM **, const BIGNUM **)"],
"DSA_set0_pqg":["int","(DSA *, BIGNUM *, BIGNUM *, BIGNUM *)"],
"DSA_get0_key":["void","(const DSA *, const BIGNUM **, const BIGNUM **)"],
"DSA_set0_key":["int","(DSA *, BIGNUM *, BIGNUM *)"],
"DSA_get0_p":["const BIGNUM *","(const DSA *)"],
"DSA_get0_q":["const BIGNUM *","(const DSA *)"],
"DSA_get0_g":["const BIGNUM *","(const DSA *)"],
"DSA_get0_pub_key":["const BIGNUM *","(const DSA *)"],
"DSA_get0_priv_key":["const BIGNUM *","(const DSA *)"],
"DSA_clear_flags":["void","(DSA *, int)"],
"DSA_test_flags":["int","(const DSA *, int)"],
"DSA_set_flags":["void","(DSA *, int)"],
"DSA_get0_engine":["ENGINE *","(DSA *)"],
"DSA_meth_new":["DSA_METHOD *","(const char *, int)"],
"DSA_meth_free":["void","(DSA_METHOD *)"],
"DSA_meth_dup":["DSA_METHOD *","(const DSA_METHOD *)"],
"DSA_meth_get0_name":["const char *","(const DSA_METHOD *)"],
"DSA_meth_set1_name":["int","(DSA_METHOD *, const char *)"],
"DSA_meth_get_flags":["int","(const DSA_METHOD *)"],
"DSA_meth_set_flags":["int","(DSA_METHOD *, int)"],
"DSA_meth_get0_app_data":["void *","(const DSA_METHOD *)"],
"DSA_meth_set0_app_data":["int","(DSA_METHOD *, void *)"],
"DSA_meth_get_sign":["DSA_SIG *(*)(const unsigned char *, int, DSA *)","(const DSA_METHOD *)"],
"DSA_meth_set_sign":["int","(DSA_METHOD *, DSA_SIG *(*)(const unsigned char *, int, DSA *))"],
"DSA_meth_get_sign_setup":["int (*)(DSA *, BN_CTX *, BIGNUM **, BIGNUM **)","(const DSA_METHOD *)"],
"DSA_meth_set_sign_setup":["int","(DSA_METHOD *, int (*)(DSA *, BN_CTX *, BIGNUM **, BIGNUM **))"],
"DSA_meth_get_verify":["int (*)(const unsigned char *, int, DSA_SIG *, DSA *)","(const DSA_METHOD *)"],
"DSA_meth_set_verify":["int","(DSA_METHOD *, int (*)(const unsigned char *, int, DSA_SIG *, DSA *))"],
"DSA_meth_get_mod_exp":["int (*)(DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *)","(const DSA_METHOD *)"],
"DSA_meth_set_mod_exp":["int","(DSA_METHOD *, int (*)(DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *))"],
"DSA_meth_get_bn_mod_exp":["int (*)(DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *)","(const DSA_METHOD *)"],
"DSA_meth_set_bn_mod_exp":["int","(DSA_METHOD *, int (*)(DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *))"],
"DSA_meth_get_init":["int (*)(DSA *)","(const DSA_METHOD *)"],
"DSA_meth_set_init":["int","(DSA_METHOD *, int (*)(DSA *))"],
"DSA_meth_get_finish":["int (*)(DSA *)","(const DSA_METHOD *)"],
"DSA_meth_set_finish":["int","(DSA_METHOD *, int (*)(DSA *))"],
"DSA_meth_get_paramgen":["int (*)(DSA *, int, const unsigned char *, int, int *, unsigned long *, BN_GENCB *)","(const DSA_METHOD *)"],
"DSA_meth_set_paramgen":["int","(DSA_METHOD *, int (*)(DSA *, int, const unsigned char *, int, int *, unsigned long *, BN_GENCB *))"],
"DSA_meth_get_keygen":["int (*)(DSA *)","(const DSA_METHOD *)"],
"DSA_meth_set_keygen":["int","(DSA_METHOD *, int (*)(DSA *))"],
"SHA1_Init":["int","(SHA_CTX *)"],
"SHA1_Update":["int","(SHA_CTX *, const void *, int)"],
"SHA1_Final":["int","(unsigned char *, SHA_CTX *)"],
"SHA1":["unsigned char *","(const unsigned char *, int, unsigned char *)"],
"SHA1_Transform":["void","(SHA_CTX *, const unsigned char *)"],
"SHA224_Init":["int","(SHA256_CTX *)"],
"SHA224_Update":["int","(SHA256_CTX *, const void *, int)"],
"SHA224_Final":["int","(unsigned char *, SHA256_CTX *)"],
"SHA224":["unsigned char *","(const unsigned char *, int, unsigned char *)"],
"SHA256_Init":["int","(SHA256_CTX *)"],
"SHA256_Update":["int","(SHA256_CTX *, const void *, int)"],
"SHA256_Final":["int","(unsigned char *, SHA256_CTX *)"],
"SHA256":["unsigned char *","(const unsigned char *, int, unsigned char *)"],
"SHA256_Transform":["void","(SHA256_CTX *, const unsigned char *)"],
"SHA384_Init":["int","(SHA512_CTX *)"],
"SHA384_Update":["int","(SHA512_CTX *, const void *, int)"],
"SHA384_Final":["int","(unsigned char *, SHA512_CTX *)"],
"SHA384":["unsigned char *","(const unsigned char *, int, unsigned char *)"],
"SHA512_Init":["int","(SHA512_CTX *)"],
"SHA512_Update":["int","(SHA512_CTX *, const void *, int)"],
"SHA512_Final":["int","(unsigned char *, SHA512_CTX *)"],
"SHA512":["unsigned char *","(const unsigned char *, int, unsigned char *)"],
"SHA512_Transform":["void","(SHA512_CTX *, const unsigned char *)"],
"ERR_load_X509_strings":["int","()"],
"sk_X509_NAME_ENTRY_num":["int","(const struct stack_st_X509_NAME_ENTRY *)"],
"sk_X509_NAME_ENTRY_value":["X509_NAME_ENTRY *","(const struct stack_st_X509_NAME_ENTRY *, int)"],
"sk_X509_NAME_ENTRY_new":["struct stack_st_X509_NAME_ENTRY *","(sk_X509_NAME_ENTRY_compfunc)"],
"sk_X509_NAME_ENTRY_new_null":["struct stack_st_X509_NAME_ENTRY *","()"],
"sk_X509_NAME_ENTRY_new_reserve":["struct stack_st_X509_NAME_ENTRY *","(sk_X509_NAME_ENTRY_compfunc, int)"],
"sk_X509_NAME_ENTRY_reserve":["int","(struct stack_st_X509_NAME_ENTRY *, int)"],
"sk_X509_NAME_ENTRY_free":["void","(struct stack_st_X509_NAME_ENTRY *)"],
"sk_X509_NAME_ENTRY_zero":["void","(struct stack_st_X509_NAME_ENTRY *)"],
"sk_X509_NAME_ENTRY_delete":["X509_NAME_ENTRY *","(struct stack_st_X509_NAME_ENTRY *, int)"],
"sk_X509_NAME_ENTRY_delete_ptr":["X509_NAME_ENTRY *","(struct stack_st_X509_NAME_ENTRY *, X509_NAME_ENTRY *)"],
"sk_X509_NAME_ENTRY_push":["int","(struct stack_st_X509_NAME_ENTRY *, X509_NAME_ENTRY *)"],
"sk_X509_NAME_ENTRY_unshift":["int","(struct stack_st_X509_NAME_ENTRY *, X509_NAME_ENTRY *)"],
"sk_X509_NAME_ENTRY_pop":["X509_NAME_ENTRY *","(struct stack_st_X509_NAME_ENTRY *)"],
"sk_X509_NAME_ENTRY_shift":["X509_NAME_ENTRY *","(struct stack_st_X509_NAME_ENTRY *)"],
"sk_X509_NAME_ENTRY_pop_free":["void","(struct stack_st_X509_NAME_ENTRY *, sk_X509_NAME_ENTRY_freefunc)"],
"sk_X509_NAME_ENTRY_insert":["int","(struct stack_st_X509_NAME_ENTRY *, X509_NAME_ENTRY *, int)"],
"sk_X509_NAME_ENTRY_set":["X509_NAME_ENTRY *","(struct stack_st_X509_NAME_ENTRY *, int, X509_NAME_ENTRY *)"],
"sk_X509_NAME_ENTRY_find":["int","(struct stack_st_X509_NAME_ENTRY *, X509_NAME_ENTRY *)"],
"sk_X509_NAME_ENTRY_find_ex":["int","(struct stack_st_X509_NAME_ENTRY *, X509_NAME_ENTRY *)"],
"sk_X509_NAME_ENTRY_sort":["void","(struct stack_st_X509_NAME_ENTRY *)"],
"sk_X509_NAME_ENTRY_is_sorted":["int","(const struct stack_st_X509_NAME_ENTRY *)"],
"sk_X509_NAME_ENTRY_dup":["struct stack_st_X509_NAME_ENTRY *","(const struct stack_st_X509_NAME_ENTRY *)"],
"sk_X509_NAME_ENTRY_deep_copy":["struct stack_st_X509_NAME_ENTRY *","(const struct stack_st_X509_NAME_ENTRY *, sk_X509_NAME_ENTRY_copyfunc, sk_X509_NAME_ENTRY_freefunc)"],
"sk_X509_NAME_ENTRY_set_cmp_func":["sk_X509_NAME_ENTRY_compfunc","(struct stack_st_X509_NAME_ENTRY *, sk_X509_NAME_ENTRY_compfunc)"],
"sk_X509_NAME_num":["int","(const struct stack_st_X509_NAME *)"],
"sk_X509_NAME_value":["X509_NAME *","(const struct stack_st_X509_NAME *, int)"],
"sk_X509_NAME_new":["struct stack_st_X509_NAME *","(sk_X509_NAME_compfunc)"],
"sk_X509_NAME_new_null":["struct stack_st_X509_NAME *","()"],
"sk_X509_NAME_new_reserve":["struct stack_st_X509_NAME *","(sk_X509_NAME_compfunc, int)"],
"sk_X509_NAME_reserve":["int","(struct stack_st_X509_NAME *, int)"],
"sk_X509_NAME_free":["void","(struct stack_st_X509_NAME *)"],
"sk_X509_NAME_zero":["void","(struct stack_st_X509_NAME *)"],
"sk_X509_NAME_delete":["X509_NAME *","(struct stack_st_X509_NAME *, int)"],
"sk_X509_NAME_delete_ptr":["X509_NAME *","(struct stack_st_X509_NAME *, X509_NAME *)"],
"sk_X509_NAME_push":["int","(struct stack_st_X509_NAME *, X509_NAME *)"],
"sk_X509_NAME_unshift":["int","(struct stack_st_X509_NAME *, X509_NAME *)"],
"sk_X509_NAME_pop":["X509_NAME *","(struct stack_st_X509_NAME *)"],
"sk_X509_NAME_shift":["X509_NAME *","(struct stack_st_X509_NAME *)"],
"sk_X509_NAME_pop_free":["void","(struct stack_st_X509_NAME *, sk_X509_NAME_freefunc)"],
"sk_X509_NAME_insert":["int","(struct stack_st_X509_NAME *, X509_NAME *, int)"],
"sk_X509_NAME_set":["X509_NAME *","(struct stack_st_X509_NAME *, int, X509_NAME *)"],
"sk_X509_NAME_find":["int","(struct stack_st_X509_NAME *, X509_NAME *)"],
"sk_X509_NAME_find_ex":["int","(struct stack_st_X509_NAME *, X509_NAME *)"],
"sk_X509_NAME_sort":["void","(struct stack_st_X509_NAME *)"],
"sk_X509_NAME_is_sorted":["int","(const struct stack_st_X509_NAME *)"],
"sk_X509_NAME_dup":["struct stack_st_X509_NAME *","(const struct stack_st_X509_NAME *)"],
"sk_X509_NAME_deep_copy":["struct stack_st_X509_NAME *","(const struct stack_st_X509_NAME *, sk_X509_NAME_copyfunc, sk_X509_NAME_freefunc)"],
"sk_X509_NAME_set_cmp_func":["sk_X509_NAME_compfunc","(struct stack_st_X509_NAME *, sk_X509_NAME_compfunc)"],
"sk_X509_EXTENSION_num":["int","(const struct stack_st_X509_EXTENSION *)"],
"sk_X509_EXTENSION_value":["X509_EXTENSION *","(const struct stack_st_X509_EXTENSION *, int)"],
"sk_X509_EXTENSION_new":["struct stack_st_X509_EXTENSION *","(sk_X509_EXTENSION_compfunc)"],
"sk_X509_EXTENSION_new_null":["struct stack_st_X509_EXTENSION *","()"],
"sk_X509_EXTENSION_new_reserve":["struct stack_st_X509_EXTENSION *","(sk_X509_EXTENSION_compfunc, int)"],
"sk_X509_EXTENSION_reserve":["int","(struct stack_st_X509_EXTENSION *, int)"],
"sk_X509_EXTENSION_free":["void","(struct stack_st_X509_EXTENSION *)"],
"sk_X509_EXTENSION_zero":["void","(struct stack_st_X509_EXTENSION *)"],
"sk_X509_EXTENSION_delete":["X509_EXTENSION *","(struct stack_st_X509_EXTENSION *, int)"],
"sk_X509_EXTENSION_delete_ptr":["X509_EXTENSION *","(struct stack_st_X509_EXTENSION *, X509_EXTENSION *)"],
"sk_X509_EXTENSION_push":["int","(struct stack_st_X509_EXTENSION *, X509_EXTENSION *)"],
"sk_X509_EXTENSION_unshift":["int","(struct stack_st_X509_EXTENSION *, X509_EXTENSION *)"],
"sk_X509_EXTENSION_pop":["X509_EXTENSION *","(struct stack_st_X509_EXTENSION *)"],
"sk_X509_EXTENSION_shift":["X509_EXTENSION *","(struct stack_st_X509_EXTENSION *)"],
"sk_X509_EXTENSION_pop_free":["void","(struct stack_st_X509_EXTENSION *, sk_X509_EXTENSION_freefunc)"],
"sk_X509_EXTENSION_insert":["int","(struct stack_st_X509_EXTENSION *, X509_EXTENSION *, int)"],
"sk_X509_EXTENSION_set":["X509_EXTENSION *","(struct stack_st_X509_EXTENSION *, int, X509_EXTENSION *)"],
"sk_X509_EXTENSION_find":["int","(struct stack_st_X509_EXTENSION *, X509_EXTENSION *)"],
"sk_X509_EXTENSION_find_ex":["int","(struct stack_st_X509_EXTENSION *, X509_EXTENSION *)"],
"sk_X509_EXTENSION_sort":["void","(struct stack_st_X509_EXTENSION *)"],
"sk_X509_EXTENSION_is_sorted":["int","(const struct stack_st_X509_EXTENSION *)"],
"sk_X509_EXTENSION_dup":["struct stack_st_X509_EXTENSION *","(const struct stack_st_X509_EXTENSION *)"],
"sk_X509_EXTENSION_deep_copy":["struct stack_st_X509_EXTENSION *","(const struct stack_st_X509_EXTENSION *, sk_X509_EXTENSION_copyfunc, sk_X509_EXTENSION_freefunc)"],
"sk_X509_EXTENSION_set_cmp_func":["sk_X509_EXTENSION_compfunc","(struct stack_st_X509_EXTENSION *, sk_X509_EXTENSION_compfunc)"],
"sk_X509_ATTRIBUTE_num":["int","(const struct stack_st_X509_ATTRIBUTE *)"],
"sk_X509_ATTRIBUTE_value":["X509_ATTRIBUTE *","(const struct stack_st_X509_ATTRIBUTE *, int)"],
"sk_X509_ATTRIBUTE_new":["struct stack_st_X509_ATTRIBUTE *","(sk_X509_ATTRIBUTE_compfunc)"],
"sk_X509_ATTRIBUTE_new_null":["struct stack_st_X509_ATTRIBUTE *","()"],
"sk_X509_ATTRIBUTE_new_reserve":["struct stack_st_X509_ATTRIBUTE *","(sk_X509_ATTRIBUTE_compfunc, int)"],
"sk_X509_ATTRIBUTE_reserve":["int","(struct stack_st_X509_ATTRIBUTE *, int)"],
"sk_X509_ATTRIBUTE_free":["void","(struct stack_st_X509_ATTRIBUTE *)"],
"sk_X509_ATTRIBUTE_zero":["void","(struct stack_st_X509_ATTRIBUTE *)"],
"sk_X509_ATTRIBUTE_delete":["X509_ATTRIBUTE *","(struct stack_st_X509_ATTRIBUTE *, int)"],
"sk_X509_ATTRIBUTE_delete_ptr":["X509_ATTRIBUTE *","(struct stack_st_X509_ATTRIBUTE *, X509_ATTRIBUTE *)"],
"sk_X509_ATTRIBUTE_push":["int","(struct stack_st_X509_ATTRIBUTE *, X509_ATTRIBUTE *)"],
"sk_X509_ATTRIBUTE_unshift":["int","(struct stack_st_X509_ATTRIBUTE *, X509_ATTRIBUTE *)"],
"sk_X509_ATTRIBUTE_pop":["X509_ATTRIBUTE *","(struct stack_st_X509_ATTRIBUTE *)"],
"sk_X509_ATTRIBUTE_shift":["X509_ATTRIBUTE *","(struct stack_st_X509_ATTRIBUTE *)"],
"sk_X509_ATTRIBUTE_pop_free":["void","(struct stack_st_X509_ATTRIBUTE *, sk_X509_ATTRIBUTE_freefunc)"],
"sk_X509_ATTRIBUTE_insert":["int","(struct stack_st_X509_ATTRIBUTE *, X509_ATTRIBUTE *, int)"],
"sk_X509_ATTRIBUTE_set":["X509_ATTRIBUTE *","(struct stack_st_X509_ATTRIBUTE *, int, X509_ATTRIBUTE *)"],
"sk_X509_ATTRIBUTE_find":["int","(struct stack_st_X509_ATTRIBUTE *, X509_ATTRIBUTE *)"],
"sk_X509_ATTRIBUTE_find_ex":["int","(struct stack_st_X509_ATTRIBUTE *, X509_ATTRIBUTE *)"],
"sk_X509_ATTRIBUTE_sort":["void","(struct stack_st_X509_ATTRIBUTE *)"],
"sk_X509_ATTRIBUTE_is_sorted":["int","(const struct stack_st_X509_ATTRIBUTE *)"],
"sk_X509_ATTRIBUTE_dup":["struct stack_st_X509_ATTRIBUTE *","(const struct stack_st_X509_ATTRIBUTE *)"],
"sk_X509_ATTRIBUTE_deep_copy":["struct stack_st_X509_ATTRIBUTE *","(const struct stack_st_X509_ATTRIBUTE *, sk_X509_ATTRIBUTE_copyfunc, sk_X509_ATTRIBUTE_freefunc)"],
"sk_X509_ATTRIBUTE_set_cmp_func":["sk_X509_ATTRIBUTE_compfunc","(struct stack_st_X509_ATTRIBUTE *, sk_X509_ATTRIBUTE_compfunc)"],
"sk_X509_num":["int","(const struct stack_st_X509 *)"],
"sk_X509_value":["X509 *","(const struct stack_st_X509 *, int)"],
"sk_X509_new":["struct stack_st_X509 *","(sk_X509_compfunc)"],
"sk_X509_new_null":["struct stack_st_X509 *","()"],
"sk_X509_new_reserve":["struct stack_st_X509 *","(sk_X509_compfunc, int)"],
"sk_X509_reserve":["int","(struct stack_st_X509 *, int)"],
"sk_X509_free":["void","(struct stack_st_X509 *)"],
"sk_X509_zero":["void","(struct stack_st_X509 *)"],
"sk_X509_delete":["X509 *","(struct stack_st_X509 *, int)"],
"sk_X509_delete_ptr":["X509 *","(struct stack_st_X509 *, X509 *)"],
"sk_X509_push":["int","(struct stack_st_X509 *, X509 *)"],
"sk_X509_unshift":["int","(struct stack_st_X509 *, X509 *)"],
"sk_X509_pop":["X509 *","(struct stack_st_X509 *)"],
"sk_X509_shift":["X509 *","(struct stack_st_X509 *)"],
"sk_X509_pop_free":["void","(struct stack_st_X509 *, sk_X509_freefunc)"],
"sk_X509_insert":["int","(struct stack_st_X509 *, X509 *, int)"],
"sk_X509_set":["X509 *","(struct stack_st_X509 *, int, X509 *)"],
"sk_X509_find":["int","(struct stack_st_X509 *, X509 *)"],
"sk_X509_find_ex":["int","(struct stack_st_X509 *, X509 *)"],
"sk_X509_sort":["void","(struct stack_st_X509 *)"],
"sk_X509_is_sorted":["int","(const struct stack_st_X509 *)"],
"sk_X509_dup":["struct stack_st_X509 *","(const struct stack_st_X509 *)"],
"sk_X509_deep_copy":["struct stack_st_X509 *","(const struct stack_st_X509 *, sk_X509_copyfunc, sk_X509_freefunc)"],
"sk_X509_set_cmp_func":["sk_X509_compfunc","(struct stack_st_X509 *, sk_X509_compfunc)"],
"sk_X509_TRUST_num":["int","(const struct stack_st_X509_TRUST *)"],
"sk_X509_TRUST_value":["X509_TRUST *","(const struct stack_st_X509_TRUST *, int)"],
"sk_X509_TRUST_new":["struct stack_st_X509_TRUST *","(sk_X509_TRUST_compfunc)"],
"sk_X509_TRUST_new_null":["struct stack_st_X509_TRUST *","()"],
"sk_X509_TRUST_new_reserve":["struct stack_st_X509_TRUST *","(sk_X509_TRUST_compfunc, int)"],
"sk_X509_TRUST_reserve":["int","(struct stack_st_X509_TRUST *, int)"],
"sk_X509_TRUST_free":["void","(struct stack_st_X509_TRUST *)"],
"sk_X509_TRUST_zero":["void","(struct stack_st_X509_TRUST *)"],
"sk_X509_TRUST_delete":["X509_TRUST *","(struct stack_st_X509_TRUST *, int)"],
"sk_X509_TRUST_delete_ptr":["X509_TRUST *","(struct stack_st_X509_TRUST *, X509_TRUST *)"],
"sk_X509_TRUST_push":["int","(struct stack_st_X509_TRUST *, X509_TRUST *)"],
"sk_X509_TRUST_unshift":["int","(struct stack_st_X509_TRUST *, X509_TRUST *)"],
"sk_X509_TRUST_pop":["X509_TRUST *","(struct stack_st_X509_TRUST *)"],
"sk_X509_TRUST_shift":["X509_TRUST *","(struct stack_st_X509_TRUST *)"],
"sk_X509_TRUST_pop_free":["void","(struct stack_st_X509_TRUST *, sk_X509_TRUST_freefunc)"],
"sk_X509_TRUST_insert":["int","(struct stack_st_X509_TRUST *, X509_TRUST *, int)"],
"sk_X509_TRUST_set":["X509_TRUST *","(struct stack_st_X509_TRUST *, int, X509_TRUST *)"],
"sk_X509_TRUST_find":["int","(struct stack_st_X509_TRUST *, X509_TRUST *)"],
"sk_X509_TRUST_find_ex":["int","(struct stack_st_X509_TRUST *, X509_TRUST *)"],
"sk_X509_TRUST_sort":["void","(struct stack_st_X509_TRUST *)"],
"sk_X509_TRUST_is_sorted":["int","(const struct stack_st_X509_TRUST *)"],
"sk_X509_TRUST_dup":["struct stack_st_X509_TRUST *","(const struct stack_st_X509_TRUST *)"],
"sk_X509_TRUST_deep_copy":["struct stack_st_X509_TRUST *","(const struct stack_st_X509_TRUST *, sk_X509_TRUST_copyfunc, sk_X509_TRUST_freefunc)"],
"sk_X509_TRUST_set_cmp_func":["sk_X509_TRUST_compfunc","(struct stack_st_X509_TRUST *, sk_X509_TRUST_compfunc)"],
"sk_X509_REVOKED_num":["int","(const struct stack_st_X509_REVOKED *)"],
"sk_X509_REVOKED_value":["X509_REVOKED *","(const struct stack_st_X509_REVOKED *, int)"],
"sk_X509_REVOKED_new":["struct stack_st_X509_REVOKED *","(sk_X509_REVOKED_compfunc)"],
"sk_X509_REVOKED_new_null":["struct stack_st_X509_REVOKED *","()"],
"sk_X509_REVOKED_new_reserve":["struct stack_st_X509_REVOKED *","(sk_X509_REVOKED_compfunc, int)"],
"sk_X509_REVOKED_reserve":["int","(struct stack_st_X509_REVOKED *, int)"],
"sk_X509_REVOKED_free":["void","(struct stack_st_X509_REVOKED *)"],
"sk_X509_REVOKED_zero":["void","(struct stack_st_X509_REVOKED *)"],
"sk_X509_REVOKED_delete":["X509_REVOKED *","(struct stack_st_X509_REVOKED *, int)"],
"sk_X509_REVOKED_delete_ptr":["X509_REVOKED *","(struct stack_st_X509_REVOKED *, X509_REVOKED *)"],
"sk_X509_REVOKED_push":["int","(struct stack_st_X509_REVOKED *, X509_REVOKED *)"],
"sk_X509_REVOKED_unshift":["int","(struct stack_st_X509_REVOKED *, X509_REVOKED *)"],
"sk_X509_REVOKED_pop":["X509_REVOKED *","(struct stack_st_X509_REVOKED *)"],
"sk_X509_REVOKED_shift":["X509_REVOKED *","(struct stack_st_X509_REVOKED *)"],
"sk_X509_REVOKED_pop_free":["void","(struct stack_st_X509_REVOKED *, sk_X509_REVOKED_freefunc)"],
"sk_X509_REVOKED_insert":["int","(struct stack_st_X509_REVOKED *, X509_REVOKED *, int)"],
"sk_X509_REVOKED_set":["X509_REVOKED *","(struct stack_st_X509_REVOKED *, int, X509_REVOKED *)"],
"sk_X509_REVOKED_find":["int","(struct stack_st_X509_REVOKED *, X509_REVOKED *)"],
"sk_X509_REVOKED_find_ex":["int","(struct stack_st_X509_REVOKED *, X509_REVOKED *)"],
"sk_X509_REVOKED_sort":["void","(struct stack_st_X509_REVOKED *)"],
"sk_X509_REVOKED_is_sorted":["int","(const struct stack_st_X509_REVOKED *)"],
"sk_X509_REVOKED_dup":["struct stack_st_X509_REVOKED *","(const struct stack_st_X509_REVOKED *)"],
"sk_X509_REVOKED_deep_copy":["struct stack_st_X509_REVOKED *","(const struct stack_st_X509_REVOKED *, sk_X509_REVOKED_copyfunc, sk_X509_REVOKED_freefunc)"],
"sk_X509_REVOKED_set_cmp_func":["sk_X509_REVOKED_compfunc","(struct stack_st_X509_REVOKED *, sk_X509_REVOKED_compfunc)"],
"sk_X509_CRL_num":["int","(const struct stack_st_X509_CRL *)"],
"sk_X509_CRL_value":["X509_CRL *","(const struct stack_st_X509_CRL *, int)"],
"sk_X509_CRL_new":["struct stack_st_X509_CRL *","(sk_X509_CRL_compfunc)"],
"sk_X509_CRL_new_null":["struct stack_st_X509_CRL *","()"],
"sk_X509_CRL_new_reserve":["struct stack_st_X509_CRL *","(sk_X509_CRL_compfunc, int)"],
"sk_X509_CRL_reserve":["int","(struct stack_st_X509_CRL *, int)"],
"sk_X509_CRL_free":["void","(struct stack_st_X509_CRL *)"],
"sk_X509_CRL_zero":["void","(struct stack_st_X509_CRL *)"],
"sk_X509_CRL_delete":["X509_CRL *","(struct stack_st_X509_CRL *, int)"],
"sk_X509_CRL_delete_ptr":["X509_CRL *","(struct stack_st_X509_CRL *, X509_CRL *)"],
"sk_X509_CRL_push":["int","(struct stack_st_X509_CRL *, X509_CRL *)"],
"sk_X509_CRL_unshift":["int","(struct stack_st_X509_CRL *, X509_CRL *)"],
"sk_X509_CRL_pop":["X509_CRL *","(struct stack_st_X509_CRL *)"],
"sk_X509_CRL_shift":["X509_CRL *","(struct stack_st_X509_CRL *)"],
"sk_X509_CRL_pop_free":["void","(struct stack_st_X509_CRL *, sk_X509_CRL_freefunc)"],
"sk_X509_CRL_insert":["int","(struct stack_st_X509_CRL *, X509_CRL *, int)"],
"sk_X509_CRL_set":["X509_CRL *","(struct stack_st_X509_CRL *, int, X509_CRL *)"],
"sk_X509_CRL_find":["int","(struct stack_st_X509_CRL *, X509_CRL *)"],
"sk_X509_CRL_find_ex":["int","(struct stack_st_X509_CRL *, X509_CRL *)"],
"sk_X509_CRL_sort":["void","(struct stack_st_X509_CRL *)"],
"sk_X509_CRL_is_sorted":["int","(const struct stack_st_X509_CRL *)"],
"sk_X509_CRL_dup":["struct stack_st_X509_CRL *","(const struct stack_st_X509_CRL *)"],
"sk_X509_CRL_deep_copy":["struct stack_st_X509_CRL *","(const struct stack_st_X509_CRL *, sk_X509_CRL_copyfunc, sk_X509_CRL_freefunc)"],
"sk_X509_CRL_set_cmp_func":["sk_X509_CRL_compfunc","(struct stack_st_X509_CRL *, sk_X509_CRL_compfunc)"],
"sk_X509_INFO_num":["int","(const struct stack_st_X509_INFO *)"],
"sk_X509_INFO_value":["X509_INFO *","(const struct stack_st_X509_INFO *, int)"],
"sk_X509_INFO_new":["struct stack_st_X509_INFO *","(sk_X509_INFO_compfunc)"],
"sk_X509_INFO_new_null":["struct stack_st_X509_INFO *","()"],
"sk_X509_INFO_new_reserve":["struct stack_st_X509_INFO *","(sk_X509_INFO_compfunc, int)"],
"sk_X509_INFO_reserve":["int","(struct stack_st_X509_INFO *, int)"],
"sk_X509_INFO_free":["void","(struct stack_st_X509_INFO *)"],
"sk_X509_INFO_zero":["void","(struct stack_st_X509_INFO *)"],
"sk_X509_INFO_delete":["X509_INFO *","(struct stack_st_X509_INFO *, int)"],
"sk_X509_INFO_delete_ptr":["X509_INFO *","(struct stack_st_X509_INFO *, X509_INFO *)"],
"sk_X509_INFO_push":["int","(struct stack_st_X509_INFO *, X509_INFO *)"],
"sk_X509_INFO_unshift":["int","(struct stack_st_X509_INFO *, X509_INFO *)"],
"sk_X509_INFO_pop":["X509_INFO *","(struct stack_st_X509_INFO *)"],
"sk_X509_INFO_shift":["X509_INFO *","(struct stack_st_X509_INFO *)"],
"sk_X509_INFO_pop_free":["void","(struct stack_st_X509_INFO *, sk_X509_INFO_freefunc)"],
"sk_X509_INFO_insert":["int","(struct stack_st_X509_INFO *, X509_INFO *, int)"],
"sk_X509_INFO_set":["X509_INFO *","(struct stack_st_X509_INFO *, int, X509_INFO *)"],
"sk_X509_INFO_find":["int","(struct stack_st_X509_INFO *, X509_INFO *)"],
"sk_X509_INFO_find_ex":["int","(struct stack_st_X509_INFO *, X509_INFO *)"],
"sk_X509_INFO_sort":["void","(struct stack_st_X509_INFO *)"],
"sk_X509_INFO_is_sorted":["int","(const struct stack_st_X509_INFO *)"],
"sk_X509_INFO_dup":["struct stack_st_X509_INFO *","(const struct stack_st_X509_INFO *)"],
"sk_X509_INFO_deep_copy":["struct stack_st_X509_INFO *","(const struct stack_st_X509_INFO *, sk_X509_INFO_copyfunc, sk_X509_INFO_freefunc)"],
"sk_X509_INFO_set_cmp_func":["sk_X509_INFO_compfunc","(struct stack_st_X509_INFO *, sk_X509_INFO_compfunc)"],
"OPENSSL_LH_error":["int","(OPENSSL_LHASH *)"],
"OPENSSL_LH_new":["OPENSSL_LHASH *","(OPENSSL_LH_HASHFUNC, OPENSSL_LH_COMPFUNC)"],
"OPENSSL_LH_free":["void","(OPENSSL_LHASH *)"],
"OPENSSL_LH_insert":["void *","(OPENSSL_LHASH *, void *)"],
"OPENSSL_LH_delete":["void *","(OPENSSL_LHASH *, const void *)"],
"OPENSSL_LH_retrieve":["void *","(OPENSSL_LHASH *, const void *)"],
"OPENSSL_LH_doall":["void","(OPENSSL_LHASH *, OPENSSL_LH_DOALL_FUNC)"],
"OPENSSL_LH_doall_arg":["void","(OPENSSL_LHASH *, OPENSSL_LH_DOALL_FUNCARG, void *)"],
"OPENSSL_LH_strhash":["unsigned long","(const char *)"],
"OPENSSL_LH_num_items":["unsigned long","(const OPENSSL_LHASH *)"],
"OPENSSL_LH_get_down_load":["unsigned long","(const OPENSSL_LHASH *)"],
"OPENSSL_LH_set_down_load":["void","(OPENSSL_LHASH *, unsigned long)"],
"OPENSSL_LH_stats":["void","(const OPENSSL_LHASH *, int *)"],
"OPENSSL_LH_node_stats":["void","(const OPENSSL_LHASH *, int *)"],
"OPENSSL_LH_node_usage_stats":["void","(const OPENSSL_LHASH *, int *)"],
"OPENSSL_LH_stats_bio":["void","(const OPENSSL_LHASH *, BIO *)"],
"OPENSSL_LH_node_stats_bio":["void","(const OPENSSL_LHASH *, BIO *)"],
"OPENSSL_LH_node_usage_stats_bio":["void","(const OPENSSL_LHASH *, BIO *)"],
"lh_OPENSSL_STRING_new":["struct lhash_st_OPENSSL_STRING *","(unsigned long (*)(const OPENSSL_STRING *), int (*)(const OPENSSL_STRING *, const OPENSSL_STRING *))"],
"lh_OPENSSL_STRING_free":["void","(struct lhash_st_OPENSSL_STRING *)"],
"lh_OPENSSL_STRING_insert":["OPENSSL_STRING *","(struct lhash_st_OPENSSL_STRING *, OPENSSL_STRING *)"],
"lh_OPENSSL_STRING_delete":["OPENSSL_STRING *","(struct lhash_st_OPENSSL_STRING *, const OPENSSL_STRING *)"],
"lh_OPENSSL_STRING_retrieve":["OPENSSL_STRING *","(struct lhash_st_OPENSSL_STRING *, const OPENSSL_STRING *)"],
"lh_OPENSSL_STRING_error":["int","(struct lhash_st_OPENSSL_STRING *)"],
"lh_OPENSSL_STRING_num_items":["unsigned long","(struct lhash_st_OPENSSL_STRING *)"],
"lh_OPENSSL_STRING_node_stats_bio":["void","(const struct lhash_st_OPENSSL_STRING *, BIO *)"],
"lh_OPENSSL_STRING_node_usage_stats_bio":["void","(const struct lhash_st_OPENSSL_STRING *, BIO *)"],
"lh_OPENSSL_STRING_stats_bio":["void","(const struct lhash_st_OPENSSL_STRING *, BIO *)"],
"lh_OPENSSL_STRING_get_down_load":["unsigned long","(struct lhash_st_OPENSSL_STRING *)"],
"lh_OPENSSL_STRING_set_down_load":["void","(struct lhash_st_OPENSSL_STRING *, unsigned long)"],
"lh_OPENSSL_STRING_doall":["void","(struct lhash_st_OPENSSL_STRING *, void (*)(OPENSSL_STRING *))"],
"lh_OPENSSL_CSTRING_new":["struct lhash_st_OPENSSL_CSTRING *","(unsigned long (*)(const OPENSSL_CSTRING *), int (*)(const OPENSSL_CSTRING *, const OPENSSL_CSTRING *))"],
"lh_OPENSSL_CSTRING_free":["void","(struct lhash_st_OPENSSL_CSTRING *)"],
"lh_OPENSSL_CSTRING_insert":["OPENSSL_CSTRING *","(struct lhash_st_OPENSSL_CSTRING *, OPENSSL_CSTRING *)"],
"lh_OPENSSL_CSTRING_delete":["OPENSSL_CSTRING *","(struct lhash_st_OPENSSL_CSTRING *, const OPENSSL_CSTRING *)"],
"lh_OPENSSL_CSTRING_retrieve":["OPENSSL_CSTRING *","(struct lhash_st_OPENSSL_CSTRING *, const OPENSSL_CSTRING *)"],
"lh_OPENSSL_CSTRING_error":["int","(struct lhash_st_OPENSSL_CSTRING *)"],
"lh_OPENSSL_CSTRING_num_items":["unsigned long","(struct lhash_st_OPENSSL_CSTRING *)"],
"lh_OPENSSL_CSTRING_node_stats_bio":["void","(const struct lhash_st_OPENSSL_CSTRING *, BIO *)"],
"lh_OPENSSL_CSTRING_node_usage_stats_bio":["void","(const struct lhash_st_OPENSSL_CSTRING *, BIO *)"],
"lh_OPENSSL_CSTRING_stats_bio":["void","(const struct lhash_st_OPENSSL_CSTRING *, BIO *)"],
"lh_OPENSSL_CSTRING_get_down_load":["unsigned long","(struct lhash_st_OPENSSL_CSTRING *)"],
"lh_OPENSSL_CSTRING_set_down_load":["void","(struct lhash_st_OPENSSL_CSTRING *, unsigned long)"],
"lh_OPENSSL_CSTRING_doall":["void","(struct lhash_st_OPENSSL_CSTRING *, void (*)(OPENSSL_CSTRING *))"],
"sk_X509_LOOKUP_num":["int","(const struct stack_st_X509_LOOKUP *)"],
"sk_X509_LOOKUP_value":["X509_LOOKUP *","(const struct stack_st_X509_LOOKUP *, int)"],
"sk_X509_LOOKUP_new":["struct stack_st_X509_LOOKUP *","(sk_X509_LOOKUP_compfunc)"],
"sk_X509_LOOKUP_new_null":["struct stack_st_X509_LOOKUP *","()"],
"sk_X509_LOOKUP_new_reserve":["struct stack_st_X509_LOOKUP *","(sk_X509_LOOKUP_compfunc, int)"],
"sk_X509_LOOKUP_reserve":["int","(struct stack_st_X509_LOOKUP *, int)"],
"sk_X509_LOOKUP_free":["void","(struct stack_st_X509_LOOKUP *)"],
"sk_X509_LOOKUP_zero":["void","(struct stack_st_X509_LOOKUP *)"],
"sk_X509_LOOKUP_delete":["X509_LOOKUP *","(struct stack_st_X509_LOOKUP *, int)"],
"sk_X509_LOOKUP_delete_ptr":["X509_LOOKUP *","(struct stack_st_X509_LOOKUP *, X509_LOOKUP *)"],
"sk_X509_LOOKUP_push":["int","(struct stack_st_X509_LOOKUP *, X509_LOOKUP *)"],
"sk_X509_LOOKUP_unshift":["int","(struct stack_st_X509_LOOKUP *, X509_LOOKUP *)"],
"sk_X509_LOOKUP_pop":["X509_LOOKUP *","(struct stack_st_X509_LOOKUP *)"],
"sk_X509_LOOKUP_shift":["X509_LOOKUP *","(struct stack_st_X509_LOOKUP *)"],
"sk_X509_LOOKUP_pop_free":["void","(struct stack_st_X509_LOOKUP *, sk_X509_LOOKUP_freefunc)"],
"sk_X509_LOOKUP_insert":["int","(struct stack_st_X509_LOOKUP *, X509_LOOKUP *, int)"],
"sk_X509_LOOKUP_set":["X509_LOOKUP *","(struct stack_st_X509_LOOKUP *, int, X509_LOOKUP *)"],
"sk_X509_LOOKUP_find":["int","(struct stack_st_X509_LOOKUP *, X509_LOOKUP *)"],
"sk_X509_LOOKUP_find_ex":["int","(struct stack_st_X509_LOOKUP *, X509_LOOKUP *)"],
"sk_X509_LOOKUP_sort":["void","(struct stack_st_X509_LOOKUP *)"],
"sk_X509_LOOKUP_is_sorted":["int","(const struct stack_st_X509_LOOKUP *)"],
"sk_X509_LOOKUP_dup":["struct stack_st_X509_LOOKUP *","(const struct stack_st_X509_LOOKUP *)"],
"sk_X509_LOOKUP_deep_copy":["struct stack_st_X509_LOOKUP *","(const struct stack_st_X509_LOOKUP *, sk_X509_LOOKUP_copyfunc, sk_X509_LOOKUP_freefunc)"],
"sk_X509_LOOKUP_set_cmp_func":["sk_X509_LOOKUP_compfunc","(struct stack_st_X509_LOOKUP *, sk_X509_LOOKUP_compfunc)"],
"sk_X509_OBJECT_num":["int","(const struct stack_st_X509_OBJECT *)"],
"sk_X509_OBJECT_value":["X509_OBJECT *","(const struct stack_st_X509_OBJECT *, int)"],
"sk_X509_OBJECT_new":["struct stack_st_X509_OBJECT *","(sk_X509_OBJECT_compfunc)"],
"sk_X509_OBJECT_new_null":["struct stack_st_X509_OBJECT *","()"],
"sk_X509_OBJECT_new_reserve":["struct stack_st_X509_OBJECT *","(sk_X509_OBJECT_compfunc, int)"],
"sk_X509_OBJECT_reserve":["int","(struct stack_st_X509_OBJECT *, int)"],
"sk_X509_OBJECT_free":["void","(struct stack_st_X509_OBJECT *)"],
"sk_X509_OBJECT_zero":["void","(struct stack_st_X509_OBJECT *)"],
"sk_X509_OBJECT_delete":["X509_OBJECT *","(struct stack_st_X509_OBJECT *, int)"],
"sk_X509_OBJECT_delete_ptr":["X509_OBJECT *","(struct stack_st_X509_OBJECT *, X509_OBJECT *)"],
"sk_X509_OBJECT_push":["int","(struct stack_st_X509_OBJECT *, X509_OBJECT *)"],
"sk_X509_OBJECT_unshift":["int","(struct stack_st_X509_OBJECT *, X509_OBJECT *)"],
"sk_X509_OBJECT_pop":["X509_OBJECT *","(struct stack_st_X509_OBJECT *)"],
"sk_X509_OBJECT_shift":["X509_OBJECT *","(struct stack_st_X509_OBJECT *)"],
"sk_X509_OBJECT_pop_free":["void","(struct stack_st_X509_OBJECT *, sk_X509_OBJECT_freefunc)"],
"sk_X509_OBJECT_insert":["int","(struct stack_st_X509_OBJECT *, X509_OBJECT *, int)"],
"sk_X509_OBJECT_set":["X509_OBJECT *","(struct stack_st_X509_OBJECT *, int, X509_OBJECT *)"],
"sk_X509_OBJECT_find":["int","(struct stack_st_X509_OBJECT *, X509_OBJECT *)"],
"sk_X509_OBJECT_find_ex":["int","(struct stack_st_X509_OBJECT *, X509_OBJECT *)"],
"sk_X509_OBJECT_sort":["void","(struct stack_st_X509_OBJECT *)"],
"sk_X509_OBJECT_is_sorted":["int","(const struct stack_st_X509_OBJECT *)"],
"sk_X509_OBJECT_dup":["struct stack_st_X509_OBJECT *","(const struct stack_st_X509_OBJECT *)"],
"sk_X509_OBJECT_deep_copy":["struct stack_st_X509_OBJECT *","(const struct stack_st_X509_OBJECT *, sk_X509_OBJECT_copyfunc, sk_X509_OBJECT_freefunc)"],
"sk_X509_OBJECT_set_cmp_func":["sk_X509_OBJECT_compfunc","(struct stack_st_X509_OBJECT *, sk_X509_OBJECT_compfunc)"],
"sk_X509_VERIFY_PARAM_num":["int","(const struct stack_st_X509_VERIFY_PARAM *)"],
"sk_X509_VERIFY_PARAM_value":["X509_VERIFY_PARAM *","(const struct stack_st_X509_VERIFY_PARAM *, int)"],
"sk_X509_VERIFY_PARAM_new":["struct stack_st_X509_VERIFY_PARAM *","(sk_X509_VERIFY_PARAM_compfunc)"],
"sk_X509_VERIFY_PARAM_new_null":["struct stack_st_X509_VERIFY_PARAM *","()"],
"sk_X509_VERIFY_PARAM_new_reserve":["struct stack_st_X509_VERIFY_PARAM *","(sk_X509_VERIFY_PARAM_compfunc, int)"],
"sk_X509_VERIFY_PARAM_reserve":["int","(struct stack_st_X509_VERIFY_PARAM *, int)"],
"sk_X509_VERIFY_PARAM_free":["void","(struct stack_st_X509_VERIFY_PARAM *)"],
"sk_X509_VERIFY_PARAM_zero":["void","(struct stack_st_X509_VERIFY_PARAM *)"],
"sk_X509_VERIFY_PARAM_delete":["X509_VERIFY_PARAM *","(struct stack_st_X509_VERIFY_PARAM *, int)"],
"sk_X509_VERIFY_PARAM_delete_ptr":["X509_VERIFY_PARAM *","(struct stack_st_X509_VERIFY_PARAM *, X509_VERIFY_PARAM *)"],
"sk_X509_VERIFY_PARAM_push":["int","(struct stack_st_X509_VERIFY_PARAM *, X509_VERIFY_PARAM *)"],
"sk_X509_VERIFY_PARAM_unshift":["int","(struct stack_st_X509_VERIFY_PARAM *, X509_VERIFY_PARAM *)"],
"sk_X509_VERIFY_PARAM_pop":["X509_VERIFY_PARAM *","(struct stack_st_X509_VERIFY_PARAM *)"],
"sk_X509_VERIFY_PARAM_shift":["X509_VERIFY_PARAM *","(struct stack_st_X509_VERIFY_PARAM *)"],
"sk_X509_VERIFY_PARAM_pop_free":["void","(struct stack_st_X509_VERIFY_PARAM *, sk_X509_VERIFY_PARAM_freefunc)"],
"sk_X509_VERIFY_PARAM_insert":["int","(struct stack_st_X509_VERIFY_PARAM *, X509_VERIFY_PARAM *, int)"],
"sk_X509_VERIFY_PARAM_set":["X509_VERIFY_PARAM *","(struct stack_st_X509_VERIFY_PARAM *, int, X509_VERIFY_PARAM *)"],
"sk_X509_VERIFY_PARAM_find":["int","(struct stack_st_X509_VERIFY_PARAM *, X509_VERIFY_PARAM *)"],
"sk_X509_VERIFY_PARAM_find_ex":["int","(struct stack_st_X509_VERIFY_PARAM *, X509_VERIFY_PARAM *)"],
"sk_X509_VERIFY_PARAM_sort":["void","(struct stack_st_X509_VERIFY_PARAM *)"],
"sk_X509_VERIFY_PARAM_is_sorted":["int","(const struct stack_st_X509_VERIFY_PARAM *)"],
"sk_X509_VERIFY_PARAM_dup":["struct stack_st_X509_VERIFY_PARAM *","(const struct stack_st_X509_VERIFY_PARAM *)"],
"sk_X509_VERIFY_PARAM_deep_copy":["struct stack_st_X509_VERIFY_PARAM *","(const struct stack_st_X509_VERIFY_PARAM *, sk_X509_VERIFY_PARAM_copyfunc, sk_X509_VERIFY_PARAM_freefunc)"],
"sk_X509_VERIFY_PARAM_set_cmp_func":["sk_X509_VERIFY_PARAM_compfunc","(struct stack_st_X509_VERIFY_PARAM *, sk_X509_VERIFY_PARAM_compfunc)"],
"X509_STORE_set_depth":["int","(X509_STORE *, int)"],
"X509_STORE_CTX_set_depth":["void","(X509_STORE_CTX *, int)"],
"X509_OBJECT_idx_by_subject":["int","(struct stack_st_X509_OBJECT *, X509_LOOKUP_TYPE, X509_NAME *)"],
"X509_OBJECT_retrieve_by_subject":["X509_OBJECT *","(struct stack_st_X509_OBJECT *, X509_LOOKUP_TYPE, X509_NAME *)"],
"X509_OBJECT_retrieve_match":["X509_OBJECT *","(struct stack_st_X509_OBJECT *, X509_OBJECT *)"],
"X509_OBJECT_up_ref_count":["int","(X509_OBJECT *)"],
"X509_OBJECT_new":["X509_OBJECT *","()"],
"X509_OBJECT_free":["void","(X509_OBJECT *)"],
"X509_OBJECT_get_type":["X509_LOOKUP_TYPE","(const X509_OBJECT *)"],
"X509_OBJECT_get0_X509":["X509 *","(const X509_OBJECT *)"],
"X509_OBJECT_set1_X509":["int","(X509_OBJECT *, X509 *)"],
"X509_OBJECT_get0_X509_CRL":["X509_CRL *","(X509_OBJECT *)"],
"X509_OBJECT_set1_X509_CRL":["int","(X509_OBJECT *, X509_CRL *)"],
"X509_STORE_new":["X509_STORE *","()"],
"X509_STORE_free":["void","(X509_STORE *)"],
"X509_STORE_lock":["int","(X509_STORE *)"],
"X509_STORE_unlock":["int","(X509_STORE *)"],
"X509_STORE_up_ref":["int","(X509_STORE *)"],
"X509_STORE_get0_objects":["struct stack_st_X509_OBJECT *","(X509_STORE *)"],
"X509_STORE_CTX_get1_certs":["struct stack_st_X509 *","(X509_STORE_CTX *, X509_NAME *)"],
"X509_STORE_CTX_get1_crls":["struct stack_st_X509_CRL *","(X509_STORE_CTX *, X509_NAME *)"],
"X509_STORE_set_flags":["int","(X509_STORE *, unsigned long)"],
"X509_STORE_set_purpose":["int","(X509_STORE *, int)"],
"X509_STORE_set_trust":["int","(X509_STORE *, int)"],
"X509_STORE_set1_param":["int","(X509_STORE *, X509_VERIFY_PARAM *)"],
"X509_STORE_get0_param":["X509_VERIFY_PARAM *","(X509_STORE *)"],
"X509_STORE_set_verify":["void","(X509_STORE *, X509_STORE_CTX_verify_fn)"],
"X509_STORE_CTX_set_verify":["void","(X509_STORE_CTX *, X509_STORE_CTX_verify_fn)"],
"X509_STORE_get_verify":["X509_STORE_CTX_verify_fn","(X509_STORE *)"],
"X509_STORE_set_verify_cb":["void","(X509_STORE *, X509_STORE_CTX_verify_cb)"],
"X509_STORE_get_verify_cb":["X509_STORE_CTX_verify_cb","(X509_STORE *)"],
"X509_STORE_set_get_issuer":["void","(X509_STORE *, X509_STORE_CTX_get_issuer_fn)"],
"X509_STORE_get_get_issuer":["X509_STORE_CTX_get_issuer_fn","(X509_STORE *)"],
"X509_STORE_set_check_issued":["void","(X509_STORE *, X509_STORE_CTX_check_issued_fn)"],
"X509_STORE_get_check_issued":["X509_STORE_CTX_check_issued_fn","(X509_STORE *)"],
"X509_STORE_set_check_revocation":["void","(X509_STORE *, X509_STORE_CTX_check_revocation_fn)"],
"X509_STORE_get_check_revocation":["X509_STORE_CTX_check_revocation_fn","(X509_STORE *)"],
"X509_STORE_set_get_crl":["void","(X509_STORE *, X509_STORE_CTX_get_crl_fn)"],
"X509_STORE_get_get_crl":["X509_STORE_CTX_get_crl_fn","(X509_STORE *)"],
"X509_STORE_set_check_crl":["void","(X509_STORE *, X509_STORE_CTX_check_crl_fn)"],
"X509_STORE_get_check_crl":["X509_STORE_CTX_check_crl_fn","(X509_STORE *)"],
"X509_STORE_set_cert_crl":["void","(X509_STORE *, X509_STORE_CTX_cert_crl_fn)"],
"X509_STORE_get_cert_crl":["X509_STORE_CTX_cert_crl_fn","(X509_STORE *)"],
"X509_STORE_set_check_policy":["void","(X509_STORE *, X509_STORE_CTX_check_policy_fn)"],
"X509_STORE_get_check_policy":["X509_STORE_CTX_check_policy_fn","(X509_STORE *)"],
"X509_STORE_set_lookup_certs":["void","(X509_STORE *, X509_STORE_CTX_lookup_certs_fn)"],
"X509_STORE_get_lookup_certs":["X509_STORE_CTX_lookup_certs_fn","(X509_STORE *)"],
"X509_STORE_set_lookup_crls":["void","(X509_STORE *, X509_STORE_CTX_lookup_crls_fn)"],
"X509_STORE_get_lookup_crls":["X509_STORE_CTX_lookup_crls_fn","(X509_STORE *)"],
"X509_STORE_set_cleanup":["void","(X509_STORE *, X509_STORE_CTX_cleanup_fn)"],
"X509_STORE_get_cleanup":["X509_STORE_CTX_cleanup_fn","(X509_STORE *)"],
"X509_STORE_set_ex_data":["int","(X509_STORE *, int, void *)"],
"X509_STORE_get_ex_data":["void *","(X509_STORE *, int)"],
"X509_STORE_CTX_new":["X509_STORE_CTX *","()"],
"X509_STORE_CTX_get1_issuer":["int","(X509 **, X509_STORE_CTX *, X509 *)"],
"X509_STORE_CTX_free":["void","(X509_STORE_CTX *)"],
"X509_STORE_CTX_init":["int","(X509_STORE_CTX *, X509_STORE *, X509 *, struct stack_st_X509 *)"],
"X509_STORE_CTX_set0_trusted_stack":["void","(X509_STORE_CTX *, struct stack_st_X509 *)"],
"X509_STORE_CTX_cleanup":["void","(X509_STORE_CTX *)"],
"X509_STORE_CTX_get0_store":["X509_STORE *","(X509_STORE_CTX *)"],
"X509_STORE_CTX_get0_cert":["X509 *","(X509_STORE_CTX *)"],
"X509_STORE_CTX_get0_untrusted":["struct stack_st_X509 *","(X509_STORE_CTX *)"],
"X509_STORE_CTX_set0_untrusted":["void","(X509_STORE_CTX *, struct stack_st_X509 *)"],
"X509_STORE_CTX_set_verify_cb":["void","(X509_STORE_CTX *, X509_STORE_CTX_verify_cb)"],
"X509_STORE_CTX_get_verify_cb":["X509_STORE_CTX_verify_cb","(X509_STORE_CTX *)"],
"X509_STORE_CTX_get_verify":["X509_STORE_CTX_verify_fn","(X509_STORE_CTX *)"],
"X509_STORE_CTX_get_get_issuer":["X509_STORE_CTX_get_issuer_fn","(X509_STORE_CTX *)"],
"X509_STORE_CTX_get_check_issued":["X509_STORE_CTX_check_issued_fn","(X509_STORE_CTX *)"],
"X509_STORE_CTX_get_check_revocation":["X509_STORE_CTX_check_revocation_fn","(X509_STORE_CTX *)"],
"X509_STORE_CTX_get_get_crl":["X509_STORE_CTX_get_crl_fn","(X509_STORE_CTX *)"],
"X509_STORE_CTX_get_check_crl":["X509_STORE_CTX_check_crl_fn","(X509_STORE_CTX *)"],
"X509_STORE_CTX_get_cert_crl":["X509_STORE_CTX_cert_crl_fn","(X509_STORE_CTX *)"],
"X509_STORE_CTX_get_check_policy":["X509_STORE_CTX_check_policy_fn","(X509_STORE_CTX *)"],
"X509_STORE_CTX_get_lookup_certs":["X509_STORE_CTX_lookup_certs_fn","(X509_STORE_CTX *)"],
"X509_STORE_CTX_get_lookup_crls":["X509_STORE_CTX_lookup_crls_fn","(X509_STORE_CTX *)"],
"X509_STORE_CTX_get_cleanup":["X509_STORE_CTX_cleanup_fn","(X509_STORE_CTX *)"],
"X509_STORE_add_lookup":["X509_LOOKUP *","(X509_STORE *, X509_LOOKUP_METHOD *)"],
"X509_LOOKUP_hash_dir":["X509_LOOKUP_METHOD *","()"],
"X509_LOOKUP_file":["X509_LOOKUP_METHOD *","()"],
"X509_LOOKUP_meth_new":["X509_LOOKUP_METHOD *","(const char *)"],
"X509_LOOKUP_meth_free":["void","(X509_LOOKUP_METHOD *)"],
"X509_LOOKUP_meth_set_new_item":["int","(X509_LOOKUP_METHOD *, int (*)(X509_LOOKUP *))"],
"X509_LOOKUP_meth_get_new_item":["int (*)(X509_LOOKUP *)","(const X509_LOOKUP_METHOD *)"],
"X509_LOOKUP_meth_set_free":["int","(X509_LOOKUP_METHOD *, void (*)(X509_LOOKUP *))"],
"X509_LOOKUP_meth_get_free":["void (*)(X509_LOOKUP *)","(const X509_LOOKUP_METHOD *)"],
"X509_LOOKUP_meth_set_init":["int","(X509_LOOKUP_METHOD *, int (*)(X509_LOOKUP *))"],
"X509_LOOKUP_meth_get_init":["int (*)(X509_LOOKUP *)","(const X509_LOOKUP_METHOD *)"],
"X509_LOOKUP_meth_set_shutdown":["int","(X509_LOOKUP_METHOD *, int (*)(X509_LOOKUP *))"],
"X509_LOOKUP_meth_get_shutdown":["int (*)(X509_LOOKUP *)","(const X509_LOOKUP_METHOD *)"],
"X509_LOOKUP_meth_set_ctrl":["int","(X509_LOOKUP_METHOD *, X509_LOOKUP_ctrl_fn)"],
"X509_LOOKUP_meth_get_ctrl":["X509_LOOKUP_ctrl_fn","(const X509_LOOKUP_METHOD *)"],
"X509_LOOKUP_meth_set_get_by_subject":["int","(X509_LOOKUP_METHOD *, X509_LOOKUP_get_by_subject_fn)"],
"X509_LOOKUP_meth_get_get_by_subject":["X509_LOOKUP_get_by_subject_fn","(const X509_LOOKUP_METHOD *)"],
"X509_LOOKUP_meth_set_get_by_issuer_serial":["int","(X509_LOOKUP_METHOD *, X509_LOOKUP_get_by_issuer_serial_fn)"],
"X509_LOOKUP_meth_get_get_by_issuer_serial":["X509_LOOKUP_get_by_issuer_serial_fn","(const X509_LOOKUP_METHOD *)"],
"X509_LOOKUP_meth_set_get_by_fingerprint":["int","(X509_LOOKUP_METHOD *, X509_LOOKUP_get_by_fingerprint_fn)"],
"X509_LOOKUP_meth_get_get_by_fingerprint":["X509_LOOKUP_get_by_fingerprint_fn","(const X509_LOOKUP_METHOD *)"],
"X509_LOOKUP_meth_set_get_by_alias":["int","(X509_LOOKUP_METHOD *, X509_LOOKUP_get_by_alias_fn)"],
"X509_LOOKUP_meth_get_get_by_alias":["X509_LOOKUP_get_by_alias_fn","(const X509_LOOKUP_METHOD *)"],
"X509_STORE_add_cert":["int","(X509_STORE *, X509 *)"],
"X509_STORE_add_crl":["int","(X509_STORE *, X509_CRL *)"],
"X509_STORE_CTX_get_by_subject":["int","(X509_STORE_CTX *, X509_LOOKUP_TYPE, X509_NAME *, X509_OBJECT *)"],
"X509_STORE_CTX_get_obj_by_subject":["X509_OBJECT *","(X509_STORE_CTX *, X509_LOOKUP_TYPE, X509_NAME *)"],
"X509_LOOKUP_ctrl":["int","(X509_LOOKUP *, int, const char *, long, char **)"],
"X509_load_cert_file":["int","(X509_LOOKUP *, const char *, int)"],
"X509_load_crl_file":["int","(X509_LOOKUP *, const char *, int)"],
"X509_load_cert_crl_file":["int","(X509_LOOKUP *, const char *, int)"],
"X509_LOOKUP_new":["X509_LOOKUP *","(X509_LOOKUP_METHOD *)"],
"X509_LOOKUP_free":["void","(X509_LOOKUP *)"],
"X509_LOOKUP_init":["int","(X509_LOOKUP *)"],
"X509_LOOKUP_by_subject":["int","(X509_LOOKUP *, X509_LOOKUP_TYPE, X509_NAME *, X509_OBJECT *)"],
"X509_LOOKUP_by_issuer_serial":["int","(X509_LOOKUP *, X509_LOOKUP_TYPE, X509_NAME *, ASN1_INTEGER *, X509_OBJECT *)"],
"X509_LOOKUP_by_fingerprint":["int","(X509_LOOKUP *, X509_LOOKUP_TYPE, const unsigned char *, int, X509_OBJECT *)"],
"X509_LOOKUP_by_alias":["int","(X509_LOOKUP *, X509_LOOKUP_TYPE, const char *, int, X509_OBJECT *)"],
"X509_LOOKUP_set_method_data":["int","(X509_LOOKUP *, void *)"],
"X509_LOOKUP_get_method_data":["void *","(const X509_LOOKUP *)"],
"X509_LOOKUP_get_store":["X509_STORE *","(const X509_LOOKUP *)"],
"X509_LOOKUP_shutdown":["int","(X509_LOOKUP *)"],
"X509_STORE_load_locations":["int","(X509_STORE *, const char *, const char *)"],
"X509_STORE_set_default_paths":["int","(X509_STORE *)"],
"X509_STORE_CTX_set_ex_data":["int","(X509_STORE_CTX *, int, void *)"],
"X509_STORE_CTX_get_ex_data":["void *","(X509_STORE_CTX *, int)"],
"X509_STORE_CTX_get_error":["int","(X509_STORE_CTX *)"],
"X509_STORE_CTX_set_error":["void","(X509_STORE_CTX *, int)"],
"X509_STORE_CTX_get_error_depth":["int","(X509_STORE_CTX *)"],
"X509_STORE_CTX_set_error_depth":["void","(X509_STORE_CTX *, int)"],
"X509_STORE_CTX_get_current_cert":["X509 *","(X509_STORE_CTX *)"],
"X509_STORE_CTX_set_current_cert":["void","(X509_STORE_CTX *, X509 *)"],
"X509_STORE_CTX_get0_current_issuer":["X509 *","(X509_STORE_CTX *)"],
"X509_STORE_CTX_get0_current_crl":["X509_CRL *","(X509_STORE_CTX *)"],
"X509_STORE_CTX_get0_parent_ctx":["X509_STORE_CTX *","(X509_STORE_CTX *)"],
"X509_STORE_CTX_get0_chain":["struct stack_st_X509 *","(X509_STORE_CTX *)"],
"X509_STORE_CTX_get1_chain":["struct stack_st_X509 *","(X509_STORE_CTX *)"],
"X509_STORE_CTX_set_cert":["void","(X509_STORE_CTX *, X509 *)"],
"X509_STORE_CTX_set0_verified_chain":["void","(X509_STORE_CTX *, struct stack_st_X509 *)"],
"X509_STORE_CTX_set0_crls":["void","(X509_STORE_CTX *, struct stack_st_X509_CRL *)"],
"X509_STORE_CTX_set_purpose":["int","(X509_STORE_CTX *, int)"],
"X509_STORE_CTX_set_trust":["int","(X509_STORE_CTX *, int)"],
"X509_STORE_CTX_purpose_inherit":["int","(X509_STORE_CTX *, int, int, int)"],
"X509_STORE_CTX_set_flags":["void","(X509_STORE_CTX *, unsigned long)"],
"X509_STORE_CTX_set_time":["void","(X509_STORE_CTX *, unsigned long, time_t)"],
"X509_STORE_CTX_get0_policy_tree":["X509_POLICY_TREE *","(X509_STORE_CTX *)"],
"X509_STORE_CTX_get_explicit_policy":["int","(X509_STORE_CTX *)"],
"X509_STORE_CTX_get_num_untrusted":["int","(X509_STORE_CTX *)"],
"X509_STORE_CTX_get0_param":["X509_VERIFY_PARAM *","(X509_STORE_CTX *)"],
"X509_STORE_CTX_set0_param":["void","(X509_STORE_CTX *, X509_VERIFY_PARAM *)"],
"X509_STORE_CTX_set_default":["int","(X509_STORE_CTX *, const char *)"],
"X509_STORE_CTX_set0_dane":["void","(X509_STORE_CTX *, SSL_DANE *)"],
"X509_VERIFY_PARAM_new":["X509_VERIFY_PARAM *","()"],
"X509_VERIFY_PARAM_free":["void","(X509_VERIFY_PARAM *)"],
"X509_VERIFY_PARAM_inherit":["int","(X509_VERIFY_PARAM *, const X509_VERIFY_PARAM *)"],
"X509_VERIFY_PARAM_set1":["int","(X509_VERIFY_PARAM *, const X509_VERIFY_PARAM *)"],
"X509_VERIFY_PARAM_set1_name":["int","(X509_VERIFY_PARAM *, const char *)"],
"X509_VERIFY_PARAM_set_flags":["int","(X509_VERIFY_PARAM *, unsigned long)"],
"X509_VERIFY_PARAM_clear_flags":["int","(X509_VERIFY_PARAM *, unsigned long)"],
"X509_VERIFY_PARAM_get_flags":["unsigned long","(X509_VERIFY_PARAM *)"],
"X509_VERIFY_PARAM_set_purpose":["int","(X509_VERIFY_PARAM *, int)"],
"X509_VERIFY_PARAM_set_trust":["int","(X509_VERIFY_PARAM *, int)"],
"X509_VERIFY_PARAM_set_depth":["void","(X509_VERIFY_PARAM *, int)"],
"X509_VERIFY_PARAM_set_auth_level":["void","(X509_VERIFY_PARAM *, int)"],
"X509_VERIFY_PARAM_get_time":["time_t","(const X509_VERIFY_PARAM *)"],
"X509_VERIFY_PARAM_set_time":["void","(X509_VERIFY_PARAM *, time_t)"],
"X509_VERIFY_PARAM_add0_policy":["int","(X509_VERIFY_PARAM *, ASN1_OBJECT *)"],
"X509_VERIFY_PARAM_set1_policies":["int","(X509_VERIFY_PARAM *, struct stack_st_ASN1_OBJECT *)"],
"X509_VERIFY_PARAM_set_inh_flags":["int","(X509_VERIFY_PARAM *, int)"],
"X509_VERIFY_PARAM_get_inh_flags":["int","(const X509_VERIFY_PARAM *)"],
"X509_VERIFY_PARAM_set1_host":["int","(X509_VERIFY_PARAM *, const char *, int)"],
"X509_VERIFY_PARAM_add1_host":["int","(X509_VERIFY_PARAM *, const char *, int)"],
"X509_VERIFY_PARAM_set_hostflags":["void","(X509_VERIFY_PARAM *, unsigned int)"],
"X509_VERIFY_PARAM_get_hostflags":["unsigned int","(const X509_VERIFY_PARAM *)"],
"X509_VERIFY_PARAM_get0_peername":["char *","(X509_VERIFY_PARAM *)"],
"X509_VERIFY_PARAM_move_peername":["void","(X509_VERIFY_PARAM *, X509_VERIFY_PARAM *)"],
"X509_VERIFY_PARAM_set1_email":["int","(X509_VERIFY_PARAM *, const char *, int)"],
"X509_VERIFY_PARAM_set1_ip":["int","(X509_VERIFY_PARAM *, const unsigned char *, int)"],
"X509_VERIFY_PARAM_set1_ip_asc":["int","(X509_VERIFY_PARAM *, const char *)"],
"X509_VERIFY_PARAM_get_depth":["int","(const X509_VERIFY_PARAM *)"],
"X509_VERIFY_PARAM_get_auth_level":["int","(const X509_VERIFY_PARAM *)"],
"X509_VERIFY_PARAM_get0_name":["const char *","(const X509_VERIFY_PARAM *)"],
"X509_VERIFY_PARAM_add0_table":["int","(X509_VERIFY_PARAM *)"],
"X509_VERIFY_PARAM_get_count":["int","()"],
"X509_VERIFY_PARAM_get0":["const X509_VERIFY_PARAM *","(int)"],
"X509_VERIFY_PARAM_lookup":["const X509_VERIFY_PARAM *","(const char *)"],
"X509_VERIFY_PARAM_table_cleanup":["void","()"],
"X509_policy_check":["int","(X509_POLICY_TREE **, int *, struct stack_st_X509 *, struct stack_st_ASN1_OBJECT *, unsigned int)"],
"X509_policy_tree_free":["void","(X509_POLICY_TREE *)"],
"X509_policy_tree_level_count":["int","(const X509_POLICY_TREE *)"],
"X509_policy_tree_get0_level":["X509_POLICY_LEVEL *","(const X509_POLICY_TREE *, int)"],
"X509_policy_tree_get0_policies":["struct stack_st_X509_POLICY_NODE *","(const X509_POLICY_TREE *)"],
"X509_policy_tree_get0_user_policies":["struct stack_st_X509_POLICY_NODE *","(const X509_POLICY_TREE *)"],
"X509_policy_level_node_count":["int","(X509_POLICY_LEVEL *)"],
"X509_policy_level_get0_node":["X509_POLICY_NODE *","(X509_POLICY_LEVEL *, int)"],
"X509_policy_node_get0_policy":["const ASN1_OBJECT *","(const X509_POLICY_NODE *)"],
"X509_policy_node_get0_qualifiers":["struct stack_st_POLICYQUALINFO *","(const X509_POLICY_NODE *)"],
"X509_policy_node_get0_parent":["const X509_POLICY_NODE *","(const X509_POLICY_NODE *)"],
"ERR_load_PKCS7_strings":["int","()"],
"sk_PKCS7_SIGNER_INFO_num":["int","(const struct stack_st_PKCS7_SIGNER_INFO *)"],
"sk_PKCS7_SIGNER_INFO_value":["PKCS7_SIGNER_INFO *","(const struct stack_st_PKCS7_SIGNER_INFO *, int)"],
"sk_PKCS7_SIGNER_INFO_new":["struct stack_st_PKCS7_SIGNER_INFO *","(sk_PKCS7_SIGNER_INFO_compfunc)"],
"sk_PKCS7_SIGNER_INFO_new_null":["struct stack_st_PKCS7_SIGNER_INFO *","()"],
"sk_PKCS7_SIGNER_INFO_new_reserve":["struct stack_st_PKCS7_SIGNER_INFO *","(sk_PKCS7_SIGNER_INFO_compfunc, int)"],
"sk_PKCS7_SIGNER_INFO_reserve":["int","(struct stack_st_PKCS7_SIGNER_INFO *, int)"],
"sk_PKCS7_SIGNER_INFO_free":["void","(struct stack_st_PKCS7_SIGNER_INFO *)"],
"sk_PKCS7_SIGNER_INFO_zero":["void","(struct stack_st_PKCS7_SIGNER_INFO *)"],
"sk_PKCS7_SIGNER_INFO_delete":["PKCS7_SIGNER_INFO *","(struct stack_st_PKCS7_SIGNER_INFO *, int)"],
"sk_PKCS7_SIGNER_INFO_delete_ptr":["PKCS7_SIGNER_INFO *","(struct stack_st_PKCS7_SIGNER_INFO *, PKCS7_SIGNER_INFO *)"],
"sk_PKCS7_SIGNER_INFO_push":["int","(struct stack_st_PKCS7_SIGNER_INFO *, PKCS7_SIGNER_INFO *)"],
"sk_PKCS7_SIGNER_INFO_unshift":["int","(struct stack_st_PKCS7_SIGNER_INFO *, PKCS7_SIGNER_INFO *)"],
"sk_PKCS7_SIGNER_INFO_pop":["PKCS7_SIGNER_INFO *","(struct stack_st_PKCS7_SIGNER_INFO *)"],
"sk_PKCS7_SIGNER_INFO_shift":["PKCS7_SIGNER_INFO *","(struct stack_st_PKCS7_SIGNER_INFO *)"],
"sk_PKCS7_SIGNER_INFO_pop_free":["void","(struct stack_st_PKCS7_SIGNER_INFO *, sk_PKCS7_SIGNER_INFO_freefunc)"],
"sk_PKCS7_SIGNER_INFO_insert":["int","(struct stack_st_PKCS7_SIGNER_INFO *, PKCS7_SIGNER_INFO *, int)"],
"sk_PKCS7_SIGNER_INFO_set":["PKCS7_SIGNER_INFO *","(struct stack_st_PKCS7_SIGNER_INFO *, int, PKCS7_SIGNER_INFO *)"],
"sk_PKCS7_SIGNER_INFO_find":["int","(struct stack_st_PKCS7_SIGNER_INFO *, PKCS7_SIGNER_INFO *)"],
"sk_PKCS7_SIGNER_INFO_find_ex":["int","(struct stack_st_PKCS7_SIGNER_INFO *, PKCS7_SIGNER_INFO *)"],
"sk_PKCS7_SIGNER_INFO_sort":["void","(struct stack_st_PKCS7_SIGNER_INFO *)"],
"sk_PKCS7_SIGNER_INFO_is_sorted":["int","(const struct stack_st_PKCS7_SIGNER_INFO *)"],
"sk_PKCS7_SIGNER_INFO_dup":["struct stack_st_PKCS7_SIGNER_INFO *","(const struct stack_st_PKCS7_SIGNER_INFO *)"],
"sk_PKCS7_SIGNER_INFO_deep_copy":["struct stack_st_PKCS7_SIGNER_INFO *","(const struct stack_st_PKCS7_SIGNER_INFO *, sk_PKCS7_SIGNER_INFO_copyfunc, sk_PKCS7_SIGNER_INFO_freefunc)"],
"sk_PKCS7_SIGNER_INFO_set_cmp_func":["sk_PKCS7_SIGNER_INFO_compfunc","(struct stack_st_PKCS7_SIGNER_INFO *, sk_PKCS7_SIGNER_INFO_compfunc)"],
"sk_PKCS7_RECIP_INFO_num":["int","(const struct stack_st_PKCS7_RECIP_INFO *)"],
"sk_PKCS7_RECIP_INFO_value":["PKCS7_RECIP_INFO *","(const struct stack_st_PKCS7_RECIP_INFO *, int)"],
"sk_PKCS7_RECIP_INFO_new":["struct stack_st_PKCS7_RECIP_INFO *","(sk_PKCS7_RECIP_INFO_compfunc)"],
"sk_PKCS7_RECIP_INFO_new_null":["struct stack_st_PKCS7_RECIP_INFO *","()"],
"sk_PKCS7_RECIP_INFO_new_reserve":["struct stack_st_PKCS7_RECIP_INFO *","(sk_PKCS7_RECIP_INFO_compfunc, int)"],
"sk_PKCS7_RECIP_INFO_reserve":["int","(struct stack_st_PKCS7_RECIP_INFO *, int)"],
"sk_PKCS7_RECIP_INFO_free":["void","(struct stack_st_PKCS7_RECIP_INFO *)"],
"sk_PKCS7_RECIP_INFO_zero":["void","(struct stack_st_PKCS7_RECIP_INFO *)"],
"sk_PKCS7_RECIP_INFO_delete":["PKCS7_RECIP_INFO *","(struct stack_st_PKCS7_RECIP_INFO *, int)"],
"sk_PKCS7_RECIP_INFO_delete_ptr":["PKCS7_RECIP_INFO *","(struct stack_st_PKCS7_RECIP_INFO *, PKCS7_RECIP_INFO *)"],
"sk_PKCS7_RECIP_INFO_push":["int","(struct stack_st_PKCS7_RECIP_INFO *, PKCS7_RECIP_INFO *)"],
"sk_PKCS7_RECIP_INFO_unshift":["int","(struct stack_st_PKCS7_RECIP_INFO *, PKCS7_RECIP_INFO *)"],
"sk_PKCS7_RECIP_INFO_pop":["PKCS7_RECIP_INFO *","(struct stack_st_PKCS7_RECIP_INFO *)"],
"sk_PKCS7_RECIP_INFO_shift":["PKCS7_RECIP_INFO *","(struct stack_st_PKCS7_RECIP_INFO *)"],
"sk_PKCS7_RECIP_INFO_pop_free":["void","(struct stack_st_PKCS7_RECIP_INFO *, sk_PKCS7_RECIP_INFO_freefunc)"],
"sk_PKCS7_RECIP_INFO_insert":["int","(struct stack_st_PKCS7_RECIP_INFO *, PKCS7_RECIP_INFO *, int)"],
"sk_PKCS7_RECIP_INFO_set":["PKCS7_RECIP_INFO *","(struct stack_st_PKCS7_RECIP_INFO *, int, PKCS7_RECIP_INFO *)"],
"sk_PKCS7_RECIP_INFO_find":["int","(struct stack_st_PKCS7_RECIP_INFO *, PKCS7_RECIP_INFO *)"],
"sk_PKCS7_RECIP_INFO_find_ex":["int","(struct stack_st_PKCS7_RECIP_INFO *, PKCS7_RECIP_INFO *)"],
"sk_PKCS7_RECIP_INFO_sort":["void","(struct stack_st_PKCS7_RECIP_INFO *)"],
"sk_PKCS7_RECIP_INFO_is_sorted":["int","(const struct stack_st_PKCS7_RECIP_INFO *)"],
"sk_PKCS7_RECIP_INFO_dup":["struct stack_st_PKCS7_RECIP_INFO *","(const struct stack_st_PKCS7_RECIP_INFO *)"],
"sk_PKCS7_RECIP_INFO_deep_copy":["struct stack_st_PKCS7_RECIP_INFO *","(const struct stack_st_PKCS7_RECIP_INFO *, sk_PKCS7_RECIP_INFO_copyfunc, sk_PKCS7_RECIP_INFO_freefunc)"],
"sk_PKCS7_RECIP_INFO_set_cmp_func":["sk_PKCS7_RECIP_INFO_compfunc","(struct stack_st_PKCS7_RECIP_INFO *, sk_PKCS7_RECIP_INFO_compfunc)"],
"sk_PKCS7_num":["int","(const struct stack_st_PKCS7 *)"],
"sk_PKCS7_value":["PKCS7 *","(const struct stack_st_PKCS7 *, int)"],
"sk_PKCS7_new":["struct stack_st_PKCS7 *","(sk_PKCS7_compfunc)"],
"sk_PKCS7_new_null":["struct stack_st_PKCS7 *","()"],
"sk_PKCS7_new_reserve":["struct stack_st_PKCS7 *","(sk_PKCS7_compfunc, int)"],
"sk_PKCS7_reserve":["int","(struct stack_st_PKCS7 *, int)"],
"sk_PKCS7_free":["void","(struct stack_st_PKCS7 *)"],
"sk_PKCS7_zero":["void","(struct stack_st_PKCS7 *)"],
"sk_PKCS7_delete":["PKCS7 *","(struct stack_st_PKCS7 *, int)"],
"sk_PKCS7_delete_ptr":["PKCS7 *","(struct stack_st_PKCS7 *, PKCS7 *)"],
"sk_PKCS7_push":["int","(struct stack_st_PKCS7 *, PKCS7 *)"],
"sk_PKCS7_unshift":["int","(struct stack_st_PKCS7 *, PKCS7 *)"],
"sk_PKCS7_pop":["PKCS7 *","(struct stack_st_PKCS7 *)"],
"sk_PKCS7_shift":["PKCS7 *","(struct stack_st_PKCS7 *)"],
"sk_PKCS7_pop_free":["void","(struct stack_st_PKCS7 *, sk_PKCS7_freefunc)"],
"sk_PKCS7_insert":["int","(struct stack_st_PKCS7 *, PKCS7 *, int)"],
"sk_PKCS7_set":["PKCS7 *","(struct stack_st_PKCS7 *, int, PKCS7 *)"],
"sk_PKCS7_find":["int","(struct stack_st_PKCS7 *, PKCS7 *)"],
"sk_PKCS7_find_ex":["int","(struct stack_st_PKCS7 *, PKCS7 *)"],
"sk_PKCS7_sort":["void","(struct stack_st_PKCS7 *)"],
"sk_PKCS7_is_sorted":["int","(const struct stack_st_PKCS7 *)"],
"sk_PKCS7_dup":["struct stack_st_PKCS7 *","(const struct stack_st_PKCS7 *)"],
"sk_PKCS7_deep_copy":["struct stack_st_PKCS7 *","(const struct stack_st_PKCS7 *, sk_PKCS7_copyfunc, sk_PKCS7_freefunc)"],
"sk_PKCS7_set_cmp_func":["sk_PKCS7_compfunc","(struct stack_st_PKCS7 *, sk_PKCS7_compfunc)"],
"PKCS7_ISSUER_AND_SERIAL_new":["PKCS7_ISSUER_AND_SERIAL *","()"],
"PKCS7_ISSUER_AND_SERIAL_free":["void","(PKCS7_ISSUER_AND_SERIAL *)"],
"d2i_PKCS7_ISSUER_AND_SERIAL":["PKCS7_ISSUER_AND_SERIAL *","(PKCS7_ISSUER_AND_SERIAL **, const unsigned char **, long)"],
"i2d_PKCS7_ISSUER_AND_SERIAL":["int","(PKCS7_ISSUER_AND_SERIAL *, unsigned char **)"],
"PKCS7_ISSUER_AND_SERIAL_digest":["int","(PKCS7_ISSUER_AND_SERIAL *, const EVP_MD *, unsigned char *, unsigned int *)"],
"d2i_PKCS7_fp":["PKCS7 *","(int *, PKCS7 **)"],
"i2d_PKCS7_fp":["int","(int *, PKCS7 *)"],
"PKCS7_dup":["PKCS7 *","(PKCS7 *)"],
"d2i_PKCS7_bio":["PKCS7 *","(BIO *, PKCS7 **)"],
"i2d_PKCS7_bio":["int","(BIO *, PKCS7 *)"],
"i2d_PKCS7_bio_stream":["int","(BIO *, PKCS7 *, BIO *, int)"],
"PEM_write_bio_PKCS7_stream":["int","(BIO *, PKCS7 *, BIO *, int)"],
"PKCS7_SIGNER_INFO_new":["PKCS7_SIGNER_INFO *","()"],
"PKCS7_SIGNER_INFO_free":["void","(PKCS7_SIGNER_INFO *)"],
"d2i_PKCS7_SIGNER_INFO":["PKCS7_SIGNER_INFO *","(PKCS7_SIGNER_INFO **, const unsigned char **, long)"],
"i2d_PKCS7_SIGNER_INFO":["int","(PKCS7_SIGNER_INFO *, unsigned char **)"],
"PKCS7_RECIP_INFO_new":["PKCS7_RECIP_INFO *","()"],
"PKCS7_RECIP_INFO_free":["void","(PKCS7_RECIP_INFO *)"],
"d2i_PKCS7_RECIP_INFO":["PKCS7_RECIP_INFO *","(PKCS7_RECIP_INFO **, const unsigned char **, long)"],
"i2d_PKCS7_RECIP_INFO":["int","(PKCS7_RECIP_INFO *, unsigned char **)"],
"PKCS7_SIGNED_new":["PKCS7_SIGNED *","()"],
"PKCS7_SIGNED_free":["void","(PKCS7_SIGNED *)"],
"d2i_PKCS7_SIGNED":["PKCS7_SIGNED *","(PKCS7_SIGNED **, const unsigned char **, long)"],
"i2d_PKCS7_SIGNED":["int","(PKCS7_SIGNED *, unsigned char **)"],
"PKCS7_ENC_CONTENT_new":["PKCS7_ENC_CONTENT *","()"],
"PKCS7_ENC_CONTENT_free":["void","(PKCS7_ENC_CONTENT *)"],
"d2i_PKCS7_ENC_CONTENT":["PKCS7_ENC_CONTENT *","(PKCS7_ENC_CONTENT **, const unsigned char **, long)"],
"i2d_PKCS7_ENC_CONTENT":["int","(PKCS7_ENC_CONTENT *, unsigned char **)"],
"PKCS7_ENVELOPE_new":["PKCS7_ENVELOPE *","()"],
"PKCS7_ENVELOPE_free":["void","(PKCS7_ENVELOPE *)"],
"d2i_PKCS7_ENVELOPE":["PKCS7_ENVELOPE *","(PKCS7_ENVELOPE **, const unsigned char **, long)"],
"i2d_PKCS7_ENVELOPE":["int","(PKCS7_ENVELOPE *, unsigned char **)"],
"PKCS7_SIGN_ENVELOPE_new":["PKCS7_SIGN_ENVELOPE *","()"],
"PKCS7_SIGN_ENVELOPE_free":["void","(PKCS7_SIGN_ENVELOPE *)"],
"d2i_PKCS7_SIGN_ENVELOPE":["PKCS7_SIGN_ENVELOPE *","(PKCS7_SIGN_ENVELOPE **, const unsigned char **, long)"],
"i2d_PKCS7_SIGN_ENVELOPE":["int","(PKCS7_SIGN_ENVELOPE *, unsigned char **)"],
"PKCS7_DIGEST_new":["PKCS7_DIGEST *","()"],
"PKCS7_DIGEST_free":["void","(PKCS7_DIGEST *)"],
"d2i_PKCS7_DIGEST":["PKCS7_DIGEST *","(PKCS7_DIGEST **, const unsigned char **, long)"],
"i2d_PKCS7_DIGEST":["int","(PKCS7_DIGEST *, unsigned char **)"],
"PKCS7_ENCRYPT_new":["PKCS7_ENCRYPT *","()"],
"PKCS7_ENCRYPT_free":["void","(PKCS7_ENCRYPT *)"],
"d2i_PKCS7_ENCRYPT":["PKCS7_ENCRYPT *","(PKCS7_ENCRYPT **, const unsigned char **, long)"],
"i2d_PKCS7_ENCRYPT":["int","(PKCS7_ENCRYPT *, unsigned char **)"],
"PKCS7_new":["PKCS7 *","()"],
"PKCS7_free":["void","(PKCS7 *)"],
"d2i_PKCS7":["PKCS7 *","(PKCS7 **, const unsigned char **, long)"],
"i2d_PKCS7":["int","(PKCS7 *, unsigned char **)"],
"i2d_PKCS7_NDEF":["int","(PKCS7 *, unsigned char **)"],
"PKCS7_print_ctx":["int","(BIO *, PKCS7 *, int, const ASN1_PCTX *)"],
"PKCS7_ctrl":["long","(PKCS7 *, int, long, char *)"],
"PKCS7_set_type":["int","(PKCS7 *, int)"],
"PKCS7_set0_type_other":["int","(PKCS7 *, int, ASN1_TYPE *)"],
"PKCS7_set_content":["int","(PKCS7 *, PKCS7 *)"],
"PKCS7_SIGNER_INFO_set":["int","(PKCS7_SIGNER_INFO *, X509 *, EVP_PKEY *, const EVP_MD *)"],
"PKCS7_SIGNER_INFO_sign":["int","(PKCS7_SIGNER_INFO *)"],
"PKCS7_add_signer":["int","(PKCS7 *, PKCS7_SIGNER_INFO *)"],
"PKCS7_add_certificate":["int","(PKCS7 *, X509 *)"],
"PKCS7_add_crl":["int","(PKCS7 *, X509_CRL *)"],
"PKCS7_content_new":["int","(PKCS7 *, int)"],
"PKCS7_dataVerify":["int","(X509_STORE *, X509_STORE_CTX *, BIO *, PKCS7 *, PKCS7_SIGNER_INFO *)"],
"PKCS7_signatureVerify":["int","(BIO *, PKCS7 *, PKCS7_SIGNER_INFO *, X509 *)"],
"PKCS7_dataInit":["BIO *","(PKCS7 *, BIO *)"],
"PKCS7_dataFinal":["int","(PKCS7 *, BIO *)"],
"PKCS7_dataDecode":["BIO *","(PKCS7 *, EVP_PKEY *, BIO *, X509 *)"],
"PKCS7_add_signature":["PKCS7_SIGNER_INFO *","(PKCS7 *, X509 *, EVP_PKEY *, const EVP_MD *)"],
"PKCS7_cert_from_signer_info":["X509 *","(PKCS7 *, PKCS7_SIGNER_INFO *)"],
"PKCS7_set_digest":["int","(PKCS7 *, const EVP_MD *)"],
"PKCS7_get_signer_info":["struct stack_st_PKCS7_SIGNER_INFO *","(PKCS7 *)"],
"PKCS7_add_recipient":["PKCS7_RECIP_INFO *","(PKCS7 *, X509 *)"],
"PKCS7_SIGNER_INFO_get0_algs":["void","(PKCS7_SIGNER_INFO *, EVP_PKEY **, X509_ALGOR **, X509_ALGOR **)"],
"PKCS7_RECIP_INFO_get0_alg":["void","(PKCS7_RECIP_INFO *, X509_ALGOR **)"],
"PKCS7_add_recipient_info":["int","(PKCS7 *, PKCS7_RECIP_INFO *)"],
"PKCS7_RECIP_INFO_set":["int","(PKCS7_RECIP_INFO *, X509 *)"],
"PKCS7_set_cipher":["int","(PKCS7 *, const EVP_CIPHER *)"],
"PKCS7_stream":["int","(unsigned char ***, PKCS7 *)"],
"PKCS7_get_issuer_and_serial":["PKCS7_ISSUER_AND_SERIAL *","(PKCS7 *, int)"],
"PKCS7_digest_from_attributes":["ASN1_OCTET_STRING *","(struct stack_st_X509_ATTRIBUTE *)"],
"PKCS7_add_signed_attribute":["int","(PKCS7_SIGNER_INFO *, int, int, void *)"],
"PKCS7_add_attribute":["int","(PKCS7_SIGNER_INFO *, int, int, void *)"],
"PKCS7_get_attribute":["ASN1_TYPE *","(PKCS7_SIGNER_INFO *, int)"],
"PKCS7_get_signed_attribute":["ASN1_TYPE *","(PKCS7_SIGNER_INFO *, int)"],
"PKCS7_set_signed_attributes":["int","(PKCS7_SIGNER_INFO *, struct stack_st_X509_ATTRIBUTE *)"],
"PKCS7_set_attributes":["int","(PKCS7_SIGNER_INFO *, struct stack_st_X509_ATTRIBUTE *)"],
"PKCS7_sign":["PKCS7 *","(X509 *, EVP_PKEY *, struct stack_st_X509 *, BIO *, int)"],
"PKCS7_sign_add_signer":["PKCS7_SIGNER_INFO *","(PKCS7 *, X509 *, EVP_PKEY *, const EVP_MD *, int)"],
"PKCS7_final":["int","(PKCS7 *, BIO *, int)"],
"PKCS7_verify":["int","(PKCS7 *, struct stack_st_X509 *, X509_STORE *, BIO *, BIO *, int)"],
"PKCS7_get0_signers":["struct stack_st_X509 *","(PKCS7 *, struct stack_st_X509 *, int)"],
"PKCS7_encrypt":["PKCS7 *","(struct stack_st_X509 *, BIO *, const EVP_CIPHER *, int)"],
"PKCS7_decrypt":["int","(PKCS7 *, EVP_PKEY *, X509 *, BIO *, int)"],
"PKCS7_add_attrib_smimecap":["int","(PKCS7_SIGNER_INFO *, struct stack_st_X509_ALGOR *)"],
"PKCS7_get_smimecap":["struct stack_st_X509_ALGOR *","(PKCS7_SIGNER_INFO *)"],
"PKCS7_simple_smimecap":["int","(struct stack_st_X509_ALGOR *, int, int)"],
"PKCS7_add_attrib_content_type":["int","(PKCS7_SIGNER_INFO *, ASN1_OBJECT *)"],
"PKCS7_add0_attrib_signing_time":["int","(PKCS7_SIGNER_INFO *, ASN1_TIME *)"],
"PKCS7_add1_attrib_digest":["int","(PKCS7_SIGNER_INFO *, const unsigned char *, int)"],
"SMIME_write_PKCS7":["int","(BIO *, PKCS7 *, BIO *, int)"],
"SMIME_read_PKCS7":["PKCS7 *","(BIO *, BIO **)"],
"BIO_new_PKCS7":["BIO *","(BIO *, PKCS7 *)"],
"X509_CRL_set_default_method":["void","(const X509_CRL_METHOD *)"],
"X509_CRL_METHOD_new":["X509_CRL_METHOD *","(int (*)(X509_CRL *), int (*)(X509_CRL *), int (*)(X509_CRL *, X509_REVOKED **, ASN1_INTEGER *, X509_NAME *), int (*)(X509_CRL *, EVP_PKEY *))"],
"X509_CRL_METHOD_free":["void","(X509_CRL_METHOD *)"],
"X509_CRL_set_meth_data":["void","(X509_CRL *, void *)"],
"X509_CRL_get_meth_data":["void *","(X509_CRL *)"],
"X509_verify_cert_error_string":["const char *","(long)"],
"X509_verify":["int","(X509 *, EVP_PKEY *)"],
"X509_REQ_verify":["int","(X509_REQ *, EVP_PKEY *)"],
"X509_CRL_verify":["int","(X509_CRL *, EVP_PKEY *)"],
"NETSCAPE_SPKI_verify":["int","(NETSCAPE_SPKI *, EVP_PKEY *)"],
"NETSCAPE_SPKI_b64_decode":["NETSCAPE_SPKI *","(const char *, int)"],
"NETSCAPE_SPKI_b64_encode":["char *","(NETSCAPE_SPKI *)"],
"NETSCAPE_SPKI_get_pubkey":["EVP_PKEY *","(NETSCAPE_SPKI *)"],
"NETSCAPE_SPKI_set_pubkey":["int","(NETSCAPE_SPKI *, EVP_PKEY *)"],
"NETSCAPE_SPKI_print":["int","(BIO *, NETSCAPE_SPKI *)"],
"X509_signature_dump":["int","(BIO *, const ASN1_STRING *, int)"],
"X509_signature_print":["int","(BIO *, const X509_ALGOR *, const ASN1_STRING *)"],
"X509_sign":["int","(X509 *, EVP_PKEY *, const EVP_MD *)"],
"X509_sign_ctx":["int","(X509 *, EVP_MD_CTX *)"],
"X509_http_nbio":["int","(OCSP_REQ_CTX *, X509 **)"],
"X509_REQ_sign":["int","(X509_REQ *, EVP_PKEY *, const EVP_MD *)"],
"X509_REQ_sign_ctx":["int","(X509_REQ *, EVP_MD_CTX *)"],
"X509_CRL_sign":["int","(X509_CRL *, EVP_PKEY *, const EVP_MD *)"],
"X509_CRL_sign_ctx":["int","(X509_CRL *, EVP_MD_CTX *)"],
"X509_CRL_http_nbio":["int","(OCSP_REQ_CTX *, X509_CRL **)"],
"NETSCAPE_SPKI_sign":["int","(NETSCAPE_SPKI *, EVP_PKEY *, const EVP_MD *)"],
"X509_pubkey_digest":["int","(const X509 *, const EVP_MD *, unsigned char *, unsigned int *)"],
"X509_digest":["int","(const X509 *, const EVP_MD *, unsigned char *, unsigned int *)"],
"X509_CRL_digest":["int","(const X509_CRL *, const EVP_MD *, unsigned char *, unsigned int *)"],
"X509_REQ_digest":["int","(const X509_REQ *, const EVP_MD *, unsigned char *, unsigned int *)"],
"X509_NAME_digest":["int","(const X509_NAME *, const EVP_MD *, unsigned char *, unsigned int *)"],
"d2i_X509_fp":["X509 *","(int *, X509 **)"],
"i2d_X509_fp":["int","(int *, X509 *)"],
"d2i_X509_CRL_fp":["X509_CRL *","(int *, X509_CRL **)"],
"i2d_X509_CRL_fp":["int","(int *, X509_CRL *)"],
"d2i_X509_REQ_fp":["X509_REQ *","(int *, X509_REQ **)"],
"i2d_X509_REQ_fp":["int","(int *, X509_REQ *)"],
"d2i_RSAPrivateKey_fp":["RSA *","(int *, RSA **)"],
"i2d_RSAPrivateKey_fp":["int","(int *, RSA *)"],
"d2i_RSAPublicKey_fp":["RSA *","(int *, RSA **)"],
"i2d_RSAPublicKey_fp":["int","(int *, RSA *)"],
"d2i_RSA_PUBKEY_fp":["RSA *","(int *, RSA **)"],
"i2d_RSA_PUBKEY_fp":["int","(int *, RSA *)"],
"d2i_DSA_PUBKEY_fp":["DSA *","(int *, DSA **)"],
"i2d_DSA_PUBKEY_fp":["int","(int *, DSA *)"],
"d2i_DSAPrivateKey_fp":["DSA *","(int *, DSA **)"],
"i2d_DSAPrivateKey_fp":["int","(int *, DSA *)"],
"d2i_EC_PUBKEY_fp":["EC_KEY *","(int *, EC_KEY **)"],
"i2d_EC_PUBKEY_fp":["int","(int *, EC_KEY *)"],
"d2i_ECPrivateKey_fp":["EC_KEY *","(int *, EC_KEY **)"],
"i2d_ECPrivateKey_fp":["int","(int *, EC_KEY *)"],
"d2i_PKCS8_fp":["X509_SIG *","(int *, X509_SIG **)"],
"i2d_PKCS8_fp":["int","(int *, X509_SIG *)"],
"d2i_PKCS8_PRIV_KEY_INFO_fp":["PKCS8_PRIV_KEY_INFO *","(int *, PKCS8_PRIV_KEY_INFO **)"],
"i2d_PKCS8_PRIV_KEY_INFO_fp":["int","(int *, PKCS8_PRIV_KEY_INFO *)"],
"i2d_PKCS8PrivateKeyInfo_fp":["int","(int *, EVP_PKEY *)"],
"i2d_PrivateKey_fp":["int","(int *, EVP_PKEY *)"],
"d2i_PrivateKey_fp":["EVP_PKEY *","(int *, EVP_PKEY **)"],
"i2d_PUBKEY_fp":["int","(int *, EVP_PKEY *)"],
"d2i_PUBKEY_fp":["EVP_PKEY *","(int *, EVP_PKEY **)"],
"d2i_X509_bio":["X509 *","(BIO *, X509 **)"],
"i2d_X509_bio":["int","(BIO *, X509 *)"],
"d2i_X509_CRL_bio":["X509_CRL *","(BIO *, X509_CRL **)"],
"i2d_X509_CRL_bio":["int","(BIO *, X509_CRL *)"],
"d2i_X509_REQ_bio":["X509_REQ *","(BIO *, X509_REQ **)"],
"i2d_X509_REQ_bio":["int","(BIO *, X509_REQ *)"],
"d2i_RSAPrivateKey_bio":["RSA *","(BIO *, RSA **)"],
"i2d_RSAPrivateKey_bio":["int","(BIO *, RSA *)"],
"d2i_RSAPublicKey_bio":["RSA *","(BIO *, RSA **)"],
"i2d_RSAPublicKey_bio":["int","(BIO *, RSA *)"],
"d2i_RSA_PUBKEY_bio":["RSA *","(BIO *, RSA **)"],
"i2d_RSA_PUBKEY_bio":["int","(BIO *, RSA *)"],
"d2i_DSA_PUBKEY_bio":["DSA *","(BIO *, DSA **)"],
"i2d_DSA_PUBKEY_bio":["int","(BIO *, DSA *)"],
"d2i_DSAPrivateKey_bio":["DSA *","(BIO *, DSA **)"],
"i2d_DSAPrivateKey_bio":["int","(BIO *, DSA *)"],
"d2i_EC_PUBKEY_bio":["EC_KEY *","(BIO *, EC_KEY **)"],
"i2d_EC_PUBKEY_bio":["int","(BIO *, EC_KEY *)"],
"d2i_ECPrivateKey_bio":["EC_KEY *","(BIO *, EC_KEY **)"],
"i2d_ECPrivateKey_bio":["int","(BIO *, EC_KEY *)"],
"d2i_PKCS8_bio":["X509_SIG *","(BIO *, X509_SIG **)"],
"i2d_PKCS8_bio":["int","(BIO *, X509_SIG *)"],
"d2i_PKCS8_PRIV_KEY_INFO_bio":["PKCS8_PRIV_KEY_INFO *","(BIO *, PKCS8_PRIV_KEY_INFO **)"],
"i2d_PKCS8_PRIV_KEY_INFO_bio":["int","(BIO *, PKCS8_PRIV_KEY_INFO *)"],
"i2d_PKCS8PrivateKeyInfo_bio":["int","(BIO *, EVP_PKEY *)"],
"i2d_PrivateKey_bio":["int","(BIO *, EVP_PKEY *)"],
"d2i_PrivateKey_bio":["EVP_PKEY *","(BIO *, EVP_PKEY **)"],
"i2d_PUBKEY_bio":["int","(BIO *, EVP_PKEY *)"],
"d2i_PUBKEY_bio":["EVP_PKEY *","(BIO *, EVP_PKEY **)"],
"X509_dup":["X509 *","(X509 *)"],
"X509_ATTRIBUTE_dup":["X509_ATTRIBUTE *","(X509_ATTRIBUTE *)"],
"X509_EXTENSION_dup":["X509_EXTENSION *","(X509_EXTENSION *)"],
"X509_CRL_dup":["X509_CRL *","(X509_CRL *)"],
"X509_REVOKED_dup":["X509_REVOKED *","(X509_REVOKED *)"],
"X509_REQ_dup":["X509_REQ *","(X509_REQ *)"],
"X509_ALGOR_dup":["X509_ALGOR *","(X509_ALGOR *)"],
"X509_ALGOR_set0":["int","(X509_ALGOR *, ASN1_OBJECT *, int, void *)"],
"X509_ALGOR_get0":["void","(const ASN1_OBJECT **, int *, const void **, const X509_ALGOR *)"],
"X509_ALGOR_set_md":["void","(X509_ALGOR *, const EVP_MD *)"],
"X509_ALGOR_cmp":["int","(const X509_ALGOR *, const X509_ALGOR *)"],
"X509_NAME_dup":["X509_NAME *","(X509_NAME *)"],
"X509_NAME_ENTRY_dup":["X509_NAME_ENTRY *","(X509_NAME_ENTRY *)"],
"X509_cmp_time":["int","(const ASN1_TIME *, time_t *)"],
"X509_cmp_current_time":["int","(const ASN1_TIME *)"],
"X509_time_adj":["ASN1_TIME *","(ASN1_TIME *, long, time_t *)"],
"X509_time_adj_ex":["ASN1_TIME *","(ASN1_TIME *, int, long, time_t *)"],
"X509_gmtime_adj":["ASN1_TIME *","(ASN1_TIME *, long)"],
"X509_get_default_cert_area":["const char *","()"],
"X509_get_default_cert_dir":["const char *","()"],
"X509_get_default_cert_file":["const char *","()"],
"X509_get_default_cert_dir_env":["const char *","()"],
"X509_get_default_cert_file_env":["const char *","()"],
"X509_get_default_private_dir":["const char *","()"],
"X509_to_X509_REQ":["X509_REQ *","(X509 *, EVP_PKEY *, const EVP_MD *)"],
"X509_REQ_to_X509":["X509 *","(X509_REQ *, int, EVP_PKEY *)"],
"X509_ALGOR_new":["X509_ALGOR *","()"],
"X509_ALGOR_free":["void","(X509_ALGOR *)"],
"d2i_X509_ALGOR":["X509_ALGOR *","(X509_ALGOR **, const unsigned char **, long)"],
"i2d_X509_ALGOR":["int","(X509_ALGOR *, unsigned char **)"],
"d2i_X509_ALGORS":["X509_ALGORS *","(X509_ALGORS **, const unsigned char **, long)"],
"i2d_X509_ALGORS":["int","(X509_ALGORS *, unsigned char **)"],
"X509_VAL_new":["X509_VAL *","()"],
"X509_VAL_free":["void","(X509_VAL *)"],
"d2i_X509_VAL":["X509_VAL *","(X509_VAL **, const unsigned char **, long)"],
"i2d_X509_VAL":["int","(X509_VAL *, unsigned char **)"],
"X509_PUBKEY_new":["X509_PUBKEY *","()"],
"X509_PUBKEY_free":["void","(X509_PUBKEY *)"],
"d2i_X509_PUBKEY":["X509_PUBKEY *","(X509_PUBKEY **, const unsigned char **, long)"],
"i2d_X509_PUBKEY":["int","(X509_PUBKEY *, unsigned char **)"],
"X509_PUBKEY_set":["int","(X509_PUBKEY **, EVP_PKEY *)"],
"X509_PUBKEY_get0":["EVP_PKEY *","(X509_PUBKEY *)"],
"X509_PUBKEY_get":["EVP_PKEY *","(X509_PUBKEY *)"],
"X509_get_pubkey_parameters":["int","(EVP_PKEY *, struct stack_st_X509 *)"],
"X509_get_pathlen":["long","(X509 *)"],
"i2d_PUBKEY":["int","(EVP_PKEY *, unsigned char **)"],
"d2i_PUBKEY":["EVP_PKEY *","(EVP_PKEY **, const unsigned char **, long)"],
"i2d_RSA_PUBKEY":["int","(RSA *, unsigned char **)"],
"d2i_RSA_PUBKEY":["RSA *","(RSA **, const unsigned char **, long)"],
"i2d_DSA_PUBKEY":["int","(DSA *, unsigned char **)"],
"d2i_DSA_PUBKEY":["DSA *","(DSA **, const unsigned char **, long)"],
"i2d_EC_PUBKEY":["int","(EC_KEY *, unsigned char **)"],
"d2i_EC_PUBKEY":["EC_KEY *","(EC_KEY **, const unsigned char **, long)"],
"X509_SIG_new":["X509_SIG *","()"],
"X509_SIG_free":["void","(X509_SIG *)"],
"d2i_X509_SIG":["X509_SIG *","(X509_SIG **, const unsigned char **, long)"],
"i2d_X509_SIG":["int","(X509_SIG *, unsigned char **)"],
"X509_SIG_get0":["void","(const X509_SIG *, const X509_ALGOR **, const ASN1_OCTET_STRING **)"],
"X509_SIG_getm":["void","(X509_SIG *, X509_ALGOR **, ASN1_OCTET_STRING **)"],
"X509_REQ_INFO_new":["X509_REQ_INFO *","()"],
"X509_REQ_INFO_free":["void","(X509_REQ_INFO *)"],
"d2i_X509_REQ_INFO":["X509_REQ_INFO *","(X509_REQ_INFO **, const unsigned char **, long)"],
"i2d_X509_REQ_INFO":["int","(X509_REQ_INFO *, unsigned char **)"],
"X509_REQ_new":["X509_REQ *","()"],
"X509_REQ_free":["void","(X509_REQ *)"],
"d2i_X509_REQ":["X509_REQ *","(X509_REQ **, const unsigned char **, long)"],
"i2d_X509_REQ":["int","(X509_REQ *, unsigned char **)"],
"X509_ATTRIBUTE_new":["X509_ATTRIBUTE *","()"],
"X509_ATTRIBUTE_free":["void","(X509_ATTRIBUTE *)"],
"d2i_X509_ATTRIBUTE":["X509_ATTRIBUTE *","(X509_ATTRIBUTE **, const unsigned char **, long)"],
"i2d_X509_ATTRIBUTE":["int","(X509_ATTRIBUTE *, unsigned char **)"],
"X509_ATTRIBUTE_create":["X509_ATTRIBUTE *","(int, int, void *)"],
"X509_EXTENSION_new":["X509_EXTENSION *","()"],
"X509_EXTENSION_free":["void","(X509_EXTENSION *)"],
"d2i_X509_EXTENSION":["X509_EXTENSION *","(X509_EXTENSION **, const unsigned char **, long)"],
"i2d_X509_EXTENSION":["int","(X509_EXTENSION *, unsigned char **)"],
"d2i_X509_EXTENSIONS":["X509_EXTENSIONS *","(X509_EXTENSIONS **, const unsigned char **, long)"],
"i2d_X509_EXTENSIONS":["int","(X509_EXTENSIONS *, unsigned char **)"],
"X509_NAME_ENTRY_new":["X509_NAME_ENTRY *","()"],
"X509_NAME_ENTRY_free":["void","(X509_NAME_ENTRY *)"],
"d2i_X509_NAME_ENTRY":["X509_NAME_ENTRY *","(X509_NAME_ENTRY **, const unsigned char **, long)"],
"i2d_X509_NAME_ENTRY":["int","(X509_NAME_ENTRY *, unsigned char **)"],
"X509_NAME_new":["X509_NAME *","()"],
"X509_NAME_free":["void","(X509_NAME *)"],
"d2i_X509_NAME":["X509_NAME *","(X509_NAME **, const unsigned char **, long)"],
"i2d_X509_NAME":["int","(X509_NAME *, unsigned char **)"],
"X509_NAME_set":["int","(X509_NAME **, X509_NAME *)"],
"X509_CINF_new":["X509_CINF *","()"],
"X509_CINF_free":["void","(X509_CINF *)"],
"d2i_X509_CINF":["X509_CINF *","(X509_CINF **, const unsigned char **, long)"],
"i2d_X509_CINF":["int","(X509_CINF *, unsigned char **)"],
"X509_new":["X509 *","()"],
"X509_free":["void","(X509 *)"],
"d2i_X509":["X509 *","(X509 **, const unsigned char **, long)"],
"i2d_X509":["int","(X509 *, unsigned char **)"],
"X509_CERT_AUX_new":["X509_CERT_AUX *","()"],
"X509_CERT_AUX_free":["void","(X509_CERT_AUX *)"],
"d2i_X509_CERT_AUX":["X509_CERT_AUX *","(X509_CERT_AUX **, const unsigned char **, long)"],
"i2d_X509_CERT_AUX":["int","(X509_CERT_AUX *, unsigned char **)"],
"X509_set_ex_data":["int","(X509 *, int, void *)"],
"X509_get_ex_data":["void *","(X509 *, int)"],
"i2d_X509_AUX":["int","(X509 *, unsigned char **)"],
"d2i_X509_AUX":["X509 *","(X509 **, const unsigned char **, long)"],
"i2d_re_X509_tbs":["int","(X509 *, unsigned char **)"],
"X509_SIG_INFO_get":["int","(const X509_SIG_INFO *, int *, int *, int *, int *)"],
"X509_SIG_INFO_set":["void","(X509_SIG_INFO *, int, int, int, int)"],
"X509_get_signature_info":["int","(X509 *, int *, int *, int *, int *)"],
"X509_get0_signature":["void","(const ASN1_BIT_STRING **, const X509_ALGOR **, const X509 *)"],
"X509_get_signature_nid":["int","(const X509 *)"],
"X509_trusted":["int","(const X509 *)"],
"X509_alias_set1":["int","(X509 *, const unsigned char *, int)"],
"X509_keyid_set1":["int","(X509 *, const unsigned char *, int)"],
"X509_alias_get0":["unsigned char *","(X509 *, int *)"],
"X509_keyid_get0":["unsigned char *","(X509 *, int *)"],
"X509_TRUST_set_default":["int (*)(int, X509 *, int)","(int (*)(int, X509 *, int))"],
"X509_TRUST_set":["int","(int *, int)"],
"X509_add1_trust_object":["int","(X509 *, const ASN1_OBJECT *)"],
"X509_add1_reject_object":["int","(X509 *, const ASN1_OBJECT *)"],
"X509_trust_clear":["void","(X509 *)"],
"X509_reject_clear":["void","(X509 *)"],
"X509_get0_trust_objects":["struct stack_st_ASN1_OBJECT *","(X509 *)"],
"X509_get0_reject_objects":["struct stack_st_ASN1_OBJECT *","(X509 *)"],
"X509_REVOKED_new":["X509_REVOKED *","()"],
"X509_REVOKED_free":["void","(X509_REVOKED *)"],
"d2i_X509_REVOKED":["X509_REVOKED *","(X509_REVOKED **, const unsigned char **, long)"],
"i2d_X509_REVOKED":["int","(X509_REVOKED *, unsigned char **)"],
"X509_CRL_INFO_new":["X509_CRL_INFO *","()"],
"X509_CRL_INFO_free":["void","(X509_CRL_INFO *)"],
"d2i_X509_CRL_INFO":["X509_CRL_INFO *","(X509_CRL_INFO **, const unsigned char **, long)"],
"i2d_X509_CRL_INFO":["int","(X509_CRL_INFO *, unsigned char **)"],
"X509_CRL_new":["X509_CRL *","()"],
"X509_CRL_free":["void","(X509_CRL *)"],
"d2i_X509_CRL":["X509_CRL *","(X509_CRL **, const unsigned char **, long)"],
"i2d_X509_CRL":["int","(X509_CRL *, unsigned char **)"],
"X509_CRL_add0_revoked":["int","(X509_CRL *, X509_REVOKED *)"],
"X509_CRL_get0_by_serial":["int","(X509_CRL *, X509_REVOKED **, ASN1_INTEGER *)"],
"X509_CRL_get0_by_cert":["int","(X509_CRL *, X509_REVOKED **, X509 *)"],
"X509_PKEY_new":["X509_PKEY *","()"],
"X509_PKEY_free":["void","(X509_PKEY *)"],
"NETSCAPE_SPKI_new":["NETSCAPE_SPKI *","()"],
"NETSCAPE_SPKI_free":["void","(NETSCAPE_SPKI *)"],
"d2i_NETSCAPE_SPKI":["NETSCAPE_SPKI *","(NETSCAPE_SPKI **, const unsigned char **, long)"],
"i2d_NETSCAPE_SPKI":["int","(NETSCAPE_SPKI *, unsigned char **)"],
"NETSCAPE_SPKAC_new":["NETSCAPE_SPKAC *","()"],
"NETSCAPE_SPKAC_free":["void","(NETSCAPE_SPKAC *)"],
"d2i_NETSCAPE_SPKAC":["NETSCAPE_SPKAC *","(NETSCAPE_SPKAC **, const unsigned char **, long)"],
"i2d_NETSCAPE_SPKAC":["int","(NETSCAPE_SPKAC *, unsigned char **)"],
"NETSCAPE_CERT_SEQUENCE_new":["NETSCAPE_CERT_SEQUENCE *","()"],
"NETSCAPE_CERT_SEQUENCE_free":["void","(NETSCAPE_CERT_SEQUENCE *)"],
"d2i_NETSCAPE_CERT_SEQUENCE":["NETSCAPE_CERT_SEQUENCE *","(NETSCAPE_CERT_SEQUENCE **, const unsigned char **, long)"],
"i2d_NETSCAPE_CERT_SEQUENCE":["int","(NETSCAPE_CERT_SEQUENCE *, unsigned char **)"],
"X509_INFO_new":["X509_INFO *","()"],
"X509_INFO_free":["void","(X509_INFO *)"],
"X509_NAME_oneline":["char *","(const X509_NAME *, char *, int)"],
"ASN1_verify":["int","(i2d_of_void *, X509_ALGOR *, ASN1_BIT_STRING *, char *, EVP_PKEY *)"],
"ASN1_digest":["int","(i2d_of_void *, const EVP_MD *, char *, unsigned char *, unsigned int *)"],
"ASN1_sign":["int","(i2d_of_void *, X509_ALGOR *, X509_ALGOR *, ASN1_BIT_STRING *, char *, EVP_PKEY *, const EVP_MD *)"],
"ASN1_item_digest":["int","(const ASN1_ITEM *, const EVP_MD *, void *, unsigned char *, unsigned int *)"],
"ASN1_item_verify":["int","(const ASN1_ITEM *, X509_ALGOR *, ASN1_BIT_STRING *, void *, EVP_PKEY *)"],
"ASN1_item_sign":["int","(const ASN1_ITEM *, X509_ALGOR *, X509_ALGOR *, ASN1_BIT_STRING *, void *, EVP_PKEY *, const EVP_MD *)"],
"ASN1_item_sign_ctx":["int","(const ASN1_ITEM *, X509_ALGOR *, X509_ALGOR *, ASN1_BIT_STRING *, void *, EVP_MD_CTX *)"],
"X509_get_version":["long","(const X509 *)"],
"X509_set_version":["int","(X509 *, long)"],
"X509_set_serialNumber":["int","(X509 *, ASN1_INTEGER *)"],
"X509_get_serialNumber":["ASN1_INTEGER *","(X509 *)"],
"X509_get0_serialNumber":["const ASN1_INTEGER *","(const X509 *)"],
"X509_set_issuer_name":["int","(X509 *, X509_NAME *)"],
"X509_get_issuer_name":["X509_NAME *","(const X509 *)"],
"X509_set_subject_name":["int","(X509 *, X509_NAME *)"],
"X509_get_subject_name":["X509_NAME *","(const X509 *)"],
"X509_get0_notBefore":["const ASN1_TIME *","(const X509 *)"],
"X509_getm_notBefore":["ASN1_TIME *","(const X509 *)"],
"X509_set1_notBefore":["int","(X509 *, const ASN1_TIME *)"],
"X509_get0_notAfter":["const ASN1_TIME *","(const X509 *)"],
"X509_getm_notAfter":["ASN1_TIME *","(const X509 *)"],
"X509_set1_notAfter":["int","(X509 *, const ASN1_TIME *)"],
"X509_set_pubkey":["int","(X509 *, EVP_PKEY *)"],
"X509_up_ref":["int","(X509 *)"],
"X509_get_signature_type":["int","(const X509 *)"],
"X509_get_X509_PUBKEY":["X509_PUBKEY *","(const X509 *)"],
"X509_get0_extensions":["const struct stack_st_X509_EXTENSION *","(const X509 *)"],
"X509_get0_uids":["void","(const X509 *, const ASN1_BIT_STRING **, const ASN1_BIT_STRING **)"],
"X509_get0_tbs_sigalg":["const X509_ALGOR *","(const X509 *)"],
"X509_get0_pubkey":["EVP_PKEY *","(const X509 *)"],
"X509_get_pubkey":["EVP_PKEY *","(X509 *)"],
"X509_get0_pubkey_bitstr":["ASN1_BIT_STRING *","(const X509 *)"],
"X509_certificate_type":["int","(const X509 *, const EVP_PKEY *)"],
"X509_REQ_get_version":["long","(const X509_REQ *)"],
"X509_REQ_set_version":["int","(X509_REQ *, long)"],
"X509_REQ_get_subject_name":["X509_NAME *","(const X509_REQ *)"],
"X509_REQ_set_subject_name":["int","(X509_REQ *, X509_NAME *)"],
"X509_REQ_get0_signature":["void","(const X509_REQ *, const ASN1_BIT_STRING **, const X509_ALGOR **)"],
"X509_REQ_get_signature_nid":["int","(const X509_REQ *)"],
"i2d_re_X509_REQ_tbs":["int","(X509_REQ *, unsigned char **)"],
"X509_REQ_set_pubkey":["int","(X509_REQ *, EVP_PKEY *)"],
"X509_REQ_get_pubkey":["EVP_PKEY *","(X509_REQ *)"],
"X509_REQ_get0_pubkey":["EVP_PKEY *","(X509_REQ *)"],
"X509_REQ_get_X509_PUBKEY":["X509_PUBKEY *","(X509_REQ *)"],
"X509_REQ_extension_nid":["int","(int)"],
"X509_REQ_get_extension_nids":["int *","()"],
"X509_REQ_set_extension_nids":["void","(int *)"],
"X509_REQ_get_extensions":["struct stack_st_X509_EXTENSION *","(X509_REQ *)"],
"X509_REQ_add_extensions_nid":["int","(X509_REQ *, struct stack_st_X509_EXTENSION *, int)"],
"X509_REQ_add_extensions":["int","(X509_REQ *, struct stack_st_X509_EXTENSION *)"],
"X509_REQ_get_attr_count":["int","(const X509_REQ *)"],
"X509_REQ_get_attr_by_NID":["int","(const X509_REQ *, int, int)"],
"X509_REQ_get_attr_by_OBJ":["int","(const X509_REQ *, const ASN1_OBJECT *, int)"],
"X509_REQ_get_attr":["X509_ATTRIBUTE *","(const X509_REQ *, int)"],
"X509_REQ_delete_attr":["X509_ATTRIBUTE *","(X509_REQ *, int)"],
"X509_REQ_add1_attr":["int","(X509_REQ *, X509_ATTRIBUTE *)"],
"X509_REQ_add1_attr_by_OBJ":["int","(X509_REQ *, const ASN1_OBJECT *, int, const unsigned char *, int)"],
"X509_REQ_add1_attr_by_NID":["int","(X509_REQ *, int, int, const unsigned char *, int)"],
"X509_REQ_add1_attr_by_txt":["int","(X509_REQ *, const char *, int, const unsigned char *, int)"],
"X509_CRL_set_version":["int","(X509_CRL *, long)"],
"X509_CRL_set_issuer_name":["int","(X509_CRL *, X509_NAME *)"],
"X509_CRL_set1_lastUpdate":["int","(X509_CRL *, const ASN1_TIME *)"],
"X509_CRL_set1_nextUpdate":["int","(X509_CRL *, const ASN1_TIME *)"],
"X509_CRL_sort":["int","(X509_CRL *)"],
"X509_CRL_up_ref":["int","(X509_CRL *)"],
"X509_CRL_get_version":["long","(const X509_CRL *)"],
"X509_CRL_get0_lastUpdate":["const ASN1_TIME *","(const X509_CRL *)"],
"X509_CRL_get0_nextUpdate":["const ASN1_TIME *","(const X509_CRL *)"],
"X509_CRL_get_lastUpdate":["ASN1_TIME *","(X509_CRL *)"],
"X509_CRL_get_nextUpdate":["ASN1_TIME *","(X509_CRL *)"],
"X509_CRL_get_issuer":["X509_NAME *","(const X509_CRL *)"],
"X509_CRL_get0_extensions":["const struct stack_st_X509_EXTENSION *","(const X509_CRL *)"],
"X509_CRL_get_REVOKED":["struct stack_st_X509_REVOKED *","(X509_CRL *)"],
"X509_CRL_get0_signature":["void","(const X509_CRL *, const ASN1_BIT_STRING **, const X509_ALGOR **)"],
"X509_CRL_get_signature_nid":["int","(const X509_CRL *)"],
"i2d_re_X509_CRL_tbs":["int","(X509_CRL *, unsigned char **)"],
"X509_REVOKED_get0_serialNumber":["const ASN1_INTEGER *","(const X509_REVOKED *)"],
"X509_REVOKED_set_serialNumber":["int","(X509_REVOKED *, ASN1_INTEGER *)"],
"X509_REVOKED_get0_revocationDate":["const ASN1_TIME *","(const X509_REVOKED *)"],
"X509_REVOKED_set_revocationDate":["int","(X509_REVOKED *, ASN1_TIME *)"],
"X509_REVOKED_get0_extensions":["const struct stack_st_X509_EXTENSION *","(const X509_REVOKED *)"],
"X509_CRL_diff":["X509_CRL *","(X509_CRL *, X509_CRL *, EVP_PKEY *, const EVP_MD *, unsigned int)"],
"X509_REQ_check_private_key":["int","(X509_REQ *, EVP_PKEY *)"],
"X509_check_private_key":["int","(const X509 *, const EVP_PKEY *)"],
"X509_chain_check_suiteb":["int","(int *, X509 *, struct stack_st_X509 *, unsigned long)"],
"X509_CRL_check_suiteb":["int","(X509_CRL *, EVP_PKEY *, unsigned long)"],
"X509_chain_up_ref":["struct stack_st_X509 *","(struct stack_st_X509 *)"],
"X509_issuer_and_serial_cmp":["int","(const X509 *, const X509 *)"],
"X509_issuer_and_serial_hash":["unsigned long","(X509 *)"],
"X509_issuer_name_cmp":["int","(const X509 *, const X509 *)"],
"X509_issuer_name_hash":["unsigned long","(X509 *)"],
"X509_subject_name_cmp":["int","(const X509 *, const X509 *)"],
"X509_subject_name_hash":["unsigned long","(X509 *)"],
"X509_issuer_name_hash_old":["unsigned long","(X509 *)"],
"X509_subject_name_hash_old":["unsigned long","(X509 *)"],
"X509_cmp":["int","(const X509 *, const X509 *)"],
"X509_NAME_cmp":["int","(const X509_NAME *, const X509_NAME *)"],
"X509_NAME_hash":["unsigned long","(X509_NAME *)"],
"X509_NAME_hash_old":["unsigned long","(X509_NAME *)"],
"X509_CRL_cmp":["int","(const X509_CRL *, const X509_CRL *)"],
"X509_CRL_match":["int","(const X509_CRL *, const X509_CRL *)"],
"X509_aux_print":["int","(BIO *, X509 *, int)"],
"X509_print_ex_fp":["int","(int *, X509 *, unsigned long, unsigned long)"],
"X509_print_fp":["int","(int *, X509 *)"],
"X509_CRL_print_fp":["int","(int *, X509_CRL *)"],
"X509_REQ_print_fp":["int","(int *, X509_REQ *)"],
"X509_NAME_print_ex_fp":["int","(int *, const X509_NAME *, int, unsigned long)"],
"X509_NAME_print":["int","(BIO *, const X509_NAME *, int)"],
"X509_NAME_print_ex":["int","(BIO *, const X509_NAME *, int, unsigned long)"],
"X509_print_ex":["int","(BIO *, X509 *, unsigned long, unsigned long)"],
"X509_print":["int","(BIO *, X509 *)"],
"X509_ocspid_print":["int","(BIO *, X509 *)"],
"X509_CRL_print_ex":["int","(BIO *, X509_CRL *, unsigned long)"],
"X509_CRL_print":["int","(BIO *, X509_CRL *)"],
"X509_REQ_print_ex":["int","(BIO *, X509_REQ *, unsigned long, unsigned long)"],
"X509_REQ_print":["int","(BIO *, X509_REQ *)"],
"X509_NAME_entry_count":["int","(const X509_NAME *)"],
"X509_NAME_get_text_by_NID":["int","(X509_NAME *, int, char *, int)"],
"X509_NAME_get_text_by_OBJ":["int","(X509_NAME *, const ASN1_OBJECT *, char *, int)"],
"X509_NAME_get_index_by_NID":["int","(X509_NAME *, int, int)"],
"X509_NAME_get_index_by_OBJ":["int","(X509_NAME *, const ASN1_OBJECT *, int)"],
"X509_NAME_get_entry":["X509_NAME_ENTRY *","(const X509_NAME *, int)"],
"X509_NAME_delete_entry":["X509_NAME_ENTRY *","(X509_NAME *, int)"],
"X509_NAME_add_entry":["int","(X509_NAME *, const X509_NAME_ENTRY *, int, int)"],
"X509_NAME_add_entry_by_OBJ":["int","(X509_NAME *, const ASN1_OBJECT *, int, const unsigned char *, int, int, int)"],
"X509_NAME_add_entry_by_NID":["int","(X509_NAME *, int, int, const unsigned char *, int, int, int)"],
"X509_NAME_ENTRY_create_by_txt":["X509_NAME_ENTRY *","(X509_NAME_ENTRY **, const char *, int, const unsigned char *, int)"],
"X509_NAME_ENTRY_create_by_NID":["X509_NAME_ENTRY *","(X509_NAME_ENTRY **, int, int, const unsigned char *, int)"],
"X509_NAME_add_entry_by_txt":["int","(X509_NAME *, const char *, int, const unsigned char *, int, int, int)"],
"X509_NAME_ENTRY_create_by_OBJ":["X509_NAME_ENTRY *","(X509_NAME_ENTRY **, const ASN1_OBJECT *, int, const unsigned char *, int)"],
"X509_NAME_ENTRY_set_object":["int","(X509_NAME_ENTRY *, const ASN1_OBJECT *)"],
"X509_NAME_ENTRY_set_data":["int","(X509_NAME_ENTRY *, int, const unsigned char *, int)"],
"X509_NAME_ENTRY_get_object":["ASN1_OBJECT *","(const X509_NAME_ENTRY *)"],
"X509_NAME_ENTRY_get_data":["ASN1_STRING *","(const X509_NAME_ENTRY *)"],
"X509_NAME_ENTRY_set":["int","(const X509_NAME_ENTRY *)"],
"X509_NAME_get0_der":["int","(X509_NAME *, const unsigned char **, int *)"],
"X509v3_get_ext_count":["int","(const struct stack_st_X509_EXTENSION *)"],
"X509v3_get_ext_by_NID":["int","(const struct stack_st_X509_EXTENSION *, int, int)"],
"X509v3_get_ext_by_OBJ":["int","(const struct stack_st_X509_EXTENSION *, const ASN1_OBJECT *, int)"],
"X509v3_get_ext_by_critical":["int","(const struct stack_st_X509_EXTENSION *, int, int)"],
"X509v3_get_ext":["X509_EXTENSION *","(const struct stack_st_X509_EXTENSION *, int)"],
"X509v3_delete_ext":["X509_EXTENSION *","(struct stack_st_X509_EXTENSION *, int)"],
"X509v3_add_ext":["struct stack_st_X509_EXTENSION *","(struct stack_st_X509_EXTENSION **, X509_EXTENSION *, int)"],
"X509_get_ext_count":["int","(const X509 *)"],
"X509_get_ext_by_NID":["int","(const X509 *, int, int)"],
"X509_get_ext_by_OBJ":["int","(const X509 *, const ASN1_OBJECT *, int)"],
"X509_get_ext_by_critical":["int","(const X509 *, int, int)"],
"X509_get_ext":["X509_EXTENSION *","(const X509 *, int)"],
"X509_delete_ext":["X509_EXTENSION *","(X509 *, int)"],
"X509_add_ext":["int","(X509 *, X509_EXTENSION *, int)"],
"X509_get_ext_d2i":["void *","(const X509 *, int, int *, int *)"],
"X509_add1_ext_i2d":["int","(X509 *, int, void *, int, unsigned long)"],
"X509_CRL_get_ext_count":["int","(const X509_CRL *)"],
"X509_CRL_get_ext_by_NID":["int","(const X509_CRL *, int, int)"],
"X509_CRL_get_ext_by_OBJ":["int","(const X509_CRL *, const ASN1_OBJECT *, int)"],
"X509_CRL_get_ext_by_critical":["int","(const X509_CRL *, int, int)"],
"X509_CRL_get_ext":["X509_EXTENSION *","(const X509_CRL *, int)"],
"X509_CRL_delete_ext":["X509_EXTENSION *","(X509_CRL *, int)"],
"X509_CRL_add_ext":["int","(X509_CRL *, X509_EXTENSION *, int)"],
"X509_CRL_get_ext_d2i":["void *","(const X509_CRL *, int, int *, int *)"],
"X509_CRL_add1_ext_i2d":["int","(X509_CRL *, int, void *, int, unsigned long)"],
"X509_REVOKED_get_ext_count":["int","(const X509_REVOKED *)"],
"X509_REVOKED_get_ext_by_NID":["int","(const X509_REVOKED *, int, int)"],
"X509_REVOKED_get_ext_by_OBJ":["int","(const X509_REVOKED *, const ASN1_OBJECT *, int)"],
"X509_REVOKED_get_ext_by_critical":["int","(const X509_REVOKED *, int, int)"],
"X509_REVOKED_get_ext":["X509_EXTENSION *","(const X509_REVOKED *, int)"],
"X509_REVOKED_delete_ext":["X509_EXTENSION *","(X509_REVOKED *, int)"],
"X509_REVOKED_add_ext":["int","(X509_REVOKED *, X509_EXTENSION *, int)"],
"X509_REVOKED_get_ext_d2i":["void *","(const X509_REVOKED *, int, int *, int *)"],
"X509_REVOKED_add1_ext_i2d":["int","(X509_REVOKED *, int, void *, int, unsigned long)"],
"X509_EXTENSION_create_by_NID":["X509_EXTENSION *","(X509_EXTENSION **, int, int, ASN1_OCTET_STRING *)"],
"X509_EXTENSION_create_by_OBJ":["X509_EXTENSION *","(X509_EXTENSION **, const ASN1_OBJECT *, int, ASN1_OCTET_STRING *)"],
"X509_EXTENSION_set_object":["int","(X509_EXTENSION *, const ASN1_OBJECT *)"],
"X509_EXTENSION_set_critical":["int","(X509_EXTENSION *, int)"],
"X509_EXTENSION_set_data":["int","(X509_EXTENSION *, ASN1_OCTET_STRING *)"],
"X509_EXTENSION_get_object":["ASN1_OBJECT *","(X509_EXTENSION *)"],
"X509_EXTENSION_get_data":["ASN1_OCTET_STRING *","(X509_EXTENSION *)"],
"X509_EXTENSION_get_critical":["int","(const X509_EXTENSION *)"],
"X509at_get_attr_count":["int","(const struct stack_st_X509_ATTRIBUTE *)"],
"X509at_get_attr_by_NID":["int","(const struct stack_st_X509_ATTRIBUTE *, int, int)"],
"X509at_get_attr_by_OBJ":["int","(const struct stack_st_X509_ATTRIBUTE *, const ASN1_OBJECT *, int)"],
"X509at_get_attr":["X509_ATTRIBUTE *","(const struct stack_st_X509_ATTRIBUTE *, int)"],
"X509at_delete_attr":["X509_ATTRIBUTE *","(struct stack_st_X509_ATTRIBUTE *, int)"],
"X509at_add1_attr":["struct stack_st_X509_ATTRIBUTE *","(struct stack_st_X509_ATTRIBUTE **, X509_ATTRIBUTE *)"],
"X509at_add1_attr_by_OBJ":["struct stack_st_X509_ATTRIBUTE *","(struct stack_st_X509_ATTRIBUTE **, const ASN1_OBJECT *, int, const unsigned char *, int)"],
"X509at_add1_attr_by_NID":["struct stack_st_X509_ATTRIBUTE *","(struct stack_st_X509_ATTRIBUTE **, int, int, const unsigned char *, int)"],
"X509at_add1_attr_by_txt":["struct stack_st_X509_ATTRIBUTE *","(struct stack_st_X509_ATTRIBUTE **, const char *, int, const unsigned char *, int)"],
"X509at_get0_data_by_OBJ":["void *","(struct stack_st_X509_ATTRIBUTE *, const ASN1_OBJECT *, int, int)"],
"X509_ATTRIBUTE_create_by_NID":["X509_ATTRIBUTE *","(X509_ATTRIBUTE **, int, int, const void *, int)"],
"X509_ATTRIBUTE_create_by_OBJ":["X509_ATTRIBUTE *","(X509_ATTRIBUTE **, const ASN1_OBJECT *, int, const void *, int)"],
"X509_ATTRIBUTE_create_by_txt":["X509_ATTRIBUTE *","(X509_ATTRIBUTE **, const char *, int, const unsigned char *, int)"],
"X509_ATTRIBUTE_set1_object":["int","(X509_ATTRIBUTE *, const ASN1_OBJECT *)"],
"X509_ATTRIBUTE_set1_data":["int","(X509_ATTRIBUTE *, int, const void *, int)"],
"X509_ATTRIBUTE_get0_data":["void *","(X509_ATTRIBUTE *, int, int, void *)"],
"X509_ATTRIBUTE_count":["int","(const X509_ATTRIBUTE *)"],
"X509_ATTRIBUTE_get0_object":["ASN1_OBJECT *","(X509_ATTRIBUTE *)"],
"X509_ATTRIBUTE_get0_type":["ASN1_TYPE *","(X509_ATTRIBUTE *, int)"],
"EVP_PKEY_get_attr_count":["int","(const EVP_PKEY *)"],
"EVP_PKEY_get_attr_by_NID":["int","(const EVP_PKEY *, int, int)"],
"EVP_PKEY_get_attr_by_OBJ":["int","(const EVP_PKEY *, const ASN1_OBJECT *, int)"],
"EVP_PKEY_get_attr":["X509_ATTRIBUTE *","(const EVP_PKEY *, int)"],
"EVP_PKEY_delete_attr":["X509_ATTRIBUTE *","(EVP_PKEY *, int)"],
"EVP_PKEY_add1_attr":["int","(EVP_PKEY *, X509_ATTRIBUTE *)"],
"EVP_PKEY_add1_attr_by_OBJ":["int","(EVP_PKEY *, const ASN1_OBJECT *, int, const unsigned char *, int)"],
"EVP_PKEY_add1_attr_by_NID":["int","(EVP_PKEY *, int, int, const unsigned char *, int)"],
"EVP_PKEY_add1_attr_by_txt":["int","(EVP_PKEY *, const char *, int, const unsigned char *, int)"],
"X509_verify_cert":["int","(X509_STORE_CTX *)"],
"X509_find_by_issuer_and_serial":["X509 *","(struct stack_st_X509 *, X509_NAME *, ASN1_INTEGER *)"],
"X509_find_by_subject":["X509 *","(struct stack_st_X509 *, X509_NAME *)"],
"PBEPARAM_new":["PBEPARAM *","()"],
"PBEPARAM_free":["void","(PBEPARAM *)"],
"d2i_PBEPARAM":["PBEPARAM *","(PBEPARAM **, const unsigned char **, long)"],
"i2d_PBEPARAM":["int","(PBEPARAM *, unsigned char **)"],
"PBE2PARAM_new":["PBE2PARAM *","()"],
"PBE2PARAM_free":["void","(PBE2PARAM *)"],
"d2i_PBE2PARAM":["PBE2PARAM *","(PBE2PARAM **, const unsigned char **, long)"],
"i2d_PBE2PARAM":["int","(PBE2PARAM *, unsigned char **)"],
"PBKDF2PARAM_new":["PBKDF2PARAM *","()"],
"PBKDF2PARAM_free":["void","(PBKDF2PARAM *)"],
"d2i_PBKDF2PARAM":["PBKDF2PARAM *","(PBKDF2PARAM **, const unsigned char **, long)"],
"i2d_PBKDF2PARAM":["int","(PBKDF2PARAM *, unsigned char **)"],
"SCRYPT_PARAMS_new":["SCRYPT_PARAMS *","()"],
"SCRYPT_PARAMS_free":["void","(SCRYPT_PARAMS *)"],
"d2i_SCRYPT_PARAMS":["SCRYPT_PARAMS *","(SCRYPT_PARAMS **, const unsigned char **, long)"],
"i2d_SCRYPT_PARAMS":["int","(SCRYPT_PARAMS *, unsigned char **)"],
"PKCS5_pbe_set0_algor":["int","(X509_ALGOR *, int, int, const unsigned char *, int)"],
"PKCS5_pbe_set":["X509_ALGOR *","(int, int, const unsigned char *, int)"],
"PKCS5_pbe2_set":["X509_ALGOR *","(const EVP_CIPHER *, int, unsigned char *, int)"],
"PKCS5_pbe2_set_iv":["X509_ALGOR *","(const EVP_CIPHER *, int, unsigned char *, int, unsigned char *, int)"],
"PKCS5_pbe2_set_scrypt":["X509_ALGOR *","(const EVP_CIPHER *, const unsigned char *, int, unsigned char *, int, int, int)"],
"PKCS5_pbkdf2_set":["X509_ALGOR *","(int, unsigned char *, int, int, int)"],
"PKCS8_PRIV_KEY_INFO_new":["PKCS8_PRIV_KEY_INFO *","()"],
"PKCS8_PRIV_KEY_INFO_free":["void","(PKCS8_PRIV_KEY_INFO *)"],
"d2i_PKCS8_PRIV_KEY_INFO":["PKCS8_PRIV_KEY_INFO *","(PKCS8_PRIV_KEY_INFO **, const unsigned char **, long)"],
"i2d_PKCS8_PRIV_KEY_INFO":["int","(PKCS8_PRIV_KEY_INFO *, unsigned char **)"],
"EVP_PKCS82PKEY":["EVP_PKEY *","(const PKCS8_PRIV_KEY_INFO *)"],
"EVP_PKEY2PKCS8":["PKCS8_PRIV_KEY_INFO *","(EVP_PKEY *)"],
"PKCS8_pkey_set0":["int","(PKCS8_PRIV_KEY_INFO *, ASN1_OBJECT *, int, int, void *, unsigned char *, int)"],
"PKCS8_pkey_get0":["int","(const ASN1_OBJECT **, const unsigned char **, int *, const X509_ALGOR **, const PKCS8_PRIV_KEY_INFO *)"],
"PKCS8_pkey_get0_attrs":["const struct stack_st_X509_ATTRIBUTE *","(const PKCS8_PRIV_KEY_INFO *)"],
"PKCS8_pkey_add1_attr_by_NID":["int","(PKCS8_PRIV_KEY_INFO *, int, int, const unsigned char *, int)"],
"X509_PUBKEY_set0_param":["int","(X509_PUBKEY *, ASN1_OBJECT *, int, void *, unsigned char *, int)"],
"X509_PUBKEY_get0_param":["int","(ASN1_OBJECT **, const unsigned char **, int *, X509_ALGOR **, X509_PUBKEY *)"],
"X509_check_trust":["int","(X509 *, int, int)"],
"X509_TRUST_get_count":["int","()"],
"X509_TRUST_get0":["X509_TRUST *","(int)"],
"X509_TRUST_get_by_id":["int","(int)"],
"X509_TRUST_add":["int","(int, int, int (*)(X509_TRUST *, X509 *, int), const char *, int, void *)"],
"X509_TRUST_cleanup":["void","()"],
"X509_TRUST_get_flags":["int","(const X509_TRUST *)"],
"X509_TRUST_get0_name":["char *","(const X509_TRUST *)"],
"X509_TRUST_get_trust":["int","(const X509_TRUST *)"],
"ERR_load_CONF_strings":["int","()"],
"sk_CONF_VALUE_num":["int","(const struct stack_st_CONF_VALUE *)"],
"sk_CONF_VALUE_value":["CONF_VALUE *","(const struct stack_st_CONF_VALUE *, int)"],
"sk_CONF_VALUE_new":["struct stack_st_CONF_VALUE *","(sk_CONF_VALUE_compfunc)"],
"sk_CONF_VALUE_new_null":["struct stack_st_CONF_VALUE *","()"],
"sk_CONF_VALUE_new_reserve":["struct stack_st_CONF_VALUE *","(sk_CONF_VALUE_compfunc, int)"],
"sk_CONF_VALUE_reserve":["int","(struct stack_st_CONF_VALUE *, int)"],
"sk_CONF_VALUE_free":["void","(struct stack_st_CONF_VALUE *)"],
"sk_CONF_VALUE_zero":["void","(struct stack_st_CONF_VALUE *)"],
"sk_CONF_VALUE_delete":["CONF_VALUE *","(struct stack_st_CONF_VALUE *, int)"],
"sk_CONF_VALUE_delete_ptr":["CONF_VALUE *","(struct stack_st_CONF_VALUE *, CONF_VALUE *)"],
"sk_CONF_VALUE_push":["int","(struct stack_st_CONF_VALUE *, CONF_VALUE *)"],
"sk_CONF_VALUE_unshift":["int","(struct stack_st_CONF_VALUE *, CONF_VALUE *)"],
"sk_CONF_VALUE_pop":["CONF_VALUE *","(struct stack_st_CONF_VALUE *)"],
"sk_CONF_VALUE_shift":["CONF_VALUE *","(struct stack_st_CONF_VALUE *)"],
"sk_CONF_VALUE_pop_free":["void","(struct stack_st_CONF_VALUE *, sk_CONF_VALUE_freefunc)"],
"sk_CONF_VALUE_insert":["int","(struct stack_st_CONF_VALUE *, CONF_VALUE *, int)"],
"sk_CONF_VALUE_set":["CONF_VALUE *","(struct stack_st_CONF_VALUE *, int, CONF_VALUE *)"],
"sk_CONF_VALUE_find":["int","(struct stack_st_CONF_VALUE *, CONF_VALUE *)"],
"sk_CONF_VALUE_find_ex":["int","(struct stack_st_CONF_VALUE *, CONF_VALUE *)"],
"sk_CONF_VALUE_sort":["void","(struct stack_st_CONF_VALUE *)"],
"sk_CONF_VALUE_is_sorted":["int","(const struct stack_st_CONF_VALUE *)"],
"sk_CONF_VALUE_dup":["struct stack_st_CONF_VALUE *","(const struct stack_st_CONF_VALUE *)"],
"sk_CONF_VALUE_deep_copy":["struct stack_st_CONF_VALUE *","(const struct stack_st_CONF_VALUE *, sk_CONF_VALUE_copyfunc, sk_CONF_VALUE_freefunc)"],
"sk_CONF_VALUE_set_cmp_func":["sk_CONF_VALUE_compfunc","(struct stack_st_CONF_VALUE *, sk_CONF_VALUE_compfunc)"],
"lh_CONF_VALUE_new":["struct lhash_st_CONF_VALUE *","(unsigned long (*)(const CONF_VALUE *), int (*)(const CONF_VALUE *, const CONF_VALUE *))"],
"lh_CONF_VALUE_free":["void","(struct lhash_st_CONF_VALUE *)"],
"lh_CONF_VALUE_insert":["CONF_VALUE *","(struct lhash_st_CONF_VALUE *, CONF_VALUE *)"],
"lh_CONF_VALUE_delete":["CONF_VALUE *","(struct lhash_st_CONF_VALUE *, const CONF_VALUE *)"],
"lh_CONF_VALUE_retrieve":["CONF_VALUE *","(struct lhash_st_CONF_VALUE *, const CONF_VALUE *)"],
"lh_CONF_VALUE_error":["int","(struct lhash_st_CONF_VALUE *)"],
"lh_CONF_VALUE_num_items":["unsigned long","(struct lhash_st_CONF_VALUE *)"],
"lh_CONF_VALUE_node_stats_bio":["void","(const struct lhash_st_CONF_VALUE *, BIO *)"],
"lh_CONF_VALUE_node_usage_stats_bio":["void","(const struct lhash_st_CONF_VALUE *, BIO *)"],
"lh_CONF_VALUE_stats_bio":["void","(const struct lhash_st_CONF_VALUE *, BIO *)"],
"lh_CONF_VALUE_get_down_load":["unsigned long","(struct lhash_st_CONF_VALUE *)"],
"lh_CONF_VALUE_set_down_load":["void","(struct lhash_st_CONF_VALUE *, unsigned long)"],
"lh_CONF_VALUE_doall":["void","(struct lhash_st_CONF_VALUE *, void (*)(CONF_VALUE *))"],
"sk_CONF_MODULE_num":["int","(const struct stack_st_CONF_MODULE *)"],
"sk_CONF_MODULE_value":["CONF_MODULE *","(const struct stack_st_CONF_MODULE *, int)"],
"sk_CONF_MODULE_new":["struct stack_st_CONF_MODULE *","(sk_CONF_MODULE_compfunc)"],
"sk_CONF_MODULE_new_null":["struct stack_st_CONF_MODULE *","()"],
"sk_CONF_MODULE_new_reserve":["struct stack_st_CONF_MODULE *","(sk_CONF_MODULE_compfunc, int)"],
"sk_CONF_MODULE_reserve":["int","(struct stack_st_CONF_MODULE *, int)"],
"sk_CONF_MODULE_free":["void","(struct stack_st_CONF_MODULE *)"],
"sk_CONF_MODULE_zero":["void","(struct stack_st_CONF_MODULE *)"],
"sk_CONF_MODULE_delete":["CONF_MODULE *","(struct stack_st_CONF_MODULE *, int)"],
"sk_CONF_MODULE_delete_ptr":["CONF_MODULE *","(struct stack_st_CONF_MODULE *, CONF_MODULE *)"],
"sk_CONF_MODULE_push":["int","(struct stack_st_CONF_MODULE *, CONF_MODULE *)"],
"sk_CONF_MODULE_unshift":["int","(struct stack_st_CONF_MODULE *, CONF_MODULE *)"],
"sk_CONF_MODULE_pop":["CONF_MODULE *","(struct stack_st_CONF_MODULE *)"],
"sk_CONF_MODULE_shift":["CONF_MODULE *","(struct stack_st_CONF_MODULE *)"],
"sk_CONF_MODULE_pop_free":["void","(struct stack_st_CONF_MODULE *, sk_CONF_MODULE_freefunc)"],
"sk_CONF_MODULE_insert":["int","(struct stack_st_CONF_MODULE *, CONF_MODULE *, int)"],
"sk_CONF_MODULE_set":["CONF_MODULE *","(struct stack_st_CONF_MODULE *, int, CONF_MODULE *)"],
"sk_CONF_MODULE_find":["int","(struct stack_st_CONF_MODULE *, CONF_MODULE *)"],
"sk_CONF_MODULE_find_ex":["int","(struct stack_st_CONF_MODULE *, CONF_MODULE *)"],
"sk_CONF_MODULE_sort":["void","(struct stack_st_CONF_MODULE *)"],
"sk_CONF_MODULE_is_sorted":["int","(const struct stack_st_CONF_MODULE *)"],
"sk_CONF_MODULE_dup":["struct stack_st_CONF_MODULE *","(const struct stack_st_CONF_MODULE *)"],
"sk_CONF_MODULE_deep_copy":["struct stack_st_CONF_MODULE *","(const struct stack_st_CONF_MODULE *, sk_CONF_MODULE_copyfunc, sk_CONF_MODULE_freefunc)"],
"sk_CONF_MODULE_set_cmp_func":["sk_CONF_MODULE_compfunc","(struct stack_st_CONF_MODULE *, sk_CONF_MODULE_compfunc)"],
"sk_CONF_IMODULE_num":["int","(const struct stack_st_CONF_IMODULE *)"],
"sk_CONF_IMODULE_value":["CONF_IMODULE *","(const struct stack_st_CONF_IMODULE *, int)"],
"sk_CONF_IMODULE_new":["struct stack_st_CONF_IMODULE *","(sk_CONF_IMODULE_compfunc)"],
"sk_CONF_IMODULE_new_null":["struct stack_st_CONF_IMODULE *","()"],
"sk_CONF_IMODULE_new_reserve":["struct stack_st_CONF_IMODULE *","(sk_CONF_IMODULE_compfunc, int)"],
"sk_CONF_IMODULE_reserve":["int","(struct stack_st_CONF_IMODULE *, int)"],
"sk_CONF_IMODULE_free":["void","(struct stack_st_CONF_IMODULE *)"],
"sk_CONF_IMODULE_zero":["void","(struct stack_st_CONF_IMODULE *)"],
"sk_CONF_IMODULE_delete":["CONF_IMODULE *","(struct stack_st_CONF_IMODULE *, int)"],
"sk_CONF_IMODULE_delete_ptr":["CONF_IMODULE *","(struct stack_st_CONF_IMODULE *, CONF_IMODULE *)"],
"sk_CONF_IMODULE_push":["int","(struct stack_st_CONF_IMODULE *, CONF_IMODULE *)"],
"sk_CONF_IMODULE_unshift":["int","(struct stack_st_CONF_IMODULE *, CONF_IMODULE *)"],
"sk_CONF_IMODULE_pop":["CONF_IMODULE *","(struct stack_st_CONF_IMODULE *)"],
"sk_CONF_IMODULE_shift":["CONF_IMODULE *","(struct stack_st_CONF_IMODULE *)"],
"sk_CONF_IMODULE_pop_free":["void","(struct stack_st_CONF_IMODULE *, sk_CONF_IMODULE_freefunc)"],
"sk_CONF_IMODULE_insert":["int","(struct stack_st_CONF_IMODULE *, CONF_IMODULE *, int)"],
"sk_CONF_IMODULE_set":["CONF_IMODULE *","(struct stack_st_CONF_IMODULE *, int, CONF_IMODULE *)"],
"sk_CONF_IMODULE_find":["int","(struct stack_st_CONF_IMODULE *, CONF_IMODULE *)"],
"sk_CONF_IMODULE_find_ex":["int","(struct stack_st_CONF_IMODULE *, CONF_IMODULE *)"],
"sk_CONF_IMODULE_sort":["void","(struct stack_st_CONF_IMODULE *)"],
"sk_CONF_IMODULE_is_sorted":["int","(const struct stack_st_CONF_IMODULE *)"],
"sk_CONF_IMODULE_dup":["struct stack_st_CONF_IMODULE *","(const struct stack_st_CONF_IMODULE *)"],
"sk_CONF_IMODULE_deep_copy":["struct stack_st_CONF_IMODULE *","(const struct stack_st_CONF_IMODULE *, sk_CONF_IMODULE_copyfunc, sk_CONF_IMODULE_freefunc)"],
"sk_CONF_IMODULE_set_cmp_func":["sk_CONF_IMODULE_compfunc","(struct stack_st_CONF_IMODULE *, sk_CONF_IMODULE_compfunc)"],
"CONF_set_default_method":["int","(CONF_METHOD *)"],
"CONF_set_nconf":["void","(CONF *, struct lhash_st_CONF_VALUE *)"],
"CONF_load":["struct lhash_st_CONF_VALUE *","(struct lhash_st_CONF_VALUE *, const char *, long *)"],
"CONF_load_fp":["struct lhash_st_CONF_VALUE *","(struct lhash_st_CONF_VALUE *, int *, long *)"],
"CONF_load_bio":["struct lhash_st_CONF_VALUE *","(struct lhash_st_CONF_VALUE *, BIO *, long *)"],
"CONF_get_section":["struct stack_st_CONF_VALUE *","(struct lhash_st_CONF_VALUE *, const char *)"],
"CONF_get_string":["char *","(struct lhash_st_CONF_VALUE *, const char *, const char *)"],
"CONF_get_number":["long","(struct lhash_st_CONF_VALUE *, const char *, const char *)"],
"CONF_free":["void","(struct lhash_st_CONF_VALUE *)"],
"CONF_dump_fp":["int","(struct lhash_st_CONF_VALUE *, int *)"],
"CONF_dump_bio":["int","(struct lhash_st_CONF_VALUE *, BIO *)"],
"OPENSSL_config":["void","(const char *)"],
"NCONF_new":["CONF *","(CONF_METHOD *)"],
"NCONF_default":["CONF_METHOD *","()"],
"NCONF_WIN32":["CONF_METHOD *","()"],
"NCONF_free":["void","(CONF *)"],
"NCONF_free_data":["void","(CONF *)"],
"NCONF_load":["int","(CONF *, const char *, long *)"],
"NCONF_load_fp":["int","(CONF *, int *, long *)"],
"NCONF_load_bio":["int","(CONF *, BIO *, long *)"],
"NCONF_get_section":["struct stack_st_CONF_VALUE *","(const CONF *, const char *)"],
"NCONF_get_string":["char *","(const CONF *, const char *, const char *)"],
"NCONF_get_number_e":["int","(const CONF *, const char *, const char *, long *)"],
"NCONF_dump_fp":["int","(const CONF *, int *)"],
"NCONF_dump_bio":["int","(const CONF *, BIO *)"],
"CONF_modules_load":["int","(const CONF *, const char *, unsigned long)"],
"CONF_modules_load_file":["int","(const char *, const char *, unsigned long)"],
"CONF_modules_unload":["void","(int)"],
"CONF_modules_finish":["void","()"],
"CONF_module_add":["int","(const char *, conf_init_func *, conf_finish_func *)"],
"CONF_imodule_get_name":["const char *","(const CONF_IMODULE *)"],
"CONF_imodule_get_value":["const char *","(const CONF_IMODULE *)"],
"CONF_imodule_get_usr_data":["void *","(const CONF_IMODULE *)"],
"CONF_imodule_set_usr_data":["void","(CONF_IMODULE *, void *)"],
"CONF_imodule_get_module":["CONF_MODULE *","(const CONF_IMODULE *)"],
"CONF_imodule_get_flags":["unsigned long","(const CONF_IMODULE *)"],
"CONF_imodule_set_flags":["void","(CONF_IMODULE *, unsigned long)"],
"CONF_module_get_usr_data":["void *","(CONF_MODULE *)"],
"CONF_module_set_usr_data":["void","(CONF_MODULE *, void *)"],
"CONF_get1_default_config_file":["char *","()"],
"CONF_parse_list":["int","(const char *, int, int, int (*)(const char *, int, void *), void *)"],
"OPENSSL_load_builtin_modules":["void","()"],
"ERR_load_X509V3_strings":["int","()"],
"sk_X509V3_EXT_METHOD_num":["int","(const struct stack_st_X509V3_EXT_METHOD *)"],
"sk_X509V3_EXT_METHOD_value":["X509V3_EXT_METHOD *","(const struct stack_st_X509V3_EXT_METHOD *, int)"],
"sk_X509V3_EXT_METHOD_new":["struct stack_st_X509V3_EXT_METHOD *","(sk_X509V3_EXT_METHOD_compfunc)"],
"sk_X509V3_EXT_METHOD_new_null":["struct stack_st_X509V3_EXT_METHOD *","()"],
"sk_X509V3_EXT_METHOD_new_reserve":["struct stack_st_X509V3_EXT_METHOD *","(sk_X509V3_EXT_METHOD_compfunc, int)"],
"sk_X509V3_EXT_METHOD_reserve":["int","(struct stack_st_X509V3_EXT_METHOD *, int)"],
"sk_X509V3_EXT_METHOD_free":["void","(struct stack_st_X509V3_EXT_METHOD *)"],
"sk_X509V3_EXT_METHOD_zero":["void","(struct stack_st_X509V3_EXT_METHOD *)"],
"sk_X509V3_EXT_METHOD_delete":["X509V3_EXT_METHOD *","(struct stack_st_X509V3_EXT_METHOD *, int)"],
"sk_X509V3_EXT_METHOD_delete_ptr":["X509V3_EXT_METHOD *","(struct stack_st_X509V3_EXT_METHOD *, X509V3_EXT_METHOD *)"],
"sk_X509V3_EXT_METHOD_push":["int","(struct stack_st_X509V3_EXT_METHOD *, X509V3_EXT_METHOD *)"],
"sk_X509V3_EXT_METHOD_unshift":["int","(struct stack_st_X509V3_EXT_METHOD *, X509V3_EXT_METHOD *)"],
"sk_X509V3_EXT_METHOD_pop":["X509V3_EXT_METHOD *","(struct stack_st_X509V3_EXT_METHOD *)"],
"sk_X509V3_EXT_METHOD_shift":["X509V3_EXT_METHOD *","(struct stack_st_X509V3_EXT_METHOD *)"],
"sk_X509V3_EXT_METHOD_pop_free":["void","(struct stack_st_X509V3_EXT_METHOD *, sk_X509V3_EXT_METHOD_freefunc)"],
"sk_X509V3_EXT_METHOD_insert":["int","(struct stack_st_X509V3_EXT_METHOD *, X509V3_EXT_METHOD *, int)"],
"sk_X509V3_EXT_METHOD_set":["X509V3_EXT_METHOD *","(struct stack_st_X509V3_EXT_METHOD *, int, X509V3_EXT_METHOD *)"],
"sk_X509V3_EXT_METHOD_find":["int","(struct stack_st_X509V3_EXT_METHOD *, X509V3_EXT_METHOD *)"],
"sk_X509V3_EXT_METHOD_find_ex":["int","(struct stack_st_X509V3_EXT_METHOD *, X509V3_EXT_METHOD *)"],
"sk_X509V3_EXT_METHOD_sort":["void","(struct stack_st_X509V3_EXT_METHOD *)"],
"sk_X509V3_EXT_METHOD_is_sorted":["int","(const struct stack_st_X509V3_EXT_METHOD *)"],
"sk_X509V3_EXT_METHOD_dup":["struct stack_st_X509V3_EXT_METHOD *","(const struct stack_st_X509V3_EXT_METHOD *)"],
"sk_X509V3_EXT_METHOD_deep_copy":["struct stack_st_X509V3_EXT_METHOD *","(const struct stack_st_X509V3_EXT_METHOD *, sk_X509V3_EXT_METHOD_copyfunc, sk_X509V3_EXT_METHOD_freefunc)"],
"sk_X509V3_EXT_METHOD_set_cmp_func":["sk_X509V3_EXT_METHOD_compfunc","(struct stack_st_X509V3_EXT_METHOD *, sk_X509V3_EXT_METHOD_compfunc)"],
"sk_GENERAL_NAME_num":["int","(const struct stack_st_GENERAL_NAME *)"],
"sk_GENERAL_NAME_value":["GENERAL_NAME *","(const struct stack_st_GENERAL_NAME *, int)"],
"sk_GENERAL_NAME_new":["struct stack_st_GENERAL_NAME *","(sk_GENERAL_NAME_compfunc)"],
"sk_GENERAL_NAME_new_null":["struct stack_st_GENERAL_NAME *","()"],
"sk_GENERAL_NAME_new_reserve":["struct stack_st_GENERAL_NAME *","(sk_GENERAL_NAME_compfunc, int)"],
"sk_GENERAL_NAME_reserve":["int","(struct stack_st_GENERAL_NAME *, int)"],
"sk_GENERAL_NAME_free":["void","(struct stack_st_GENERAL_NAME *)"],
"sk_GENERAL_NAME_zero":["void","(struct stack_st_GENERAL_NAME *)"],
"sk_GENERAL_NAME_delete":["GENERAL_NAME *","(struct stack_st_GENERAL_NAME *, int)"],
"sk_GENERAL_NAME_delete_ptr":["GENERAL_NAME *","(struct stack_st_GENERAL_NAME *, GENERAL_NAME *)"],
"sk_GENERAL_NAME_push":["int","(struct stack_st_GENERAL_NAME *, GENERAL_NAME *)"],
"sk_GENERAL_NAME_unshift":["int","(struct stack_st_GENERAL_NAME *, GENERAL_NAME *)"],
"sk_GENERAL_NAME_pop":["GENERAL_NAME *","(struct stack_st_GENERAL_NAME *)"],
"sk_GENERAL_NAME_shift":["GENERAL_NAME *","(struct stack_st_GENERAL_NAME *)"],
"sk_GENERAL_NAME_pop_free":["void","(struct stack_st_GENERAL_NAME *, sk_GENERAL_NAME_freefunc)"],
"sk_GENERAL_NAME_insert":["int","(struct stack_st_GENERAL_NAME *, GENERAL_NAME *, int)"],
"sk_GENERAL_NAME_set":["GENERAL_NAME *","(struct stack_st_GENERAL_NAME *, int, GENERAL_NAME *)"],
"sk_GENERAL_NAME_find":["int","(struct stack_st_GENERAL_NAME *, GENERAL_NAME *)"],
"sk_GENERAL_NAME_find_ex":["int","(struct stack_st_GENERAL_NAME *, GENERAL_NAME *)"],
"sk_GENERAL_NAME_sort":["void","(struct stack_st_GENERAL_NAME *)"],
"sk_GENERAL_NAME_is_sorted":["int","(const struct stack_st_GENERAL_NAME *)"],
"sk_GENERAL_NAME_dup":["struct stack_st_GENERAL_NAME *","(const struct stack_st_GENERAL_NAME *)"],
"sk_GENERAL_NAME_deep_copy":["struct stack_st_GENERAL_NAME *","(const struct stack_st_GENERAL_NAME *, sk_GENERAL_NAME_copyfunc, sk_GENERAL_NAME_freefunc)"],
"sk_GENERAL_NAME_set_cmp_func":["sk_GENERAL_NAME_compfunc","(struct stack_st_GENERAL_NAME *, sk_GENERAL_NAME_compfunc)"],
"sk_GENERAL_NAMES_num":["int","(const struct stack_st_GENERAL_NAMES *)"],
"sk_GENERAL_NAMES_value":["GENERAL_NAMES *","(const struct stack_st_GENERAL_NAMES *, int)"],
"sk_GENERAL_NAMES_new":["struct stack_st_GENERAL_NAMES *","(sk_GENERAL_NAMES_compfunc)"],
"sk_GENERAL_NAMES_new_null":["struct stack_st_GENERAL_NAMES *","()"],
"sk_GENERAL_NAMES_new_reserve":["struct stack_st_GENERAL_NAMES *","(sk_GENERAL_NAMES_compfunc, int)"],
"sk_GENERAL_NAMES_reserve":["int","(struct stack_st_GENERAL_NAMES *, int)"],
"sk_GENERAL_NAMES_free":["void","(struct stack_st_GENERAL_NAMES *)"],
"sk_GENERAL_NAMES_zero":["void","(struct stack_st_GENERAL_NAMES *)"],
"sk_GENERAL_NAMES_delete":["GENERAL_NAMES *","(struct stack_st_GENERAL_NAMES *, int)"],
"sk_GENERAL_NAMES_delete_ptr":["GENERAL_NAMES *","(struct stack_st_GENERAL_NAMES *, GENERAL_NAMES *)"],
"sk_GENERAL_NAMES_push":["int","(struct stack_st_GENERAL_NAMES *, GENERAL_NAMES *)"],
"sk_GENERAL_NAMES_unshift":["int","(struct stack_st_GENERAL_NAMES *, GENERAL_NAMES *)"],
"sk_GENERAL_NAMES_pop":["GENERAL_NAMES *","(struct stack_st_GENERAL_NAMES *)"],
"sk_GENERAL_NAMES_shift":["GENERAL_NAMES *","(struct stack_st_GENERAL_NAMES *)"],
"sk_GENERAL_NAMES_pop_free":["void","(struct stack_st_GENERAL_NAMES *, sk_GENERAL_NAMES_freefunc)"],
"sk_GENERAL_NAMES_insert":["int","(struct stack_st_GENERAL_NAMES *, GENERAL_NAMES *, int)"],
"sk_GENERAL_NAMES_set":["GENERAL_NAMES *","(struct stack_st_GENERAL_NAMES *, int, GENERAL_NAMES *)"],
"sk_GENERAL_NAMES_find":["int","(struct stack_st_GENERAL_NAMES *, GENERAL_NAMES *)"],
"sk_GENERAL_NAMES_find_ex":["int","(struct stack_st_GENERAL_NAMES *, GENERAL_NAMES *)"],
"sk_GENERAL_NAMES_sort":["void","(struct stack_st_GENERAL_NAMES *)"],
"sk_GENERAL_NAMES_is_sorted":["int","(const struct stack_st_GENERAL_NAMES *)"],
"sk_GENERAL_NAMES_dup":["struct stack_st_GENERAL_NAMES *","(const struct stack_st_GENERAL_NAMES *)"],
"sk_GENERAL_NAMES_deep_copy":["struct stack_st_GENERAL_NAMES *","(const struct stack_st_GENERAL_NAMES *, sk_GENERAL_NAMES_copyfunc, sk_GENERAL_NAMES_freefunc)"],
"sk_GENERAL_NAMES_set_cmp_func":["sk_GENERAL_NAMES_compfunc","(struct stack_st_GENERAL_NAMES *, sk_GENERAL_NAMES_compfunc)"],
"sk_ACCESS_DESCRIPTION_num":["int","(const struct stack_st_ACCESS_DESCRIPTION *)"],
"sk_ACCESS_DESCRIPTION_value":["ACCESS_DESCRIPTION *","(const struct stack_st_ACCESS_DESCRIPTION *, int)"],
"sk_ACCESS_DESCRIPTION_new":["struct stack_st_ACCESS_DESCRIPTION *","(sk_ACCESS_DESCRIPTION_compfunc)"],
"sk_ACCESS_DESCRIPTION_new_null":["struct stack_st_ACCESS_DESCRIPTION *","()"],
"sk_ACCESS_DESCRIPTION_new_reserve":["struct stack_st_ACCESS_DESCRIPTION *","(sk_ACCESS_DESCRIPTION_compfunc, int)"],
"sk_ACCESS_DESCRIPTION_reserve":["int","(struct stack_st_ACCESS_DESCRIPTION *, int)"],
"sk_ACCESS_DESCRIPTION_free":["void","(struct stack_st_ACCESS_DESCRIPTION *)"],
"sk_ACCESS_DESCRIPTION_zero":["void","(struct stack_st_ACCESS_DESCRIPTION *)"],
"sk_ACCESS_DESCRIPTION_delete":["ACCESS_DESCRIPTION *","(struct stack_st_ACCESS_DESCRIPTION *, int)"],
"sk_ACCESS_DESCRIPTION_delete_ptr":["ACCESS_DESCRIPTION *","(struct stack_st_ACCESS_DESCRIPTION *, ACCESS_DESCRIPTION *)"],
"sk_ACCESS_DESCRIPTION_push":["int","(struct stack_st_ACCESS_DESCRIPTION *, ACCESS_DESCRIPTION *)"],
"sk_ACCESS_DESCRIPTION_unshift":["int","(struct stack_st_ACCESS_DESCRIPTION *, ACCESS_DESCRIPTION *)"],
"sk_ACCESS_DESCRIPTION_pop":["ACCESS_DESCRIPTION *","(struct stack_st_ACCESS_DESCRIPTION *)"],
"sk_ACCESS_DESCRIPTION_shift":["ACCESS_DESCRIPTION *","(struct stack_st_ACCESS_DESCRIPTION *)"],
"sk_ACCESS_DESCRIPTION_pop_free":["void","(struct stack_st_ACCESS_DESCRIPTION *, sk_ACCESS_DESCRIPTION_freefunc)"],
"sk_ACCESS_DESCRIPTION_insert":["int","(struct stack_st_ACCESS_DESCRIPTION *, ACCESS_DESCRIPTION *, int)"],
"sk_ACCESS_DESCRIPTION_set":["ACCESS_DESCRIPTION *","(struct stack_st_ACCESS_DESCRIPTION *, int, ACCESS_DESCRIPTION *)"],
"sk_ACCESS_DESCRIPTION_find":["int","(struct stack_st_ACCESS_DESCRIPTION *, ACCESS_DESCRIPTION *)"],
"sk_ACCESS_DESCRIPTION_find_ex":["int","(struct stack_st_ACCESS_DESCRIPTION *, ACCESS_DESCRIPTION *)"],
"sk_ACCESS_DESCRIPTION_sort":["void","(struct stack_st_ACCESS_DESCRIPTION *)"],
"sk_ACCESS_DESCRIPTION_is_sorted":["int","(const struct stack_st_ACCESS_DESCRIPTION *)"],
"sk_ACCESS_DESCRIPTION_dup":["struct stack_st_ACCESS_DESCRIPTION *","(const struct stack_st_ACCESS_DESCRIPTION *)"],
"sk_ACCESS_DESCRIPTION_deep_copy":["struct stack_st_ACCESS_DESCRIPTION *","(const struct stack_st_ACCESS_DESCRIPTION *, sk_ACCESS_DESCRIPTION_copyfunc, sk_ACCESS_DESCRIPTION_freefunc)"],
"sk_ACCESS_DESCRIPTION_set_cmp_func":["sk_ACCESS_DESCRIPTION_compfunc","(struct stack_st_ACCESS_DESCRIPTION *, sk_ACCESS_DESCRIPTION_compfunc)"],
"sk_DIST_POINT_num":["int","(const struct stack_st_DIST_POINT *)"],
"sk_DIST_POINT_value":["DIST_POINT *","(const struct stack_st_DIST_POINT *, int)"],
"sk_DIST_POINT_new":["struct stack_st_DIST_POINT *","(sk_DIST_POINT_compfunc)"],
"sk_DIST_POINT_new_null":["struct stack_st_DIST_POINT *","()"],
"sk_DIST_POINT_new_reserve":["struct stack_st_DIST_POINT *","(sk_DIST_POINT_compfunc, int)"],
"sk_DIST_POINT_reserve":["int","(struct stack_st_DIST_POINT *, int)"],
"sk_DIST_POINT_free":["void","(struct stack_st_DIST_POINT *)"],
"sk_DIST_POINT_zero":["void","(struct stack_st_DIST_POINT *)"],
"sk_DIST_POINT_delete":["DIST_POINT *","(struct stack_st_DIST_POINT *, int)"],
"sk_DIST_POINT_delete_ptr":["DIST_POINT *","(struct stack_st_DIST_POINT *, DIST_POINT *)"],
"sk_DIST_POINT_push":["int","(struct stack_st_DIST_POINT *, DIST_POINT *)"],
"sk_DIST_POINT_unshift":["int","(struct stack_st_DIST_POINT *, DIST_POINT *)"],
"sk_DIST_POINT_pop":["DIST_POINT *","(struct stack_st_DIST_POINT *)"],
"sk_DIST_POINT_shift":["DIST_POINT *","(struct stack_st_DIST_POINT *)"],
"sk_DIST_POINT_pop_free":["void","(struct stack_st_DIST_POINT *, sk_DIST_POINT_freefunc)"],
"sk_DIST_POINT_insert":["int","(struct stack_st_DIST_POINT *, DIST_POINT *, int)"],
"sk_DIST_POINT_set":["DIST_POINT *","(struct stack_st_DIST_POINT *, int, DIST_POINT *)"],
"sk_DIST_POINT_find":["int","(struct stack_st_DIST_POINT *, DIST_POINT *)"],
"sk_DIST_POINT_find_ex":["int","(struct stack_st_DIST_POINT *, DIST_POINT *)"],
"sk_DIST_POINT_sort":["void","(struct stack_st_DIST_POINT *)"],
"sk_DIST_POINT_is_sorted":["int","(const struct stack_st_DIST_POINT *)"],
"sk_DIST_POINT_dup":["struct stack_st_DIST_POINT *","(const struct stack_st_DIST_POINT *)"],
"sk_DIST_POINT_deep_copy":["struct stack_st_DIST_POINT *","(const struct stack_st_DIST_POINT *, sk_DIST_POINT_copyfunc, sk_DIST_POINT_freefunc)"],
"sk_DIST_POINT_set_cmp_func":["sk_DIST_POINT_compfunc","(struct stack_st_DIST_POINT *, sk_DIST_POINT_compfunc)"],
"sk_SXNETID_num":["int","(const struct stack_st_SXNETID *)"],
"sk_SXNETID_value":["SXNETID *","(const struct stack_st_SXNETID *, int)"],
"sk_SXNETID_new":["struct stack_st_SXNETID *","(sk_SXNETID_compfunc)"],
"sk_SXNETID_new_null":["struct stack_st_SXNETID *","()"],
"sk_SXNETID_new_reserve":["struct stack_st_SXNETID *","(sk_SXNETID_compfunc, int)"],
"sk_SXNETID_reserve":["int","(struct stack_st_SXNETID *, int)"],
"sk_SXNETID_free":["void","(struct stack_st_SXNETID *)"],
"sk_SXNETID_zero":["void","(struct stack_st_SXNETID *)"],
"sk_SXNETID_delete":["SXNETID *","(struct stack_st_SXNETID *, int)"],
"sk_SXNETID_delete_ptr":["SXNETID *","(struct stack_st_SXNETID *, SXNETID *)"],
"sk_SXNETID_push":["int","(struct stack_st_SXNETID *, SXNETID *)"],
"sk_SXNETID_unshift":["int","(struct stack_st_SXNETID *, SXNETID *)"],
"sk_SXNETID_pop":["SXNETID *","(struct stack_st_SXNETID *)"],
"sk_SXNETID_shift":["SXNETID *","(struct stack_st_SXNETID *)"],
"sk_SXNETID_pop_free":["void","(struct stack_st_SXNETID *, sk_SXNETID_freefunc)"],
"sk_SXNETID_insert":["int","(struct stack_st_SXNETID *, SXNETID *, int)"],
"sk_SXNETID_set":["SXNETID *","(struct stack_st_SXNETID *, int, SXNETID *)"],
"sk_SXNETID_find":["int","(struct stack_st_SXNETID *, SXNETID *)"],
"sk_SXNETID_find_ex":["int","(struct stack_st_SXNETID *, SXNETID *)"],
"sk_SXNETID_sort":["void","(struct stack_st_SXNETID *)"],
"sk_SXNETID_is_sorted":["int","(const struct stack_st_SXNETID *)"],
"sk_SXNETID_dup":["struct stack_st_SXNETID *","(const struct stack_st_SXNETID *)"],
"sk_SXNETID_deep_copy":["struct stack_st_SXNETID *","(const struct stack_st_SXNETID *, sk_SXNETID_copyfunc, sk_SXNETID_freefunc)"],
"sk_SXNETID_set_cmp_func":["sk_SXNETID_compfunc","(struct stack_st_SXNETID *, sk_SXNETID_compfunc)"],
"sk_POLICYQUALINFO_num":["int","(const struct stack_st_POLICYQUALINFO *)"],
"sk_POLICYQUALINFO_value":["POLICYQUALINFO *","(const struct stack_st_POLICYQUALINFO *, int)"],
"sk_POLICYQUALINFO_new":["struct stack_st_POLICYQUALINFO *","(sk_POLICYQUALINFO_compfunc)"],
"sk_POLICYQUALINFO_new_null":["struct stack_st_POLICYQUALINFO *","()"],
"sk_POLICYQUALINFO_new_reserve":["struct stack_st_POLICYQUALINFO *","(sk_POLICYQUALINFO_compfunc, int)"],
"sk_POLICYQUALINFO_reserve":["int","(struct stack_st_POLICYQUALINFO *, int)"],
"sk_POLICYQUALINFO_free":["void","(struct stack_st_POLICYQUALINFO *)"],
"sk_POLICYQUALINFO_zero":["void","(struct stack_st_POLICYQUALINFO *)"],
"sk_POLICYQUALINFO_delete":["POLICYQUALINFO *","(struct stack_st_POLICYQUALINFO *, int)"],
"sk_POLICYQUALINFO_delete_ptr":["POLICYQUALINFO *","(struct stack_st_POLICYQUALINFO *, POLICYQUALINFO *)"],
"sk_POLICYQUALINFO_push":["int","(struct stack_st_POLICYQUALINFO *, POLICYQUALINFO *)"],
"sk_POLICYQUALINFO_unshift":["int","(struct stack_st_POLICYQUALINFO *, POLICYQUALINFO *)"],
"sk_POLICYQUALINFO_pop":["POLICYQUALINFO *","(struct stack_st_POLICYQUALINFO *)"],
"sk_POLICYQUALINFO_shift":["POLICYQUALINFO *","(struct stack_st_POLICYQUALINFO *)"],
"sk_POLICYQUALINFO_pop_free":["void","(struct stack_st_POLICYQUALINFO *, sk_POLICYQUALINFO_freefunc)"],
"sk_POLICYQUALINFO_insert":["int","(struct stack_st_POLICYQUALINFO *, POLICYQUALINFO *, int)"],
"sk_POLICYQUALINFO_set":["POLICYQUALINFO *","(struct stack_st_POLICYQUALINFO *, int, POLICYQUALINFO *)"],
"sk_POLICYQUALINFO_find":["int","(struct stack_st_POLICYQUALINFO *, POLICYQUALINFO *)"],
"sk_POLICYQUALINFO_find_ex":["int","(struct stack_st_POLICYQUALINFO *, POLICYQUALINFO *)"],
"sk_POLICYQUALINFO_sort":["void","(struct stack_st_POLICYQUALINFO *)"],
"sk_POLICYQUALINFO_is_sorted":["int","(const struct stack_st_POLICYQUALINFO *)"],
"sk_POLICYQUALINFO_dup":["struct stack_st_POLICYQUALINFO *","(const struct stack_st_POLICYQUALINFO *)"],
"sk_POLICYQUALINFO_deep_copy":["struct stack_st_POLICYQUALINFO *","(const struct stack_st_POLICYQUALINFO *, sk_POLICYQUALINFO_copyfunc, sk_POLICYQUALINFO_freefunc)"],
"sk_POLICYQUALINFO_set_cmp_func":["sk_POLICYQUALINFO_compfunc","(struct stack_st_POLICYQUALINFO *, sk_POLICYQUALINFO_compfunc)"],
"sk_POLICYINFO_num":["int","(const struct stack_st_POLICYINFO *)"],
"sk_POLICYINFO_value":["POLICYINFO *","(const struct stack_st_POLICYINFO *, int)"],
"sk_POLICYINFO_new":["struct stack_st_POLICYINFO *","(sk_POLICYINFO_compfunc)"],
"sk_POLICYINFO_new_null":["struct stack_st_POLICYINFO *","()"],
"sk_POLICYINFO_new_reserve":["struct stack_st_POLICYINFO *","(sk_POLICYINFO_compfunc, int)"],
"sk_POLICYINFO_reserve":["int","(struct stack_st_POLICYINFO *, int)"],
"sk_POLICYINFO_free":["void","(struct stack_st_POLICYINFO *)"],
"sk_POLICYINFO_zero":["void","(struct stack_st_POLICYINFO *)"],
"sk_POLICYINFO_delete":["POLICYINFO *","(struct stack_st_POLICYINFO *, int)"],
"sk_POLICYINFO_delete_ptr":["POLICYINFO *","(struct stack_st_POLICYINFO *, POLICYINFO *)"],
"sk_POLICYINFO_push":["int","(struct stack_st_POLICYINFO *, POLICYINFO *)"],
"sk_POLICYINFO_unshift":["int","(struct stack_st_POLICYINFO *, POLICYINFO *)"],
"sk_POLICYINFO_pop":["POLICYINFO *","(struct stack_st_POLICYINFO *)"],
"sk_POLICYINFO_shift":["POLICYINFO *","(struct stack_st_POLICYINFO *)"],
"sk_POLICYINFO_pop_free":["void","(struct stack_st_POLICYINFO *, sk_POLICYINFO_freefunc)"],
"sk_POLICYINFO_insert":["int","(struct stack_st_POLICYINFO *, POLICYINFO *, int)"],
"sk_POLICYINFO_set":["POLICYINFO *","(struct stack_st_POLICYINFO *, int, POLICYINFO *)"],
"sk_POLICYINFO_find":["int","(struct stack_st_POLICYINFO *, POLICYINFO *)"],
"sk_POLICYINFO_find_ex":["int","(struct stack_st_POLICYINFO *, POLICYINFO *)"],
"sk_POLICYINFO_sort":["void","(struct stack_st_POLICYINFO *)"],
"sk_POLICYINFO_is_sorted":["int","(const struct stack_st_POLICYINFO *)"],
"sk_POLICYINFO_dup":["struct stack_st_POLICYINFO *","(const struct stack_st_POLICYINFO *)"],
"sk_POLICYINFO_deep_copy":["struct stack_st_POLICYINFO *","(const struct stack_st_POLICYINFO *, sk_POLICYINFO_copyfunc, sk_POLICYINFO_freefunc)"],
"sk_POLICYINFO_set_cmp_func":["sk_POLICYINFO_compfunc","(struct stack_st_POLICYINFO *, sk_POLICYINFO_compfunc)"],
"sk_POLICY_MAPPING_num":["int","(const struct stack_st_POLICY_MAPPING *)"],
"sk_POLICY_MAPPING_value":["POLICY_MAPPING *","(const struct stack_st_POLICY_MAPPING *, int)"],
"sk_POLICY_MAPPING_new":["struct stack_st_POLICY_MAPPING *","(sk_POLICY_MAPPING_compfunc)"],
"sk_POLICY_MAPPING_new_null":["struct stack_st_POLICY_MAPPING *","()"],
"sk_POLICY_MAPPING_new_reserve":["struct stack_st_POLICY_MAPPING *","(sk_POLICY_MAPPING_compfunc, int)"],
"sk_POLICY_MAPPING_reserve":["int","(struct stack_st_POLICY_MAPPING *, int)"],
"sk_POLICY_MAPPING_free":["void","(struct stack_st_POLICY_MAPPING *)"],
"sk_POLICY_MAPPING_zero":["void","(struct stack_st_POLICY_MAPPING *)"],
"sk_POLICY_MAPPING_delete":["POLICY_MAPPING *","(struct stack_st_POLICY_MAPPING *, int)"],
"sk_POLICY_MAPPING_delete_ptr":["POLICY_MAPPING *","(struct stack_st_POLICY_MAPPING *, POLICY_MAPPING *)"],
"sk_POLICY_MAPPING_push":["int","(struct stack_st_POLICY_MAPPING *, POLICY_MAPPING *)"],
"sk_POLICY_MAPPING_unshift":["int","(struct stack_st_POLICY_MAPPING *, POLICY_MAPPING *)"],
"sk_POLICY_MAPPING_pop":["POLICY_MAPPING *","(struct stack_st_POLICY_MAPPING *)"],
"sk_POLICY_MAPPING_shift":["POLICY_MAPPING *","(struct stack_st_POLICY_MAPPING *)"],
"sk_POLICY_MAPPING_pop_free":["void","(struct stack_st_POLICY_MAPPING *, sk_POLICY_MAPPING_freefunc)"],
"sk_POLICY_MAPPING_insert":["int","(struct stack_st_POLICY_MAPPING *, POLICY_MAPPING *, int)"],
"sk_POLICY_MAPPING_set":["POLICY_MAPPING *","(struct stack_st_POLICY_MAPPING *, int, POLICY_MAPPING *)"],
"sk_POLICY_MAPPING_find":["int","(struct stack_st_POLICY_MAPPING *, POLICY_MAPPING *)"],
"sk_POLICY_MAPPING_find_ex":["int","(struct stack_st_POLICY_MAPPING *, POLICY_MAPPING *)"],
"sk_POLICY_MAPPING_sort":["void","(struct stack_st_POLICY_MAPPING *)"],
"sk_POLICY_MAPPING_is_sorted":["int","(const struct stack_st_POLICY_MAPPING *)"],
"sk_POLICY_MAPPING_dup":["struct stack_st_POLICY_MAPPING *","(const struct stack_st_POLICY_MAPPING *)"],
"sk_POLICY_MAPPING_deep_copy":["struct stack_st_POLICY_MAPPING *","(const struct stack_st_POLICY_MAPPING *, sk_POLICY_MAPPING_copyfunc, sk_POLICY_MAPPING_freefunc)"],
"sk_POLICY_MAPPING_set_cmp_func":["sk_POLICY_MAPPING_compfunc","(struct stack_st_POLICY_MAPPING *, sk_POLICY_MAPPING_compfunc)"],
"sk_GENERAL_SUBTREE_num":["int","(const struct stack_st_GENERAL_SUBTREE *)"],
"sk_GENERAL_SUBTREE_value":["GENERAL_SUBTREE *","(const struct stack_st_GENERAL_SUBTREE *, int)"],
"sk_GENERAL_SUBTREE_new":["struct stack_st_GENERAL_SUBTREE *","(sk_GENERAL_SUBTREE_compfunc)"],
"sk_GENERAL_SUBTREE_new_null":["struct stack_st_GENERAL_SUBTREE *","()"],
"sk_GENERAL_SUBTREE_new_reserve":["struct stack_st_GENERAL_SUBTREE *","(sk_GENERAL_SUBTREE_compfunc, int)"],
"sk_GENERAL_SUBTREE_reserve":["int","(struct stack_st_GENERAL_SUBTREE *, int)"],
"sk_GENERAL_SUBTREE_free":["void","(struct stack_st_GENERAL_SUBTREE *)"],
"sk_GENERAL_SUBTREE_zero":["void","(struct stack_st_GENERAL_SUBTREE *)"],
"sk_GENERAL_SUBTREE_delete":["GENERAL_SUBTREE *","(struct stack_st_GENERAL_SUBTREE *, int)"],
"sk_GENERAL_SUBTREE_delete_ptr":["GENERAL_SUBTREE *","(struct stack_st_GENERAL_SUBTREE *, GENERAL_SUBTREE *)"],
"sk_GENERAL_SUBTREE_push":["int","(struct stack_st_GENERAL_SUBTREE *, GENERAL_SUBTREE *)"],
"sk_GENERAL_SUBTREE_unshift":["int","(struct stack_st_GENERAL_SUBTREE *, GENERAL_SUBTREE *)"],
"sk_GENERAL_SUBTREE_pop":["GENERAL_SUBTREE *","(struct stack_st_GENERAL_SUBTREE *)"],
"sk_GENERAL_SUBTREE_shift":["GENERAL_SUBTREE *","(struct stack_st_GENERAL_SUBTREE *)"],
"sk_GENERAL_SUBTREE_pop_free":["void","(struct stack_st_GENERAL_SUBTREE *, sk_GENERAL_SUBTREE_freefunc)"],
"sk_GENERAL_SUBTREE_insert":["int","(struct stack_st_GENERAL_SUBTREE *, GENERAL_SUBTREE *, int)"],
"sk_GENERAL_SUBTREE_set":["GENERAL_SUBTREE *","(struct stack_st_GENERAL_SUBTREE *, int, GENERAL_SUBTREE *)"],
"sk_GENERAL_SUBTREE_find":["int","(struct stack_st_GENERAL_SUBTREE *, GENERAL_SUBTREE *)"],
"sk_GENERAL_SUBTREE_find_ex":["int","(struct stack_st_GENERAL_SUBTREE *, GENERAL_SUBTREE *)"],
"sk_GENERAL_SUBTREE_sort":["void","(struct stack_st_GENERAL_SUBTREE *)"],
"sk_GENERAL_SUBTREE_is_sorted":["int","(const struct stack_st_GENERAL_SUBTREE *)"],
"sk_GENERAL_SUBTREE_dup":["struct stack_st_GENERAL_SUBTREE *","(const struct stack_st_GENERAL_SUBTREE *)"],
"sk_GENERAL_SUBTREE_deep_copy":["struct stack_st_GENERAL_SUBTREE *","(const struct stack_st_GENERAL_SUBTREE *, sk_GENERAL_SUBTREE_copyfunc, sk_GENERAL_SUBTREE_freefunc)"],
"sk_GENERAL_SUBTREE_set_cmp_func":["sk_GENERAL_SUBTREE_compfunc","(struct stack_st_GENERAL_SUBTREE *, sk_GENERAL_SUBTREE_compfunc)"],
"PROXY_POLICY_new":["PROXY_POLICY *","()"],
"PROXY_POLICY_free":["void","(PROXY_POLICY *)"],
"d2i_PROXY_POLICY":["PROXY_POLICY *","(PROXY_POLICY **, const unsigned char **, long)"],
"i2d_PROXY_POLICY":["int","(PROXY_POLICY *, unsigned char **)"],
"PROXY_CERT_INFO_EXTENSION_new":["PROXY_CERT_INFO_EXTENSION *","()"],
"PROXY_CERT_INFO_EXTENSION_free":["void","(PROXY_CERT_INFO_EXTENSION *)"],
"d2i_PROXY_CERT_INFO_EXTENSION":["PROXY_CERT_INFO_EXTENSION *","(PROXY_CERT_INFO_EXTENSION **, const unsigned char **, long)"],
"i2d_PROXY_CERT_INFO_EXTENSION":["int","(PROXY_CERT_INFO_EXTENSION *, unsigned char **)"],
"sk_X509_PURPOSE_num":["int","(const struct stack_st_X509_PURPOSE *)"],
"sk_X509_PURPOSE_value":["X509_PURPOSE *","(const struct stack_st_X509_PURPOSE *, int)"],
"sk_X509_PURPOSE_new":["struct stack_st_X509_PURPOSE *","(sk_X509_PURPOSE_compfunc)"],
"sk_X509_PURPOSE_new_null":["struct stack_st_X509_PURPOSE *","()"],
"sk_X509_PURPOSE_new_reserve":["struct stack_st_X509_PURPOSE *","(sk_X509_PURPOSE_compfunc, int)"],
"sk_X509_PURPOSE_reserve":["int","(struct stack_st_X509_PURPOSE *, int)"],
"sk_X509_PURPOSE_free":["void","(struct stack_st_X509_PURPOSE *)"],
"sk_X509_PURPOSE_zero":["void","(struct stack_st_X509_PURPOSE *)"],
"sk_X509_PURPOSE_delete":["X509_PURPOSE *","(struct stack_st_X509_PURPOSE *, int)"],
"sk_X509_PURPOSE_delete_ptr":["X509_PURPOSE *","(struct stack_st_X509_PURPOSE *, X509_PURPOSE *)"],
"sk_X509_PURPOSE_push":["int","(struct stack_st_X509_PURPOSE *, X509_PURPOSE *)"],
"sk_X509_PURPOSE_unshift":["int","(struct stack_st_X509_PURPOSE *, X509_PURPOSE *)"],
"sk_X509_PURPOSE_pop":["X509_PURPOSE *","(struct stack_st_X509_PURPOSE *)"],
"sk_X509_PURPOSE_shift":["X509_PURPOSE *","(struct stack_st_X509_PURPOSE *)"],
"sk_X509_PURPOSE_pop_free":["void","(struct stack_st_X509_PURPOSE *, sk_X509_PURPOSE_freefunc)"],
"sk_X509_PURPOSE_insert":["int","(struct stack_st_X509_PURPOSE *, X509_PURPOSE *, int)"],
"sk_X509_PURPOSE_set":["X509_PURPOSE *","(struct stack_st_X509_PURPOSE *, int, X509_PURPOSE *)"],
"sk_X509_PURPOSE_find":["int","(struct stack_st_X509_PURPOSE *, X509_PURPOSE *)"],
"sk_X509_PURPOSE_find_ex":["int","(struct stack_st_X509_PURPOSE *, X509_PURPOSE *)"],
"sk_X509_PURPOSE_sort":["void","(struct stack_st_X509_PURPOSE *)"],
"sk_X509_PURPOSE_is_sorted":["int","(const struct stack_st_X509_PURPOSE *)"],
"sk_X509_PURPOSE_dup":["struct stack_st_X509_PURPOSE *","(const struct stack_st_X509_PURPOSE *)"],
"sk_X509_PURPOSE_deep_copy":["struct stack_st_X509_PURPOSE *","(const struct stack_st_X509_PURPOSE *, sk_X509_PURPOSE_copyfunc, sk_X509_PURPOSE_freefunc)"],
"sk_X509_PURPOSE_set_cmp_func":["sk_X509_PURPOSE_compfunc","(struct stack_st_X509_PURPOSE *, sk_X509_PURPOSE_compfunc)"],
"BASIC_CONSTRAINTS_new":["BASIC_CONSTRAINTS *","()"],
"BASIC_CONSTRAINTS_free":["void","(BASIC_CONSTRAINTS *)"],
"d2i_BASIC_CONSTRAINTS":["BASIC_CONSTRAINTS *","(BASIC_CONSTRAINTS **, const unsigned char **, long)"],
"i2d_BASIC_CONSTRAINTS":["int","(BASIC_CONSTRAINTS *, unsigned char **)"],
"SXNET_new":["SXNET *","()"],
"SXNET_free":["void","(SXNET *)"],
"d2i_SXNET":["SXNET *","(SXNET **, const unsigned char **, long)"],
"i2d_SXNET":["int","(SXNET *, unsigned char **)"],
"SXNETID_new":["SXNETID *","()"],
"SXNETID_free":["void","(SXNETID *)"],
"d2i_SXNETID":["SXNETID *","(SXNETID **, const unsigned char **, long)"],
"i2d_SXNETID":["int","(SXNETID *, unsigned char **)"],
"SXNET_add_id_asc":["int","(SXNET **, const char *, const char *, int)"],
"SXNET_add_id_ulong":["int","(SXNET **, unsigned long, const char *, int)"],
"SXNET_add_id_INTEGER":["int","(SXNET **, ASN1_INTEGER *, const char *, int)"],
"SXNET_get_id_asc":["ASN1_OCTET_STRING *","(SXNET *, const char *)"],
"SXNET_get_id_ulong":["ASN1_OCTET_STRING *","(SXNET *, unsigned long)"],
"SXNET_get_id_INTEGER":["ASN1_OCTET_STRING *","(SXNET *, ASN1_INTEGER *)"],
"AUTHORITY_KEYID_new":["AUTHORITY_KEYID *","()"],
"AUTHORITY_KEYID_free":["void","(AUTHORITY_KEYID *)"],
"d2i_AUTHORITY_KEYID":["AUTHORITY_KEYID *","(AUTHORITY_KEYID **, const unsigned char **, long)"],
"i2d_AUTHORITY_KEYID":["int","(AUTHORITY_KEYID *, unsigned char **)"],
"PKEY_USAGE_PERIOD_new":["PKEY_USAGE_PERIOD *","()"],
"PKEY_USAGE_PERIOD_free":["void","(PKEY_USAGE_PERIOD *)"],
"d2i_PKEY_USAGE_PERIOD":["PKEY_USAGE_PERIOD *","(PKEY_USAGE_PERIOD **, const unsigned char **, long)"],
"i2d_PKEY_USAGE_PERIOD":["int","(PKEY_USAGE_PERIOD *, unsigned char **)"],
"GENERAL_NAME_new":["GENERAL_NAME *","()"],
"GENERAL_NAME_free":["void","(GENERAL_NAME *)"],
"d2i_GENERAL_NAME":["GENERAL_NAME *","(GENERAL_NAME **, const unsigned char **, long)"],
"i2d_GENERAL_NAME":["int","(GENERAL_NAME *, unsigned char **)"],
"GENERAL_NAME_dup":["GENERAL_NAME *","(GENERAL_NAME *)"],
"GENERAL_NAME_cmp":["int","(GENERAL_NAME *, GENERAL_NAME *)"],
"v2i_ASN1_BIT_STRING":["ASN1_BIT_STRING *","(X509V3_EXT_METHOD *, X509V3_CTX *, struct stack_st_CONF_VALUE *)"],
"i2v_ASN1_BIT_STRING":["struct stack_st_CONF_VALUE *","(X509V3_EXT_METHOD *, ASN1_BIT_STRING *, struct stack_st_CONF_VALUE *)"],
"i2s_ASN1_IA5STRING":["char *","(X509V3_EXT_METHOD *, ASN1_IA5STRING *)"],
"s2i_ASN1_IA5STRING":["ASN1_IA5STRING *","(X509V3_EXT_METHOD *, X509V3_CTX *, const char *)"],
"i2v_GENERAL_NAME":["struct stack_st_CONF_VALUE *","(X509V3_EXT_METHOD *, GENERAL_NAME *, struct stack_st_CONF_VALUE *)"],
"GENERAL_NAME_print":["int","(BIO *, GENERAL_NAME *)"],
"GENERAL_NAMES_new":["GENERAL_NAMES *","()"],
"GENERAL_NAMES_free":["void","(GENERAL_NAMES *)"],
"d2i_GENERAL_NAMES":["GENERAL_NAMES *","(GENERAL_NAMES **, const unsigned char **, long)"],
"i2d_GENERAL_NAMES":["int","(GENERAL_NAMES *, unsigned char **)"],
"i2v_GENERAL_NAMES":["struct stack_st_CONF_VALUE *","(X509V3_EXT_METHOD *, GENERAL_NAMES *, struct stack_st_CONF_VALUE *)"],
"v2i_GENERAL_NAMES":["GENERAL_NAMES *","(const X509V3_EXT_METHOD *, X509V3_CTX *, struct stack_st_CONF_VALUE *)"],
"OTHERNAME_new":["OTHERNAME *","()"],
"OTHERNAME_free":["void","(OTHERNAME *)"],
"d2i_OTHERNAME":["OTHERNAME *","(OTHERNAME **, const unsigned char **, long)"],
"i2d_OTHERNAME":["int","(OTHERNAME *, unsigned char **)"],
"EDIPARTYNAME_new":["EDIPARTYNAME *","()"],
"EDIPARTYNAME_free":["void","(EDIPARTYNAME *)"],
"d2i_EDIPARTYNAME":["EDIPARTYNAME *","(EDIPARTYNAME **, const unsigned char **, long)"],
"i2d_EDIPARTYNAME":["int","(EDIPARTYNAME *, unsigned char **)"],
"OTHERNAME_cmp":["int","(OTHERNAME *, OTHERNAME *)"],
"GENERAL_NAME_set0_value":["void","(GENERAL_NAME *, int, void *)"],
"GENERAL_NAME_get0_value":["void *","(const GENERAL_NAME *, int *)"],
"GENERAL_NAME_set0_othername":["int","(GENERAL_NAME *, ASN1_OBJECT *, ASN1_TYPE *)"],
"GENERAL_NAME_get0_otherName":["int","(const GENERAL_NAME *, ASN1_OBJECT **, ASN1_TYPE **)"],
"i2s_ASN1_OCTET_STRING":["char *","(X509V3_EXT_METHOD *, const ASN1_OCTET_STRING *)"],
"s2i_ASN1_OCTET_STRING":["ASN1_OCTET_STRING *","(X509V3_EXT_METHOD *, X509V3_CTX *, const char *)"],
"EXTENDED_KEY_USAGE_new":["EXTENDED_KEY_USAGE *","()"],
"EXTENDED_KEY_USAGE_free":["void","(EXTENDED_KEY_USAGE *)"],
"d2i_EXTENDED_KEY_USAGE":["EXTENDED_KEY_USAGE *","(EXTENDED_KEY_USAGE **, const unsigned char **, long)"],
"i2d_EXTENDED_KEY_USAGE":["int","(EXTENDED_KEY_USAGE *, unsigned char **)"],
"i2a_ACCESS_DESCRIPTION":["int","(BIO *, const ACCESS_DESCRIPTION *)"],
"TLS_FEATURE_new":["TLS_FEATURE *","()"],
"TLS_FEATURE_free":["void","(TLS_FEATURE *)"],
"CERTIFICATEPOLICIES_new":["CERTIFICATEPOLICIES *","()"],
"CERTIFICATEPOLICIES_free":["void","(CERTIFICATEPOLICIES *)"],
"d2i_CERTIFICATEPOLICIES":["CERTIFICATEPOLICIES *","(CERTIFICATEPOLICIES **, const unsigned char **, long)"],
"i2d_CERTIFICATEPOLICIES":["int","(CERTIFICATEPOLICIES *, unsigned char **)"],
"POLICYINFO_new":["POLICYINFO *","()"],
"POLICYINFO_free":["void","(POLICYINFO *)"],
"d2i_POLICYINFO":["POLICYINFO *","(POLICYINFO **, const unsigned char **, long)"],
"i2d_POLICYINFO":["int","(POLICYINFO *, unsigned char **)"],
"POLICYQUALINFO_new":["POLICYQUALINFO *","()"],
"POLICYQUALINFO_free":["void","(POLICYQUALINFO *)"],
"d2i_POLICYQUALINFO":["POLICYQUALINFO *","(POLICYQUALINFO **, const unsigned char **, long)"],
"i2d_POLICYQUALINFO":["int","(POLICYQUALINFO *, unsigned char **)"],
"USERNOTICE_new":["USERNOTICE *","()"],
"USERNOTICE_free":["void","(USERNOTICE *)"],
"d2i_USERNOTICE":["USERNOTICE *","(USERNOTICE **, const unsigned char **, long)"],
"i2d_USERNOTICE":["int","(USERNOTICE *, unsigned char **)"],
"NOTICEREF_new":["NOTICEREF *","()"],
"NOTICEREF_free":["void","(NOTICEREF *)"],
"d2i_NOTICEREF":["NOTICEREF *","(NOTICEREF **, const unsigned char **, long)"],
"i2d_NOTICEREF":["int","(NOTICEREF *, unsigned char **)"],
"CRL_DIST_POINTS_new":["CRL_DIST_POINTS *","()"],
"CRL_DIST_POINTS_free":["void","(CRL_DIST_POINTS *)"],
"d2i_CRL_DIST_POINTS":["CRL_DIST_POINTS *","(CRL_DIST_POINTS **, const unsigned char **, long)"],
"i2d_CRL_DIST_POINTS":["int","(CRL_DIST_POINTS *, unsigned char **)"],
"DIST_POINT_new":["DIST_POINT *","()"],
"DIST_POINT_free":["void","(DIST_POINT *)"],
"d2i_DIST_POINT":["DIST_POINT *","(DIST_POINT **, const unsigned char **, long)"],
"i2d_DIST_POINT":["int","(DIST_POINT *, unsigned char **)"],
"DIST_POINT_NAME_new":["DIST_POINT_NAME *","()"],
"DIST_POINT_NAME_free":["void","(DIST_POINT_NAME *)"],
"d2i_DIST_POINT_NAME":["DIST_POINT_NAME *","(DIST_POINT_NAME **, const unsigned char **, long)"],
"i2d_DIST_POINT_NAME":["int","(DIST_POINT_NAME *, unsigned char **)"],
"ISSUING_DIST_POINT_new":["ISSUING_DIST_POINT *","()"],
"ISSUING_DIST_POINT_free":["void","(ISSUING_DIST_POINT *)"],
"d2i_ISSUING_DIST_POINT":["ISSUING_DIST_POINT *","(ISSUING_DIST_POINT **, const unsigned char **, long)"],
"i2d_ISSUING_DIST_POINT":["int","(ISSUING_DIST_POINT *, unsigned char **)"],
"DIST_POINT_set_dpname":["int","(DIST_POINT_NAME *, X509_NAME *)"],
"NAME_CONSTRAINTS_check":["int","(X509 *, NAME_CONSTRAINTS *)"],
"NAME_CONSTRAINTS_check_CN":["int","(X509 *, NAME_CONSTRAINTS *)"],
"ACCESS_DESCRIPTION_new":["ACCESS_DESCRIPTION *","()"],
"ACCESS_DESCRIPTION_free":["void","(ACCESS_DESCRIPTION *)"],
"d2i_ACCESS_DESCRIPTION":["ACCESS_DESCRIPTION *","(ACCESS_DESCRIPTION **, const unsigned char **, long)"],
"i2d_ACCESS_DESCRIPTION":["int","(ACCESS_DESCRIPTION *, unsigned char **)"],
"AUTHORITY_INFO_ACCESS_new":["AUTHORITY_INFO_ACCESS *","()"],
"AUTHORITY_INFO_ACCESS_free":["void","(AUTHORITY_INFO_ACCESS *)"],
"d2i_AUTHORITY_INFO_ACCESS":["AUTHORITY_INFO_ACCESS *","(AUTHORITY_INFO_ACCESS **, const unsigned char **, long)"],
"i2d_AUTHORITY_INFO_ACCESS":["int","(AUTHORITY_INFO_ACCESS *, unsigned char **)"],
"POLICY_MAPPING_new":["POLICY_MAPPING *","()"],
"POLICY_MAPPING_free":["void","(POLICY_MAPPING *)"],
"GENERAL_SUBTREE_new":["GENERAL_SUBTREE *","()"],
"GENERAL_SUBTREE_free":["void","(GENERAL_SUBTREE *)"],
"NAME_CONSTRAINTS_new":["NAME_CONSTRAINTS *","()"],
"NAME_CONSTRAINTS_free":["void","(NAME_CONSTRAINTS *)"],
"POLICY_CONSTRAINTS_new":["POLICY_CONSTRAINTS *","()"],
"POLICY_CONSTRAINTS_free":["void","(POLICY_CONSTRAINTS *)"],
"a2i_GENERAL_NAME":["GENERAL_NAME *","(GENERAL_NAME *, const X509V3_EXT_METHOD *, X509V3_CTX *, int, const char *, int)"],
"v2i_GENERAL_NAME":["GENERAL_NAME *","(const X509V3_EXT_METHOD *, X509V3_CTX *, CONF_VALUE *)"],
"v2i_GENERAL_NAME_ex":["GENERAL_NAME *","(GENERAL_NAME *, const X509V3_EXT_METHOD *, X509V3_CTX *, CONF_VALUE *, int)"],
"X509V3_conf_free":["void","(CONF_VALUE *)"],
"X509V3_EXT_nconf_nid":["X509_EXTENSION *","(CONF *, X509V3_CTX *, int, const char *)"],
"X509V3_EXT_nconf":["X509_EXTENSION *","(CONF *, X509V3_CTX *, const char *, const char *)"],
"X509V3_EXT_add_nconf_sk":["int","(CONF *, X509V3_CTX *, const char *, struct stack_st_X509_EXTENSION **)"],
"X509V3_EXT_add_nconf":["int","(CONF *, X509V3_CTX *, const char *, X509 *)"],
"X509V3_EXT_REQ_add_nconf":["int","(CONF *, X509V3_CTX *, const char *, X509_REQ *)"],
"X509V3_EXT_CRL_add_nconf":["int","(CONF *, X509V3_CTX *, const char *, X509_CRL *)"],
"X509V3_EXT_conf_nid":["X509_EXTENSION *","(struct lhash_st_CONF_VALUE *, X509V3_CTX *, int, const char *)"],
"X509V3_EXT_conf":["X509_EXTENSION *","(struct lhash_st_CONF_VALUE *, X509V3_CTX *, const char *, const char *)"],
"X509V3_EXT_add_conf":["int","(struct lhash_st_CONF_VALUE *, X509V3_CTX *, const char *, X509 *)"],
"X509V3_EXT_REQ_add_conf":["int","(struct lhash_st_CONF_VALUE *, X509V3_CTX *, const char *, X509_REQ *)"],
"X509V3_EXT_CRL_add_conf":["int","(struct lhash_st_CONF_VALUE *, X509V3_CTX *, const char *, X509_CRL *)"],
"X509V3_add_value_bool_nf":["int","(const char *, int, struct stack_st_CONF_VALUE **)"],
"X509V3_get_value_bool":["int","(const CONF_VALUE *, int *)"],
"X509V3_get_value_int":["int","(const CONF_VALUE *, ASN1_INTEGER **)"],
"X509V3_set_nconf":["void","(X509V3_CTX *, CONF *)"],
"X509V3_set_conf_lhash":["void","(X509V3_CTX *, struct lhash_st_CONF_VALUE *)"],
"X509V3_get_string":["char *","(X509V3_CTX *, const char *, const char *)"],
"X509V3_get_section":["struct stack_st_CONF_VALUE *","(X509V3_CTX *, const char *)"],
"X509V3_string_free":["void","(X509V3_CTX *, char *)"],
"X509V3_section_free":["void","(X509V3_CTX *, struct stack_st_CONF_VALUE *)"],
"X509V3_set_ctx":["void","(X509V3_CTX *, X509 *, X509 *, X509_REQ *, X509_CRL *, int)"],
"X509V3_add_value":["int","(const char *, const char *, struct stack_st_CONF_VALUE **)"],
"X509V3_add_value_uchar":["int","(const char *, const unsigned char *, struct stack_st_CONF_VALUE **)"],
"X509V3_add_value_bool":["int","(const char *, int, struct stack_st_CONF_VALUE **)"],
"X509V3_add_value_int":["int","(const char *, const ASN1_INTEGER *, struct stack_st_CONF_VALUE **)"],
"i2s_ASN1_INTEGER":["char *","(X509V3_EXT_METHOD *, const ASN1_INTEGER *)"],
"s2i_ASN1_INTEGER":["ASN1_INTEGER *","(X509V3_EXT_METHOD *, const char *)"],
"i2s_ASN1_ENUMERATED":["char *","(X509V3_EXT_METHOD *, const ASN1_ENUMERATED *)"],
"i2s_ASN1_ENUMERATED_TABLE":["char *","(X509V3_EXT_METHOD *, const ASN1_ENUMERATED *)"],
"X509V3_EXT_add":["int","(X509V3_EXT_METHOD *)"],
"X509V3_EXT_add_list":["int","(X509V3_EXT_METHOD *)"],
"X509V3_EXT_add_alias":["int","(int, int)"],
"X509V3_EXT_cleanup":["void","()"],
"X509V3_EXT_get":["const X509V3_EXT_METHOD *","(X509_EXTENSION *)"],
"X509V3_EXT_get_nid":["const X509V3_EXT_METHOD *","(int)"],
"X509V3_add_standard_extensions":["int","()"],
"X509V3_parse_list":["struct stack_st_CONF_VALUE *","(const char *)"],
"X509V3_EXT_d2i":["void *","(X509_EXTENSION *)"],
"X509V3_get_d2i":["void *","(const struct stack_st_X509_EXTENSION *, int, int *, int *)"],
"X509V3_EXT_i2d":["X509_EXTENSION *","(int, int, void *)"],
"X509V3_add1_i2d":["int","(struct stack_st_X509_EXTENSION **, int, void *, int, unsigned long)"],
"X509V3_EXT_val_prn":["void","(BIO *, struct stack_st_CONF_VALUE *, int, int)"],
"X509V3_EXT_print":["int","(BIO *, X509_EXTENSION *, unsigned long, int)"],
"X509V3_EXT_print_fp":["int","(int *, X509_EXTENSION *, int, int)"],
"X509V3_extensions_print":["int","(BIO *, const char *, const struct stack_st_X509_EXTENSION *, unsigned long, int)"],
"X509_check_ca":["int","(X509 *)"],
"X509_check_purpose":["int","(X509 *, int, int)"],
"X509_supported_extension":["int","(X509_EXTENSION *)"],
"X509_PURPOSE_set":["int","(int *, int)"],
"X509_check_issued":["int","(X509 *, X509 *)"],
"X509_check_akid":["int","(X509 *, AUTHORITY_KEYID *)"],
"X509_set_proxy_flag":["void","(X509 *)"],
"X509_set_proxy_pathlen":["void","(X509 *, long)"],
"X509_get_proxy_pathlen":["long","(X509 *)"],
"X509_get_extension_flags":["int","(X509 *)"],
"X509_get_key_usage":["int","(X509 *)"],
"X509_get_extended_key_usage":["int","(X509 *)"],
"X509_get0_subject_key_id":["const ASN1_OCTET_STRING *","(X509 *)"],
"X509_get0_authority_key_id":["const ASN1_OCTET_STRING *","(X509 *)"],
"X509_get0_authority_issuer":["const GENERAL_NAMES *","(X509 *)"],
"X509_get0_authority_serial":["const ASN1_INTEGER *","(X509 *)"],
"X509_PURPOSE_get_count":["int","()"],
"X509_PURPOSE_get0":["X509_PURPOSE *","(int)"],
"X509_PURPOSE_get_by_sname":["int","(const char *)"],
"X509_PURPOSE_get_by_id":["int","(int)"],
"X509_PURPOSE_add":["int","(int, int, int, int (*)(const X509_PURPOSE *, const X509 *, int), const char *, const char *, void *)"],
"X509_PURPOSE_get0_name":["char *","(const X509_PURPOSE *)"],
"X509_PURPOSE_get0_sname":["char *","(const X509_PURPOSE *)"],
"X509_PURPOSE_get_trust":["int","(const X509_PURPOSE *)"],
"X509_PURPOSE_cleanup":["void","()"],
"X509_PURPOSE_get_id":["int","(const X509_PURPOSE *)"],
"X509_get1_email":["struct stack_st_OPENSSL_STRING *","(X509 *)"],
"X509_REQ_get1_email":["struct stack_st_OPENSSL_STRING *","(X509_REQ *)"],
"X509_email_free":["void","(struct stack_st_OPENSSL_STRING *)"],
"X509_get1_ocsp":["struct stack_st_OPENSSL_STRING *","(X509 *)"],
"X509_check_host":["int","(X509 *, const char *, int, unsigned int, char **)"],
"X509_check_email":["int","(X509 *, const char *, int, unsigned int)"],
"X509_check_ip":["int","(X509 *, const unsigned char *, int, unsigned int)"],
"X509_check_ip_asc":["int","(X509 *, const char *, unsigned int)"],
"a2i_IPADDRESS":["ASN1_OCTET_STRING *","(const char *)"],
"a2i_IPADDRESS_NC":["ASN1_OCTET_STRING *","(const char *)"],
"X509V3_NAME_from_section":["int","(X509_NAME *, struct stack_st_CONF_VALUE *, unsigned long)"],
"X509_POLICY_NODE_print":["void","(BIO *, X509_POLICY_NODE *, int)"],
"sk_X509_POLICY_NODE_num":["int","(const struct stack_st_X509_POLICY_NODE *)"],
"sk_X509_POLICY_NODE_value":["X509_POLICY_NODE *","(const struct stack_st_X509_POLICY_NODE *, int)"],
"sk_X509_POLICY_NODE_new":["struct stack_st_X509_POLICY_NODE *","(sk_X509_POLICY_NODE_compfunc)"],
"sk_X509_POLICY_NODE_new_null":["struct stack_st_X509_POLICY_NODE *","()"],
"sk_X509_POLICY_NODE_new_reserve":["struct stack_st_X509_POLICY_NODE *","(sk_X509_POLICY_NODE_compfunc, int)"],
"sk_X509_POLICY_NODE_reserve":["int","(struct stack_st_X509_POLICY_NODE *, int)"],
"sk_X509_POLICY_NODE_free":["void","(struct stack_st_X509_POLICY_NODE *)"],
"sk_X509_POLICY_NODE_zero":["void","(struct stack_st_X509_POLICY_NODE *)"],
"sk_X509_POLICY_NODE_delete":["X509_POLICY_NODE *","(struct stack_st_X509_POLICY_NODE *, int)"],
"sk_X509_POLICY_NODE_delete_ptr":["X509_POLICY_NODE *","(struct stack_st_X509_POLICY_NODE *, X509_POLICY_NODE *)"],
"sk_X509_POLICY_NODE_push":["int","(struct stack_st_X509_POLICY_NODE *, X509_POLICY_NODE *)"],
"sk_X509_POLICY_NODE_unshift":["int","(struct stack_st_X509_POLICY_NODE *, X509_POLICY_NODE *)"],
"sk_X509_POLICY_NODE_pop":["X509_POLICY_NODE *","(struct stack_st_X509_POLICY_NODE *)"],
"sk_X509_POLICY_NODE_shift":["X509_POLICY_NODE *","(struct stack_st_X509_POLICY_NODE *)"],
"sk_X509_POLICY_NODE_pop_free":["void","(struct stack_st_X509_POLICY_NODE *, sk_X509_POLICY_NODE_freefunc)"],
"sk_X509_POLICY_NODE_insert":["int","(struct stack_st_X509_POLICY_NODE *, X509_POLICY_NODE *, int)"],
"sk_X509_POLICY_NODE_set":["X509_POLICY_NODE *","(struct stack_st_X509_POLICY_NODE *, int, X509_POLICY_NODE *)"],
"sk_X509_POLICY_NODE_find":["int","(struct stack_st_X509_POLICY_NODE *, X509_POLICY_NODE *)"],
"sk_X509_POLICY_NODE_find_ex":["int","(struct stack_st_X509_POLICY_NODE *, X509_POLICY_NODE *)"],
"sk_X509_POLICY_NODE_sort":["void","(struct stack_st_X509_POLICY_NODE *)"],
"sk_X509_POLICY_NODE_is_sorted":["int","(const struct stack_st_X509_POLICY_NODE *)"],
"sk_X509_POLICY_NODE_dup":["struct stack_st_X509_POLICY_NODE *","(const struct stack_st_X509_POLICY_NODE *)"],
"sk_X509_POLICY_NODE_deep_copy":["struct stack_st_X509_POLICY_NODE *","(const struct stack_st_X509_POLICY_NODE *, sk_X509_POLICY_NODE_copyfunc, sk_X509_POLICY_NODE_freefunc)"],
"sk_X509_POLICY_NODE_set_cmp_func":["sk_X509_POLICY_NODE_compfunc","(struct stack_st_X509_POLICY_NODE *, sk_X509_POLICY_NODE_compfunc)"],
"sk_ASIdOrRange_num":["int","(const struct stack_st_ASIdOrRange *)"],
"sk_ASIdOrRange_value":["ASIdOrRange *","(const struct stack_st_ASIdOrRange *, int)"],
"sk_ASIdOrRange_new":["struct stack_st_ASIdOrRange *","(sk_ASIdOrRange_compfunc)"],
"sk_ASIdOrRange_new_null":["struct stack_st_ASIdOrRange *","()"],
"sk_ASIdOrRange_new_reserve":["struct stack_st_ASIdOrRange *","(sk_ASIdOrRange_compfunc, int)"],
"sk_ASIdOrRange_reserve":["int","(struct stack_st_ASIdOrRange *, int)"],
"sk_ASIdOrRange_free":["void","(struct stack_st_ASIdOrRange *)"],
"sk_ASIdOrRange_zero":["void","(struct stack_st_ASIdOrRange *)"],
"sk_ASIdOrRange_delete":["ASIdOrRange *","(struct stack_st_ASIdOrRange *, int)"],
"sk_ASIdOrRange_delete_ptr":["ASIdOrRange *","(struct stack_st_ASIdOrRange *, ASIdOrRange *)"],
"sk_ASIdOrRange_push":["int","(struct stack_st_ASIdOrRange *, ASIdOrRange *)"],
"sk_ASIdOrRange_unshift":["int","(struct stack_st_ASIdOrRange *, ASIdOrRange *)"],
"sk_ASIdOrRange_pop":["ASIdOrRange *","(struct stack_st_ASIdOrRange *)"],
"sk_ASIdOrRange_shift":["ASIdOrRange *","(struct stack_st_ASIdOrRange *)"],
"sk_ASIdOrRange_pop_free":["void","(struct stack_st_ASIdOrRange *, sk_ASIdOrRange_freefunc)"],
"sk_ASIdOrRange_insert":["int","(struct stack_st_ASIdOrRange *, ASIdOrRange *, int)"],
"sk_ASIdOrRange_set":["ASIdOrRange *","(struct stack_st_ASIdOrRange *, int, ASIdOrRange *)"],
"sk_ASIdOrRange_find":["int","(struct stack_st_ASIdOrRange *, ASIdOrRange *)"],
"sk_ASIdOrRange_find_ex":["int","(struct stack_st_ASIdOrRange *, ASIdOrRange *)"],
"sk_ASIdOrRange_sort":["void","(struct stack_st_ASIdOrRange *)"],
"sk_ASIdOrRange_is_sorted":["int","(const struct stack_st_ASIdOrRange *)"],
"sk_ASIdOrRange_dup":["struct stack_st_ASIdOrRange *","(const struct stack_st_ASIdOrRange *)"],
"sk_ASIdOrRange_deep_copy":["struct stack_st_ASIdOrRange *","(const struct stack_st_ASIdOrRange *, sk_ASIdOrRange_copyfunc, sk_ASIdOrRange_freefunc)"],
"sk_ASIdOrRange_set_cmp_func":["sk_ASIdOrRange_compfunc","(struct stack_st_ASIdOrRange *, sk_ASIdOrRange_compfunc)"],
"ASRange_new":["ASRange *","()"],
"ASRange_free":["void","(ASRange *)"],
"d2i_ASRange":["ASRange *","(ASRange **, const unsigned char **, long)"],
"i2d_ASRange":["int","(ASRange *, unsigned char **)"],
"ASIdOrRange_new":["ASIdOrRange *","()"],
"ASIdOrRange_free":["void","(ASIdOrRange *)"],
"d2i_ASIdOrRange":["ASIdOrRange *","(ASIdOrRange **, const unsigned char **, long)"],
"i2d_ASIdOrRange":["int","(ASIdOrRange *, unsigned char **)"],
"ASIdentifierChoice_new":["ASIdentifierChoice *","()"],
"ASIdentifierChoice_free":["void","(ASIdentifierChoice *)"],
"d2i_ASIdentifierChoice":["ASIdentifierChoice *","(ASIdentifierChoice **, const unsigned char **, long)"],
"i2d_ASIdentifierChoice":["int","(ASIdentifierChoice *, unsigned char **)"],
"ASIdentifiers_new":["ASIdentifiers *","()"],
"ASIdentifiers_free":["void","(ASIdentifiers *)"],
"d2i_ASIdentifiers":["ASIdentifiers *","(ASIdentifiers **, const unsigned char **, long)"],
"i2d_ASIdentifiers":["int","(ASIdentifiers *, unsigned char **)"],
"sk_IPAddressOrRange_num":["int","(const struct stack_st_IPAddressOrRange *)"],
"sk_IPAddressOrRange_value":["IPAddressOrRange *","(const struct stack_st_IPAddressOrRange *, int)"],
"sk_IPAddressOrRange_new":["struct stack_st_IPAddressOrRange *","(sk_IPAddressOrRange_compfunc)"],
"sk_IPAddressOrRange_new_null":["struct stack_st_IPAddressOrRange *","()"],
"sk_IPAddressOrRange_new_reserve":["struct stack_st_IPAddressOrRange *","(sk_IPAddressOrRange_compfunc, int)"],
"sk_IPAddressOrRange_reserve":["int","(struct stack_st_IPAddressOrRange *, int)"],
"sk_IPAddressOrRange_free":["void","(struct stack_st_IPAddressOrRange *)"],
"sk_IPAddressOrRange_zero":["void","(struct stack_st_IPAddressOrRange *)"],
"sk_IPAddressOrRange_delete":["IPAddressOrRange *","(struct stack_st_IPAddressOrRange *, int)"],
"sk_IPAddressOrRange_delete_ptr":["IPAddressOrRange *","(struct stack_st_IPAddressOrRange *, IPAddressOrRange *)"],
"sk_IPAddressOrRange_push":["int","(struct stack_st_IPAddressOrRange *, IPAddressOrRange *)"],
"sk_IPAddressOrRange_unshift":["int","(struct stack_st_IPAddressOrRange *, IPAddressOrRange *)"],
"sk_IPAddressOrRange_pop":["IPAddressOrRange *","(struct stack_st_IPAddressOrRange *)"],
"sk_IPAddressOrRange_shift":["IPAddressOrRange *","(struct stack_st_IPAddressOrRange *)"],
"sk_IPAddressOrRange_pop_free":["void","(struct stack_st_IPAddressOrRange *, sk_IPAddressOrRange_freefunc)"],
"sk_IPAddressOrRange_insert":["int","(struct stack_st_IPAddressOrRange *, IPAddressOrRange *, int)"],
"sk_IPAddressOrRange_set":["IPAddressOrRange *","(struct stack_st_IPAddressOrRange *, int, IPAddressOrRange *)"],
"sk_IPAddressOrRange_find":["int","(struct stack_st_IPAddressOrRange *, IPAddressOrRange *)"],
"sk_IPAddressOrRange_find_ex":["int","(struct stack_st_IPAddressOrRange *, IPAddressOrRange *)"],
"sk_IPAddressOrRange_sort":["void","(struct stack_st_IPAddressOrRange *)"],
"sk_IPAddressOrRange_is_sorted":["int","(const struct stack_st_IPAddressOrRange *)"],
"sk_IPAddressOrRange_dup":["struct stack_st_IPAddressOrRange *","(const struct stack_st_IPAddressOrRange *)"],
"sk_IPAddressOrRange_deep_copy":["struct stack_st_IPAddressOrRange *","(const struct stack_st_IPAddressOrRange *, sk_IPAddressOrRange_copyfunc, sk_IPAddressOrRange_freefunc)"],
"sk_IPAddressOrRange_set_cmp_func":["sk_IPAddressOrRange_compfunc","(struct stack_st_IPAddressOrRange *, sk_IPAddressOrRange_compfunc)"],
"sk_IPAddressFamily_num":["int","(const struct stack_st_IPAddressFamily *)"],
"sk_IPAddressFamily_value":["IPAddressFamily *","(const struct stack_st_IPAddressFamily *, int)"],
"sk_IPAddressFamily_new":["struct stack_st_IPAddressFamily *","(sk_IPAddressFamily_compfunc)"],
"sk_IPAddressFamily_new_null":["struct stack_st_IPAddressFamily *","()"],
"sk_IPAddressFamily_new_reserve":["struct stack_st_IPAddressFamily *","(sk_IPAddressFamily_compfunc, int)"],
"sk_IPAddressFamily_reserve":["int","(struct stack_st_IPAddressFamily *, int)"],
"sk_IPAddressFamily_free":["void","(struct stack_st_IPAddressFamily *)"],
"sk_IPAddressFamily_zero":["void","(struct stack_st_IPAddressFamily *)"],
"sk_IPAddressFamily_delete":["IPAddressFamily *","(struct stack_st_IPAddressFamily *, int)"],
"sk_IPAddressFamily_delete_ptr":["IPAddressFamily *","(struct stack_st_IPAddressFamily *, IPAddressFamily *)"],
"sk_IPAddressFamily_push":["int","(struct stack_st_IPAddressFamily *, IPAddressFamily *)"],
"sk_IPAddressFamily_unshift":["int","(struct stack_st_IPAddressFamily *, IPAddressFamily *)"],
"sk_IPAddressFamily_pop":["IPAddressFamily *","(struct stack_st_IPAddressFamily *)"],
"sk_IPAddressFamily_shift":["IPAddressFamily *","(struct stack_st_IPAddressFamily *)"],
"sk_IPAddressFamily_pop_free":["void","(struct stack_st_IPAddressFamily *, sk_IPAddressFamily_freefunc)"],
"sk_IPAddressFamily_insert":["int","(struct stack_st_IPAddressFamily *, IPAddressFamily *, int)"],
"sk_IPAddressFamily_set":["IPAddressFamily *","(struct stack_st_IPAddressFamily *, int, IPAddressFamily *)"],
"sk_IPAddressFamily_find":["int","(struct stack_st_IPAddressFamily *, IPAddressFamily *)"],
"sk_IPAddressFamily_find_ex":["int","(struct stack_st_IPAddressFamily *, IPAddressFamily *)"],
"sk_IPAddressFamily_sort":["void","(struct stack_st_IPAddressFamily *)"],
"sk_IPAddressFamily_is_sorted":["int","(const struct stack_st_IPAddressFamily *)"],
"sk_IPAddressFamily_dup":["struct stack_st_IPAddressFamily *","(const struct stack_st_IPAddressFamily *)"],
"sk_IPAddressFamily_deep_copy":["struct stack_st_IPAddressFamily *","(const struct stack_st_IPAddressFamily *, sk_IPAddressFamily_copyfunc, sk_IPAddressFamily_freefunc)"],
"sk_IPAddressFamily_set_cmp_func":["sk_IPAddressFamily_compfunc","(struct stack_st_IPAddressFamily *, sk_IPAddressFamily_compfunc)"],
"IPAddressRange_new":["IPAddressRange *","()"],
"IPAddressRange_free":["void","(IPAddressRange *)"],
"d2i_IPAddressRange":["IPAddressRange *","(IPAddressRange **, const unsigned char **, long)"],
"i2d_IPAddressRange":["int","(IPAddressRange *, unsigned char **)"],
"IPAddressOrRange_new":["IPAddressOrRange *","()"],
"IPAddressOrRange_free":["void","(IPAddressOrRange *)"],
"d2i_IPAddressOrRange":["IPAddressOrRange *","(IPAddressOrRange **, const unsigned char **, long)"],
"i2d_IPAddressOrRange":["int","(IPAddressOrRange *, unsigned char **)"],
"IPAddressChoice_new":["IPAddressChoice *","()"],
"IPAddressChoice_free":["void","(IPAddressChoice *)"],
"d2i_IPAddressChoice":["IPAddressChoice *","(IPAddressChoice **, const unsigned char **, long)"],
"i2d_IPAddressChoice":["int","(IPAddressChoice *, unsigned char **)"],
"IPAddressFamily_new":["IPAddressFamily *","()"],
"IPAddressFamily_free":["void","(IPAddressFamily *)"],
"d2i_IPAddressFamily":["IPAddressFamily *","(IPAddressFamily **, const unsigned char **, long)"],
"i2d_IPAddressFamily":["int","(IPAddressFamily *, unsigned char **)"],
"X509v3_asid_add_inherit":["int","(ASIdentifiers *, int)"],
"X509v3_asid_add_id_or_range":["int","(ASIdentifiers *, int, ASN1_INTEGER *, ASN1_INTEGER *)"],
"X509v3_addr_add_inherit":["int","(IPAddrBlocks *, const unsigned int, const unsigned int *)"],
"X509v3_addr_add_prefix":["int","(IPAddrBlocks *, const unsigned int, const unsigned int *, unsigned char *, const int)"],
"X509v3_addr_add_range":["int","(IPAddrBlocks *, const unsigned int, const unsigned int *, unsigned char *, unsigned char *)"],
"X509v3_addr_get_afi":["unsigned int","(const IPAddressFamily *)"],
"X509v3_addr_get_range":["int","(IPAddressOrRange *, const unsigned int, unsigned char *, unsigned char *, const int)"],
"X509v3_asid_is_canonical":["int","(ASIdentifiers *)"],
"X509v3_addr_is_canonical":["int","(IPAddrBlocks *)"],
"X509v3_asid_canonize":["int","(ASIdentifiers *)"],
"X509v3_addr_canonize":["int","(IPAddrBlocks *)"],
"X509v3_asid_inherits":["int","(ASIdentifiers *)"],
"X509v3_addr_inherits":["int","(IPAddrBlocks *)"],
"X509v3_asid_subset":["int","(ASIdentifiers *, ASIdentifiers *)"],
"X509v3_addr_subset":["int","(IPAddrBlocks *, IPAddrBlocks *)"],
"X509v3_asid_validate_path":["int","(X509_STORE_CTX *)"],
"X509v3_addr_validate_path":["int","(X509_STORE_CTX *)"],
"X509v3_asid_validate_resource_set":["int","(struct stack_st_X509 *, ASIdentifiers *, int)"],
"X509v3_addr_validate_resource_set":["int","(struct stack_st_X509 *, IPAddrBlocks *, int)"],
"sk_ASN1_STRING_num":["int","(const struct stack_st_ASN1_STRING *)"],
"sk_ASN1_STRING_value":["ASN1_STRING *","(const struct stack_st_ASN1_STRING *, int)"],
"sk_ASN1_STRING_new":["struct stack_st_ASN1_STRING *","(sk_ASN1_STRING_compfunc)"],
"sk_ASN1_STRING_new_null":["struct stack_st_ASN1_STRING *","()"],
"sk_ASN1_STRING_new_reserve":["struct stack_st_ASN1_STRING *","(sk_ASN1_STRING_compfunc, int)"],
"sk_ASN1_STRING_reserve":["int","(struct stack_st_ASN1_STRING *, int)"],
"sk_ASN1_STRING_free":["void","(struct stack_st_ASN1_STRING *)"],
"sk_ASN1_STRING_zero":["void","(struct stack_st_ASN1_STRING *)"],
"sk_ASN1_STRING_delete":["ASN1_STRING *","(struct stack_st_ASN1_STRING *, int)"],
"sk_ASN1_STRING_delete_ptr":["ASN1_STRING *","(struct stack_st_ASN1_STRING *, ASN1_STRING *)"],
"sk_ASN1_STRING_push":["int","(struct stack_st_ASN1_STRING *, ASN1_STRING *)"],
"sk_ASN1_STRING_unshift":["int","(struct stack_st_ASN1_STRING *, ASN1_STRING *)"],
"sk_ASN1_STRING_pop":["ASN1_STRING *","(struct stack_st_ASN1_STRING *)"],
"sk_ASN1_STRING_shift":["ASN1_STRING *","(struct stack_st_ASN1_STRING *)"],
"sk_ASN1_STRING_pop_free":["void","(struct stack_st_ASN1_STRING *, sk_ASN1_STRING_freefunc)"],
"sk_ASN1_STRING_insert":["int","(struct stack_st_ASN1_STRING *, ASN1_STRING *, int)"],
"sk_ASN1_STRING_set":["ASN1_STRING *","(struct stack_st_ASN1_STRING *, int, ASN1_STRING *)"],
"sk_ASN1_STRING_find":["int","(struct stack_st_ASN1_STRING *, ASN1_STRING *)"],
"sk_ASN1_STRING_find_ex":["int","(struct stack_st_ASN1_STRING *, ASN1_STRING *)"],
"sk_ASN1_STRING_sort":["void","(struct stack_st_ASN1_STRING *)"],
"sk_ASN1_STRING_is_sorted":["int","(const struct stack_st_ASN1_STRING *)"],
"sk_ASN1_STRING_dup":["struct stack_st_ASN1_STRING *","(const struct stack_st_ASN1_STRING *)"],
"sk_ASN1_STRING_deep_copy":["struct stack_st_ASN1_STRING *","(const struct stack_st_ASN1_STRING *, sk_ASN1_STRING_copyfunc, sk_ASN1_STRING_freefunc)"],
"sk_ASN1_STRING_set_cmp_func":["sk_ASN1_STRING_compfunc","(struct stack_st_ASN1_STRING *, sk_ASN1_STRING_compfunc)"],
"NAMING_AUTHORITY_new":["NAMING_AUTHORITY *","()"],
"NAMING_AUTHORITY_free":["void","(NAMING_AUTHORITY *)"],
"d2i_NAMING_AUTHORITY":["NAMING_AUTHORITY *","(NAMING_AUTHORITY **, const unsigned char **, long)"],
"i2d_NAMING_AUTHORITY":["int","(NAMING_AUTHORITY *, unsigned char **)"],
"PROFESSION_INFO_new":["PROFESSION_INFO *","()"],
"PROFESSION_INFO_free":["void","(PROFESSION_INFO *)"],
"d2i_PROFESSION_INFO":["PROFESSION_INFO *","(PROFESSION_INFO **, const unsigned char **, long)"],
"i2d_PROFESSION_INFO":["int","(PROFESSION_INFO *, unsigned char **)"],
"ADMISSIONS_new":["ADMISSIONS *","()"],
"ADMISSIONS_free":["void","(ADMISSIONS *)"],
"d2i_ADMISSIONS":["ADMISSIONS *","(ADMISSIONS **, const unsigned char **, long)"],
"i2d_ADMISSIONS":["int","(ADMISSIONS *, unsigned char **)"],
"ADMISSION_SYNTAX_new":["ADMISSION_SYNTAX *","()"],
"ADMISSION_SYNTAX_free":["void","(ADMISSION_SYNTAX *)"],
"d2i_ADMISSION_SYNTAX":["ADMISSION_SYNTAX *","(ADMISSION_SYNTAX **, const unsigned char **, long)"],
"i2d_ADMISSION_SYNTAX":["int","(ADMISSION_SYNTAX *, unsigned char **)"],
"sk_ADMISSIONS_num":["int","(const struct stack_st_ADMISSIONS *)"],
"sk_ADMISSIONS_value":["ADMISSIONS *","(const struct stack_st_ADMISSIONS *, int)"],
"sk_ADMISSIONS_new":["struct stack_st_ADMISSIONS *","(sk_ADMISSIONS_compfunc)"],
"sk_ADMISSIONS_new_null":["struct stack_st_ADMISSIONS *","()"],
"sk_ADMISSIONS_new_reserve":["struct stack_st_ADMISSIONS *","(sk_ADMISSIONS_compfunc, int)"],
"sk_ADMISSIONS_reserve":["int","(struct stack_st_ADMISSIONS *, int)"],
"sk_ADMISSIONS_free":["void","(struct stack_st_ADMISSIONS *)"],
"sk_ADMISSIONS_zero":["void","(struct stack_st_ADMISSIONS *)"],
"sk_ADMISSIONS_delete":["ADMISSIONS *","(struct stack_st_ADMISSIONS *, int)"],
"sk_ADMISSIONS_delete_ptr":["ADMISSIONS *","(struct stack_st_ADMISSIONS *, ADMISSIONS *)"],
"sk_ADMISSIONS_push":["int","(struct stack_st_ADMISSIONS *, ADMISSIONS *)"],
"sk_ADMISSIONS_unshift":["int","(struct stack_st_ADMISSIONS *, ADMISSIONS *)"],
"sk_ADMISSIONS_pop":["ADMISSIONS *","(struct stack_st_ADMISSIONS *)"],
"sk_ADMISSIONS_shift":["ADMISSIONS *","(struct stack_st_ADMISSIONS *)"],
"sk_ADMISSIONS_pop_free":["void","(struct stack_st_ADMISSIONS *, sk_ADMISSIONS_freefunc)"],
"sk_ADMISSIONS_insert":["int","(struct stack_st_ADMISSIONS *, ADMISSIONS *, int)"],
"sk_ADMISSIONS_set":["ADMISSIONS *","(struct stack_st_ADMISSIONS *, int, ADMISSIONS *)"],
"sk_ADMISSIONS_find":["int","(struct stack_st_ADMISSIONS *, ADMISSIONS *)"],
"sk_ADMISSIONS_find_ex":["int","(struct stack_st_ADMISSIONS *, ADMISSIONS *)"],
"sk_ADMISSIONS_sort":["void","(struct stack_st_ADMISSIONS *)"],
"sk_ADMISSIONS_is_sorted":["int","(const struct stack_st_ADMISSIONS *)"],
"sk_ADMISSIONS_dup":["struct stack_st_ADMISSIONS *","(const struct stack_st_ADMISSIONS *)"],
"sk_ADMISSIONS_deep_copy":["struct stack_st_ADMISSIONS *","(const struct stack_st_ADMISSIONS *, sk_ADMISSIONS_copyfunc, sk_ADMISSIONS_freefunc)"],
"sk_ADMISSIONS_set_cmp_func":["sk_ADMISSIONS_compfunc","(struct stack_st_ADMISSIONS *, sk_ADMISSIONS_compfunc)"],
"sk_PROFESSION_INFO_num":["int","(const struct stack_st_PROFESSION_INFO *)"],
"sk_PROFESSION_INFO_value":["PROFESSION_INFO *","(const struct stack_st_PROFESSION_INFO *, int)"],
"sk_PROFESSION_INFO_new":["struct stack_st_PROFESSION_INFO *","(sk_PROFESSION_INFO_compfunc)"],
"sk_PROFESSION_INFO_new_null":["struct stack_st_PROFESSION_INFO *","()"],
"sk_PROFESSION_INFO_new_reserve":["struct stack_st_PROFESSION_INFO *","(sk_PROFESSION_INFO_compfunc, int)"],
"sk_PROFESSION_INFO_reserve":["int","(struct stack_st_PROFESSION_INFO *, int)"],
"sk_PROFESSION_INFO_free":["void","(struct stack_st_PROFESSION_INFO *)"],
"sk_PROFESSION_INFO_zero":["void","(struct stack_st_PROFESSION_INFO *)"],
"sk_PROFESSION_INFO_delete":["PROFESSION_INFO *","(struct stack_st_PROFESSION_INFO *, int)"],
"sk_PROFESSION_INFO_delete_ptr":["PROFESSION_INFO *","(struct stack_st_PROFESSION_INFO *, PROFESSION_INFO *)"],
"sk_PROFESSION_INFO_push":["int","(struct stack_st_PROFESSION_INFO *, PROFESSION_INFO *)"],
"sk_PROFESSION_INFO_unshift":["int","(struct stack_st_PROFESSION_INFO *, PROFESSION_INFO *)"],
"sk_PROFESSION_INFO_pop":["PROFESSION_INFO *","(struct stack_st_PROFESSION_INFO *)"],
"sk_PROFESSION_INFO_shift":["PROFESSION_INFO *","(struct stack_st_PROFESSION_INFO *)"],
"sk_PROFESSION_INFO_pop_free":["void","(struct stack_st_PROFESSION_INFO *, sk_PROFESSION_INFO_freefunc)"],
"sk_PROFESSION_INFO_insert":["int","(struct stack_st_PROFESSION_INFO *, PROFESSION_INFO *, int)"],
"sk_PROFESSION_INFO_set":["PROFESSION_INFO *","(struct stack_st_PROFESSION_INFO *, int, PROFESSION_INFO *)"],
"sk_PROFESSION_INFO_find":["int","(struct stack_st_PROFESSION_INFO *, PROFESSION_INFO *)"],
"sk_PROFESSION_INFO_find_ex":["int","(struct stack_st_PROFESSION_INFO *, PROFESSION_INFO *)"],
"sk_PROFESSION_INFO_sort":["void","(struct stack_st_PROFESSION_INFO *)"],
"sk_PROFESSION_INFO_is_sorted":["int","(const struct stack_st_PROFESSION_INFO *)"],
"sk_PROFESSION_INFO_dup":["struct stack_st_PROFESSION_INFO *","(const struct stack_st_PROFESSION_INFO *)"],
"sk_PROFESSION_INFO_deep_copy":["struct stack_st_PROFESSION_INFO *","(const struct stack_st_PROFESSION_INFO *, sk_PROFESSION_INFO_copyfunc, sk_PROFESSION_INFO_freefunc)"],
"sk_PROFESSION_INFO_set_cmp_func":["sk_PROFESSION_INFO_compfunc","(struct stack_st_PROFESSION_INFO *, sk_PROFESSION_INFO_compfunc)"],
"NAMING_AUTHORITY_get0_authorityId":["const ASN1_OBJECT *","(const NAMING_AUTHORITY *)"],
"NAMING_AUTHORITY_get0_authorityURL":["const ASN1_IA5STRING *","(const NAMING_AUTHORITY *)"],
"NAMING_AUTHORITY_get0_authorityText":["const ASN1_STRING *","(const NAMING_AUTHORITY *)"],
"NAMING_AUTHORITY_set0_authorityId":["void","(NAMING_AUTHORITY *, ASN1_OBJECT *)"],
"NAMING_AUTHORITY_set0_authorityURL":["void","(NAMING_AUTHORITY *, ASN1_IA5STRING *)"],
"NAMING_AUTHORITY_set0_authorityText":["void","(NAMING_AUTHORITY *, ASN1_STRING *)"],
"ADMISSION_SYNTAX_get0_admissionAuthority":["const GENERAL_NAME *","(const ADMISSION_SYNTAX *)"],
"ADMISSION_SYNTAX_set0_admissionAuthority":["void","(ADMISSION_SYNTAX *, GENERAL_NAME *)"],
"ADMISSION_SYNTAX_get0_contentsOfAdmissions":["const struct stack_st_ADMISSIONS *","(const ADMISSION_SYNTAX *)"],
"ADMISSION_SYNTAX_set0_contentsOfAdmissions":["void","(ADMISSION_SYNTAX *, struct stack_st_ADMISSIONS *)"],
"ADMISSIONS_get0_admissionAuthority":["const GENERAL_NAME *","(const ADMISSIONS *)"],
"ADMISSIONS_set0_admissionAuthority":["void","(ADMISSIONS *, GENERAL_NAME *)"],
"ADMISSIONS_get0_namingAuthority":["const NAMING_AUTHORITY *","(const ADMISSIONS *)"],
"ADMISSIONS_set0_namingAuthority":["void","(ADMISSIONS *, NAMING_AUTHORITY *)"],
"ADMISSIONS_get0_professionInfos":["const PROFESSION_INFOS *","(const ADMISSIONS *)"],
"ADMISSIONS_set0_professionInfos":["void","(ADMISSIONS *, PROFESSION_INFOS *)"],
"PROFESSION_INFO_get0_addProfessionInfo":["const ASN1_OCTET_STRING *","(const PROFESSION_INFO *)"],
"PROFESSION_INFO_set0_addProfessionInfo":["void","(PROFESSION_INFO *, ASN1_OCTET_STRING *)"],
"PROFESSION_INFO_get0_namingAuthority":["const NAMING_AUTHORITY *","(const PROFESSION_INFO *)"],
"PROFESSION_INFO_set0_namingAuthority":["void","(PROFESSION_INFO *, NAMING_AUTHORITY *)"],
"PROFESSION_INFO_get0_professionItems":["const struct stack_st_ASN1_STRING *","(const PROFESSION_INFO *)"],
"PROFESSION_INFO_set0_professionItems":["void","(PROFESSION_INFO *, struct stack_st_ASN1_STRING *)"],
"PROFESSION_INFO_get0_professionOIDs":["const struct stack_st_ASN1_OBJECT *","(const PROFESSION_INFO *)"],
"PROFESSION_INFO_set0_professionOIDs":["void","(PROFESSION_INFO *, struct stack_st_ASN1_OBJECT *)"],
"PROFESSION_INFO_get0_registrationNumber":["const ASN1_PRINTABLESTRING *","(const PROFESSION_INFO *)"],
"PROFESSION_INFO_set0_registrationNumber":["void","(PROFESSION_INFO *, ASN1_PRINTABLESTRING *)"],
"ERR_load_CMS_strings":["int","()"],
"sk_CMS_SignerInfo_num":["int","(const struct stack_st_CMS_SignerInfo *)"],
"sk_CMS_SignerInfo_value":["CMS_SignerInfo *","(const struct stack_st_CMS_SignerInfo *, int)"],
"sk_CMS_SignerInfo_new":["struct stack_st_CMS_SignerInfo *","(sk_CMS_SignerInfo_compfunc)"],
"sk_CMS_SignerInfo_new_null":["struct stack_st_CMS_SignerInfo *","()"],
"sk_CMS_SignerInfo_new_reserve":["struct stack_st_CMS_SignerInfo *","(sk_CMS_SignerInfo_compfunc, int)"],
"sk_CMS_SignerInfo_reserve":["int","(struct stack_st_CMS_SignerInfo *, int)"],
"sk_CMS_SignerInfo_free":["void","(struct stack_st_CMS_SignerInfo *)"],
"sk_CMS_SignerInfo_zero":["void","(struct stack_st_CMS_SignerInfo *)"],
"sk_CMS_SignerInfo_delete":["CMS_SignerInfo *","(struct stack_st_CMS_SignerInfo *, int)"],
"sk_CMS_SignerInfo_delete_ptr":["CMS_SignerInfo *","(struct stack_st_CMS_SignerInfo *, CMS_SignerInfo *)"],
"sk_CMS_SignerInfo_push":["int","(struct stack_st_CMS_SignerInfo *, CMS_SignerInfo *)"],
"sk_CMS_SignerInfo_unshift":["int","(struct stack_st_CMS_SignerInfo *, CMS_SignerInfo *)"],
"sk_CMS_SignerInfo_pop":["CMS_SignerInfo *","(struct stack_st_CMS_SignerInfo *)"],
"sk_CMS_SignerInfo_shift":["CMS_SignerInfo *","(struct stack_st_CMS_SignerInfo *)"],
"sk_CMS_SignerInfo_pop_free":["void","(struct stack_st_CMS_SignerInfo *, sk_CMS_SignerInfo_freefunc)"],
"sk_CMS_SignerInfo_insert":["int","(struct stack_st_CMS_SignerInfo *, CMS_SignerInfo *, int)"],
"sk_CMS_SignerInfo_set":["CMS_SignerInfo *","(struct stack_st_CMS_SignerInfo *, int, CMS_SignerInfo *)"],
"sk_CMS_SignerInfo_find":["int","(struct stack_st_CMS_SignerInfo *, CMS_SignerInfo *)"],
"sk_CMS_SignerInfo_find_ex":["int","(struct stack_st_CMS_SignerInfo *, CMS_SignerInfo *)"],
"sk_CMS_SignerInfo_sort":["void","(struct stack_st_CMS_SignerInfo *)"],
"sk_CMS_SignerInfo_is_sorted":["int","(const struct stack_st_CMS_SignerInfo *)"],
"sk_CMS_SignerInfo_dup":["struct stack_st_CMS_SignerInfo *","(const struct stack_st_CMS_SignerInfo *)"],
"sk_CMS_SignerInfo_deep_copy":["struct stack_st_CMS_SignerInfo *","(const struct stack_st_CMS_SignerInfo *, sk_CMS_SignerInfo_copyfunc, sk_CMS_SignerInfo_freefunc)"],
"sk_CMS_SignerInfo_set_cmp_func":["sk_CMS_SignerInfo_compfunc","(struct stack_st_CMS_SignerInfo *, sk_CMS_SignerInfo_compfunc)"],
"sk_CMS_RecipientEncryptedKey_num":["int","(const struct stack_st_CMS_RecipientEncryptedKey *)"],
"sk_CMS_RecipientEncryptedKey_value":["CMS_RecipientEncryptedKey *","(const struct stack_st_CMS_RecipientEncryptedKey *, int)"],
"sk_CMS_RecipientEncryptedKey_new":["struct stack_st_CMS_RecipientEncryptedKey *","(sk_CMS_RecipientEncryptedKey_compfunc)"],
"sk_CMS_RecipientEncryptedKey_new_null":["struct stack_st_CMS_RecipientEncryptedKey *","()"],
"sk_CMS_RecipientEncryptedKey_new_reserve":["struct stack_st_CMS_RecipientEncryptedKey *","(sk_CMS_RecipientEncryptedKey_compfunc, int)"],
"sk_CMS_RecipientEncryptedKey_reserve":["int","(struct stack_st_CMS_RecipientEncryptedKey *, int)"],
"sk_CMS_RecipientEncryptedKey_free":["void","(struct stack_st_CMS_RecipientEncryptedKey *)"],
"sk_CMS_RecipientEncryptedKey_zero":["void","(struct stack_st_CMS_RecipientEncryptedKey *)"],
"sk_CMS_RecipientEncryptedKey_delete":["CMS_RecipientEncryptedKey *","(struct stack_st_CMS_RecipientEncryptedKey *, int)"],
"sk_CMS_RecipientEncryptedKey_delete_ptr":["CMS_RecipientEncryptedKey *","(struct stack_st_CMS_RecipientEncryptedKey *, CMS_RecipientEncryptedKey *)"],
"sk_CMS_RecipientEncryptedKey_push":["int","(struct stack_st_CMS_RecipientEncryptedKey *, CMS_RecipientEncryptedKey *)"],
"sk_CMS_RecipientEncryptedKey_unshift":["int","(struct stack_st_CMS_RecipientEncryptedKey *, CMS_RecipientEncryptedKey *)"],
"sk_CMS_RecipientEncryptedKey_pop":["CMS_RecipientEncryptedKey *","(struct stack_st_CMS_RecipientEncryptedKey *)"],
"sk_CMS_RecipientEncryptedKey_shift":["CMS_RecipientEncryptedKey *","(struct stack_st_CMS_RecipientEncryptedKey *)"],
"sk_CMS_RecipientEncryptedKey_pop_free":["void","(struct stack_st_CMS_RecipientEncryptedKey *, sk_CMS_RecipientEncryptedKey_freefunc)"],
"sk_CMS_RecipientEncryptedKey_insert":["int","(struct stack_st_CMS_RecipientEncryptedKey *, CMS_RecipientEncryptedKey *, int)"],
"sk_CMS_RecipientEncryptedKey_set":["CMS_RecipientEncryptedKey *","(struct stack_st_CMS_RecipientEncryptedKey *, int, CMS_RecipientEncryptedKey *)"],
"sk_CMS_RecipientEncryptedKey_find":["int","(struct stack_st_CMS_RecipientEncryptedKey *, CMS_RecipientEncryptedKey *)"],
"sk_CMS_RecipientEncryptedKey_find_ex":["int","(struct stack_st_CMS_RecipientEncryptedKey *, CMS_RecipientEncryptedKey *)"],
"sk_CMS_RecipientEncryptedKey_sort":["void","(struct stack_st_CMS_RecipientEncryptedKey *)"],
"sk_CMS_RecipientEncryptedKey_is_sorted":["int","(const struct stack_st_CMS_RecipientEncryptedKey *)"],
"sk_CMS_RecipientEncryptedKey_dup":["struct stack_st_CMS_RecipientEncryptedKey *","(const struct stack_st_CMS_RecipientEncryptedKey *)"],
"sk_CMS_RecipientEncryptedKey_deep_copy":["struct stack_st_CMS_RecipientEncryptedKey *","(const struct stack_st_CMS_RecipientEncryptedKey *, sk_CMS_RecipientEncryptedKey_copyfunc, sk_CMS_RecipientEncryptedKey_freefunc)"],
"sk_CMS_RecipientEncryptedKey_set_cmp_func":["sk_CMS_RecipientEncryptedKey_compfunc","(struct stack_st_CMS_RecipientEncryptedKey *, sk_CMS_RecipientEncryptedKey_compfunc)"],
"sk_CMS_RecipientInfo_num":["int","(const struct stack_st_CMS_RecipientInfo *)"],
"sk_CMS_RecipientInfo_value":["CMS_RecipientInfo *","(const struct stack_st_CMS_RecipientInfo *, int)"],
"sk_CMS_RecipientInfo_new":["struct stack_st_CMS_RecipientInfo *","(sk_CMS_RecipientInfo_compfunc)"],
"sk_CMS_RecipientInfo_new_null":["struct stack_st_CMS_RecipientInfo *","()"],
"sk_CMS_RecipientInfo_new_reserve":["struct stack_st_CMS_RecipientInfo *","(sk_CMS_RecipientInfo_compfunc, int)"],
"sk_CMS_RecipientInfo_reserve":["int","(struct stack_st_CMS_RecipientInfo *, int)"],
"sk_CMS_RecipientInfo_free":["void","(struct stack_st_CMS_RecipientInfo *)"],
"sk_CMS_RecipientInfo_zero":["void","(struct stack_st_CMS_RecipientInfo *)"],
"sk_CMS_RecipientInfo_delete":["CMS_RecipientInfo *","(struct stack_st_CMS_RecipientInfo *, int)"],
"sk_CMS_RecipientInfo_delete_ptr":["CMS_RecipientInfo *","(struct stack_st_CMS_RecipientInfo *, CMS_RecipientInfo *)"],
"sk_CMS_RecipientInfo_push":["int","(struct stack_st_CMS_RecipientInfo *, CMS_RecipientInfo *)"],
"sk_CMS_RecipientInfo_unshift":["int","(struct stack_st_CMS_RecipientInfo *, CMS_RecipientInfo *)"],
"sk_CMS_RecipientInfo_pop":["CMS_RecipientInfo *","(struct stack_st_CMS_RecipientInfo *)"],
"sk_CMS_RecipientInfo_shift":["CMS_RecipientInfo *","(struct stack_st_CMS_RecipientInfo *)"],
"sk_CMS_RecipientInfo_pop_free":["void","(struct stack_st_CMS_RecipientInfo *, sk_CMS_RecipientInfo_freefunc)"],
"sk_CMS_RecipientInfo_insert":["int","(struct stack_st_CMS_RecipientInfo *, CMS_RecipientInfo *, int)"],
"sk_CMS_RecipientInfo_set":["CMS_RecipientInfo *","(struct stack_st_CMS_RecipientInfo *, int, CMS_RecipientInfo *)"],
"sk_CMS_RecipientInfo_find":["int","(struct stack_st_CMS_RecipientInfo *, CMS_RecipientInfo *)"],
"sk_CMS_RecipientInfo_find_ex":["int","(struct stack_st_CMS_RecipientInfo *, CMS_RecipientInfo *)"],
"sk_CMS_RecipientInfo_sort":["void","(struct stack_st_CMS_RecipientInfo *)"],
"sk_CMS_RecipientInfo_is_sorted":["int","(const struct stack_st_CMS_RecipientInfo *)"],
"sk_CMS_RecipientInfo_dup":["struct stack_st_CMS_RecipientInfo *","(const struct stack_st_CMS_RecipientInfo *)"],
"sk_CMS_RecipientInfo_deep_copy":["struct stack_st_CMS_RecipientInfo *","(const struct stack_st_CMS_RecipientInfo *, sk_CMS_RecipientInfo_copyfunc, sk_CMS_RecipientInfo_freefunc)"],
"sk_CMS_RecipientInfo_set_cmp_func":["sk_CMS_RecipientInfo_compfunc","(struct stack_st_CMS_RecipientInfo *, sk_CMS_RecipientInfo_compfunc)"],
"sk_CMS_RevocationInfoChoice_num":["int","(const struct stack_st_CMS_RevocationInfoChoice *)"],
"sk_CMS_RevocationInfoChoice_value":["CMS_RevocationInfoChoice *","(const struct stack_st_CMS_RevocationInfoChoice *, int)"],
"sk_CMS_RevocationInfoChoice_new":["struct stack_st_CMS_RevocationInfoChoice *","(sk_CMS_RevocationInfoChoice_compfunc)"],
"sk_CMS_RevocationInfoChoice_new_null":["struct stack_st_CMS_RevocationInfoChoice *","()"],
"sk_CMS_RevocationInfoChoice_new_reserve":["struct stack_st_CMS_RevocationInfoChoice *","(sk_CMS_RevocationInfoChoice_compfunc, int)"],
"sk_CMS_RevocationInfoChoice_reserve":["int","(struct stack_st_CMS_RevocationInfoChoice *, int)"],
"sk_CMS_RevocationInfoChoice_free":["void","(struct stack_st_CMS_RevocationInfoChoice *)"],
"sk_CMS_RevocationInfoChoice_zero":["void","(struct stack_st_CMS_RevocationInfoChoice *)"],
"sk_CMS_RevocationInfoChoice_delete":["CMS_RevocationInfoChoice *","(struct stack_st_CMS_RevocationInfoChoice *, int)"],
"sk_CMS_RevocationInfoChoice_delete_ptr":["CMS_RevocationInfoChoice *","(struct stack_st_CMS_RevocationInfoChoice *, CMS_RevocationInfoChoice *)"],
"sk_CMS_RevocationInfoChoice_push":["int","(struct stack_st_CMS_RevocationInfoChoice *, CMS_RevocationInfoChoice *)"],
"sk_CMS_RevocationInfoChoice_unshift":["int","(struct stack_st_CMS_RevocationInfoChoice *, CMS_RevocationInfoChoice *)"],
"sk_CMS_RevocationInfoChoice_pop":["CMS_RevocationInfoChoice *","(struct stack_st_CMS_RevocationInfoChoice *)"],
"sk_CMS_RevocationInfoChoice_shift":["CMS_RevocationInfoChoice *","(struct stack_st_CMS_RevocationInfoChoice *)"],
"sk_CMS_RevocationInfoChoice_pop_free":["void","(struct stack_st_CMS_RevocationInfoChoice *, sk_CMS_RevocationInfoChoice_freefunc)"],
"sk_CMS_RevocationInfoChoice_insert":["int","(struct stack_st_CMS_RevocationInfoChoice *, CMS_RevocationInfoChoice *, int)"],
"sk_CMS_RevocationInfoChoice_set":["CMS_RevocationInfoChoice *","(struct stack_st_CMS_RevocationInfoChoice *, int, CMS_RevocationInfoChoice *)"],
"sk_CMS_RevocationInfoChoice_find":["int","(struct stack_st_CMS_RevocationInfoChoice *, CMS_RevocationInfoChoice *)"],
"sk_CMS_RevocationInfoChoice_find_ex":["int","(struct stack_st_CMS_RevocationInfoChoice *, CMS_RevocationInfoChoice *)"],
"sk_CMS_RevocationInfoChoice_sort":["void","(struct stack_st_CMS_RevocationInfoChoice *)"],
"sk_CMS_RevocationInfoChoice_is_sorted":["int","(const struct stack_st_CMS_RevocationInfoChoice *)"],
"sk_CMS_RevocationInfoChoice_dup":["struct stack_st_CMS_RevocationInfoChoice *","(const struct stack_st_CMS_RevocationInfoChoice *)"],
"sk_CMS_RevocationInfoChoice_deep_copy":["struct stack_st_CMS_RevocationInfoChoice *","(const struct stack_st_CMS_RevocationInfoChoice *, sk_CMS_RevocationInfoChoice_copyfunc, sk_CMS_RevocationInfoChoice_freefunc)"],
"sk_CMS_RevocationInfoChoice_set_cmp_func":["sk_CMS_RevocationInfoChoice_compfunc","(struct stack_st_CMS_RevocationInfoChoice *, sk_CMS_RevocationInfoChoice_compfunc)"],
"CMS_ContentInfo_new":["CMS_ContentInfo *","()"],
"CMS_ContentInfo_free":["void","(CMS_ContentInfo *)"],
"d2i_CMS_ContentInfo":["CMS_ContentInfo *","(CMS_ContentInfo **, const unsigned char **, long)"],
"i2d_CMS_ContentInfo":["int","(CMS_ContentInfo *, unsigned char **)"],
"CMS_ReceiptRequest_new":["CMS_ReceiptRequest *","()"],
"CMS_ReceiptRequest_free":["void","(CMS_ReceiptRequest *)"],
"d2i_CMS_ReceiptRequest":["CMS_ReceiptRequest *","(CMS_ReceiptRequest **, const unsigned char **, long)"],
"i2d_CMS_ReceiptRequest":["int","(CMS_ReceiptRequest *, unsigned char **)"],
"CMS_ContentInfo_print_ctx":["int","(BIO *, CMS_ContentInfo *, int, const ASN1_PCTX *)"],
"CMS_get0_type":["const ASN1_OBJECT *","(const CMS_ContentInfo *)"],
"CMS_dataInit":["BIO *","(CMS_ContentInfo *, BIO *)"],
"CMS_dataFinal":["int","(CMS_ContentInfo *, BIO *)"],
"CMS_get0_content":["ASN1_OCTET_STRING **","(CMS_ContentInfo *)"],
"CMS_is_detached":["int","(CMS_ContentInfo *)"],
"CMS_set_detached":["int","(CMS_ContentInfo *, int)"],
"CMS_stream":["int","(unsigned char ***, CMS_ContentInfo *)"],
"d2i_CMS_bio":["CMS_ContentInfo *","(BIO *, CMS_ContentInfo **)"],
"i2d_CMS_bio":["int","(BIO *, CMS_ContentInfo *)"],
"BIO_new_CMS":["BIO *","(BIO *, CMS_ContentInfo *)"],
"i2d_CMS_bio_stream":["int","(BIO *, CMS_ContentInfo *, BIO *, int)"],
"PEM_write_bio_CMS_stream":["int","(BIO *, CMS_ContentInfo *, BIO *, int)"],
"SMIME_read_CMS":["CMS_ContentInfo *","(BIO *, BIO **)"],
"SMIME_write_CMS":["int","(BIO *, CMS_ContentInfo *, BIO *, int)"],
"CMS_final":["int","(CMS_ContentInfo *, BIO *, BIO *, unsigned int)"],
"CMS_sign":["CMS_ContentInfo *","(X509 *, EVP_PKEY *, struct stack_st_X509 *, BIO *, unsigned int)"],
"CMS_sign_receipt":["CMS_ContentInfo *","(CMS_SignerInfo *, X509 *, EVP_PKEY *, struct stack_st_X509 *, unsigned int)"],
"CMS_data":["int","(CMS_ContentInfo *, BIO *, unsigned int)"],
"CMS_data_create":["CMS_ContentInfo *","(BIO *, unsigned int)"],
"CMS_digest_verify":["int","(CMS_ContentInfo *, BIO *, BIO *, unsigned int)"],
"CMS_digest_create":["CMS_ContentInfo *","(BIO *, const EVP_MD *, unsigned int)"],
"CMS_EncryptedData_decrypt":["int","(CMS_ContentInfo *, const unsigned char *, int, BIO *, BIO *, unsigned int)"],
"CMS_EncryptedData_encrypt":["CMS_ContentInfo *","(BIO *, const EVP_CIPHER *, const unsigned char *, int, unsigned int)"],
"CMS_EncryptedData_set1_key":["int","(CMS_ContentInfo *, const EVP_CIPHER *, const unsigned char *, int)"],
"CMS_verify":["int","(CMS_ContentInfo *, struct stack_st_X509 *, X509_STORE *, BIO *, BIO *, unsigned int)"],
"CMS_verify_receipt":["int","(CMS_ContentInfo *, CMS_ContentInfo *, struct stack_st_X509 *, X509_STORE *, unsigned int)"],
"CMS_get0_signers":["struct stack_st_X509 *","(CMS_ContentInfo *)"],
"CMS_encrypt":["CMS_ContentInfo *","(struct stack_st_X509 *, BIO *, const EVP_CIPHER *, unsigned int)"],
"CMS_decrypt":["int","(CMS_ContentInfo *, EVP_PKEY *, X509 *, BIO *, BIO *, unsigned int)"],
"CMS_decrypt_set1_pkey":["int","(CMS_ContentInfo *, EVP_PKEY *, X509 *)"],
"CMS_decrypt_set1_key":["int","(CMS_ContentInfo *, unsigned char *, int, const unsigned char *, int)"],
"CMS_decrypt_set1_password":["int","(CMS_ContentInfo *, unsigned char *, ssize_t)"],
"CMS_get0_RecipientInfos":["struct stack_st_CMS_RecipientInfo *","(CMS_ContentInfo *)"],
"CMS_RecipientInfo_type":["int","(CMS_RecipientInfo *)"],
"CMS_RecipientInfo_get0_pkey_ctx":["EVP_PKEY_CTX *","(CMS_RecipientInfo *)"],
"CMS_EnvelopedData_create":["CMS_ContentInfo *","(const EVP_CIPHER *)"],
"CMS_add1_recipient_cert":["CMS_RecipientInfo *","(CMS_ContentInfo *, X509 *, unsigned int)"],
"CMS_RecipientInfo_set0_pkey":["int","(CMS_RecipientInfo *, EVP_PKEY *)"],
"CMS_RecipientInfo_ktri_cert_cmp":["int","(CMS_RecipientInfo *, X509 *)"],
"CMS_RecipientInfo_ktri_get0_algs":["int","(CMS_RecipientInfo *, EVP_PKEY **, X509 **, X509_ALGOR **)"],
"CMS_RecipientInfo_ktri_get0_signer_id":["int","(CMS_RecipientInfo *, ASN1_OCTET_STRING **, X509_NAME **, ASN1_INTEGER **)"],
"CMS_add0_recipient_key":["CMS_RecipientInfo *","(CMS_ContentInfo *, int, unsigned char *, int, unsigned char *, int, ASN1_GENERALIZEDTIME *, ASN1_OBJECT *, ASN1_TYPE *)"],
"CMS_RecipientInfo_kekri_get0_id":["int","(CMS_RecipientInfo *, X509_ALGOR **, ASN1_OCTET_STRING **, ASN1_GENERALIZEDTIME **, ASN1_OBJECT **, ASN1_TYPE **)"],
"CMS_RecipientInfo_set0_key":["int","(CMS_RecipientInfo *, unsigned char *, int)"],
"CMS_RecipientInfo_kekri_id_cmp":["int","(CMS_RecipientInfo *, const unsigned char *, int)"],
"CMS_RecipientInfo_set0_password":["int","(CMS_RecipientInfo *, unsigned char *, ssize_t)"],
"CMS_add0_recipient_password":["CMS_RecipientInfo *","(CMS_ContentInfo *, int, int, int, unsigned char *, ssize_t, const EVP_CIPHER *)"],
"CMS_RecipientInfo_decrypt":["int","(CMS_ContentInfo *, CMS_RecipientInfo *)"],
"CMS_RecipientInfo_encrypt":["int","(CMS_ContentInfo *, CMS_RecipientInfo *)"],
"CMS_uncompress":["int","(CMS_ContentInfo *, BIO *, BIO *, unsigned int)"],
"CMS_compress":["CMS_ContentInfo *","(BIO *, int, unsigned int)"],
"CMS_set1_eContentType":["int","(CMS_ContentInfo *, const ASN1_OBJECT *)"],
"CMS_get0_eContentType":["const ASN1_OBJECT *","(CMS_ContentInfo *)"],
"CMS_add0_CertificateChoices":["CMS_CertificateChoices *","(CMS_ContentInfo *)"],
"CMS_add0_cert":["int","(CMS_ContentInfo *, X509 *)"],
"CMS_add1_cert":["int","(CMS_ContentInfo *, X509 *)"],
"CMS_get1_certs":["struct stack_st_X509 *","(CMS_ContentInfo *)"],
"CMS_add0_RevocationInfoChoice":["CMS_RevocationInfoChoice *","(CMS_ContentInfo *)"],
"CMS_add0_crl":["int","(CMS_ContentInfo *, X509_CRL *)"],
"CMS_add1_crl":["int","(CMS_ContentInfo *, X509_CRL *)"],
"CMS_get1_crls":["struct stack_st_X509_CRL *","(CMS_ContentInfo *)"],
"CMS_SignedData_init":["int","(CMS_ContentInfo *)"],
"CMS_add1_signer":["CMS_SignerInfo *","(CMS_ContentInfo *, X509 *, EVP_PKEY *, const EVP_MD *, unsigned int)"],
"CMS_SignerInfo_get0_pkey_ctx":["EVP_PKEY_CTX *","(CMS_SignerInfo *)"],
"CMS_SignerInfo_get0_md_ctx":["EVP_MD_CTX *","(CMS_SignerInfo *)"],
"CMS_get0_SignerInfos":["struct stack_st_CMS_SignerInfo *","(CMS_ContentInfo *)"],
"CMS_SignerInfo_set1_signer_cert":["void","(CMS_SignerInfo *, X509 *)"],
"CMS_SignerInfo_get0_signer_id":["int","(CMS_SignerInfo *, ASN1_OCTET_STRING **, X509_NAME **, ASN1_INTEGER **)"],
"CMS_SignerInfo_cert_cmp":["int","(CMS_SignerInfo *, X509 *)"],
"CMS_set1_signers_certs":["int","(CMS_ContentInfo *, struct stack_st_X509 *, unsigned int)"],
"CMS_SignerInfo_get0_algs":["void","(CMS_SignerInfo *, EVP_PKEY **, X509 **, X509_ALGOR **, X509_ALGOR **)"],
"CMS_SignerInfo_get0_signature":["ASN1_OCTET_STRING *","(CMS_SignerInfo *)"],
"CMS_SignerInfo_sign":["int","(CMS_SignerInfo *)"],
"CMS_SignerInfo_verify":["int","(CMS_SignerInfo *)"],
"CMS_SignerInfo_verify_content":["int","(CMS_SignerInfo *, BIO *)"],
"CMS_add_smimecap":["int","(CMS_SignerInfo *, struct stack_st_X509_ALGOR *)"],
"CMS_add_simple_smimecap":["int","(struct stack_st_X509_ALGOR **, int, int)"],
"CMS_add_standard_smimecap":["int","(struct stack_st_X509_ALGOR **)"],
"CMS_signed_get_attr_count":["int","(const CMS_SignerInfo *)"],
"CMS_signed_get_attr_by_NID":["int","(const CMS_SignerInfo *, int, int)"],
"CMS_signed_get_attr_by_OBJ":["int","(const CMS_SignerInfo *, const ASN1_OBJECT *, int)"],
"CMS_signed_get_attr":["X509_ATTRIBUTE *","(const CMS_SignerInfo *, int)"],
"CMS_signed_delete_attr":["X509_ATTRIBUTE *","(CMS_SignerInfo *, int)"],
"CMS_signed_add1_attr":["int","(CMS_SignerInfo *, X509_ATTRIBUTE *)"],
"CMS_signed_add1_attr_by_OBJ":["int","(CMS_SignerInfo *, const ASN1_OBJECT *, int, const void *, int)"],
"CMS_signed_add1_attr_by_NID":["int","(CMS_SignerInfo *, int, int, const void *, int)"],
"CMS_signed_add1_attr_by_txt":["int","(CMS_SignerInfo *, const char *, int, const void *, int)"],
"CMS_signed_get0_data_by_OBJ":["void *","(CMS_SignerInfo *, const ASN1_OBJECT *, int, int)"],
"CMS_unsigned_get_attr_count":["int","(const CMS_SignerInfo *)"],
"CMS_unsigned_get_attr_by_NID":["int","(const CMS_SignerInfo *, int, int)"],
"CMS_unsigned_get_attr_by_OBJ":["int","(const CMS_SignerInfo *, const ASN1_OBJECT *, int)"],
"CMS_unsigned_get_attr":["X509_ATTRIBUTE *","(const CMS_SignerInfo *, int)"],
"CMS_unsigned_delete_attr":["X509_ATTRIBUTE *","(CMS_SignerInfo *, int)"],
"CMS_unsigned_add1_attr":["int","(CMS_SignerInfo *, X509_ATTRIBUTE *)"],
"CMS_unsigned_add1_attr_by_OBJ":["int","(CMS_SignerInfo *, const ASN1_OBJECT *, int, const void *, int)"],
"CMS_unsigned_add1_attr_by_NID":["int","(CMS_SignerInfo *, int, int, const void *, int)"],
"CMS_unsigned_add1_attr_by_txt":["int","(CMS_SignerInfo *, const char *, int, const void *, int)"],
"CMS_unsigned_get0_data_by_OBJ":["void *","(CMS_SignerInfo *, ASN1_OBJECT *, int, int)"],
"CMS_get1_ReceiptRequest":["int","(CMS_SignerInfo *, CMS_ReceiptRequest **)"],
"CMS_ReceiptRequest_create0":["CMS_ReceiptRequest *","(unsigned char *, int, int, struct stack_st_GENERAL_NAMES *, struct stack_st_GENERAL_NAMES *)"],
"CMS_add1_ReceiptRequest":["int","(CMS_SignerInfo *, CMS_ReceiptRequest *)"],
"CMS_ReceiptRequest_get0_values":["void","(CMS_ReceiptRequest *, ASN1_STRING **, int *, struct stack_st_GENERAL_NAMES **, struct stack_st_GENERAL_NAMES **)"],
"CMS_RecipientInfo_kari_get0_alg":["int","(CMS_RecipientInfo *, X509_ALGOR **, ASN1_OCTET_STRING **)"],
"CMS_RecipientInfo_kari_get0_reks":["struct stack_st_CMS_RecipientEncryptedKey *","(CMS_RecipientInfo *)"],
"CMS_RecipientInfo_kari_get0_orig_id":["int","(CMS_RecipientInfo *, X509_ALGOR **, ASN1_BIT_STRING **, ASN1_OCTET_STRING **, X509_NAME **, ASN1_INTEGER **)"],
"CMS_RecipientInfo_kari_orig_id_cmp":["int","(CMS_RecipientInfo *, X509 *)"],
"CMS_RecipientEncryptedKey_get0_id":["int","(CMS_RecipientEncryptedKey *, ASN1_OCTET_STRING **, ASN1_GENERALIZEDTIME **, CMS_OtherKeyAttribute **, X509_NAME **, ASN1_INTEGER **)"],
"CMS_RecipientEncryptedKey_cert_cmp":["int","(CMS_RecipientEncryptedKey *, X509 *)"],
"CMS_RecipientInfo_kari_set0_pkey":["int","(CMS_RecipientInfo *, EVP_PKEY *)"],
"CMS_RecipientInfo_kari_get0_ctx":["EVP_CIPHER_CTX *","(CMS_RecipientInfo *)"],
"CMS_RecipientInfo_kari_decrypt":["int","(CMS_ContentInfo *, CMS_RecipientInfo *, CMS_RecipientEncryptedKey *)"],
"CMS_SharedInfo_encode":["int","(unsigned char **, X509_ALGOR *, ASN1_OCTET_STRING *, int)"],
"ERR_load_COMP_strings":["int","()"],
"COMP_CTX_new":["COMP_CTX *","(COMP_METHOD *)"],
"COMP_CTX_get_method":["const COMP_METHOD *","(const COMP_CTX *)"],
"COMP_CTX_get_type":["int","(const COMP_CTX *)"],
"COMP_get_type":["int","(const COMP_METHOD *)"],
"COMP_get_name":["const char *","(const COMP_METHOD *)"],
"COMP_CTX_free":["void","(COMP_CTX *)"],
"COMP_compress_block":["int","(COMP_CTX *, unsigned char *, int, unsigned char *, int)"],
"COMP_expand_block":["int","(COMP_CTX *, unsigned char *, int, unsigned char *, int)"],
"COMP_zlib":["COMP_METHOD *","()"],
"_CONF_new_section":["CONF_VALUE *","(CONF *, const char *)"],
"_CONF_get_section":["CONF_VALUE *","(const CONF *, const char *)"],
"_CONF_get_section_values":["struct stack_st_CONF_VALUE *","(const CONF *, const char *)"],
"_CONF_add_string":["int","(CONF *, CONF_VALUE *, CONF_VALUE *)"],
"_CONF_get_string":["char *","(const CONF *, const char *, const char *)"],
"_CONF_get_number":["long","(const CONF *, const char *, const char *)"],
"_CONF_new_data":["int","(CONF *)"],
"_CONF_free_data":["void","(CONF *)"],
"ERR_load_CT_strings":["int","()"],
"sk_SCT_num":["int","(const struct stack_st_SCT *)"],
"sk_SCT_value":["SCT *","(const struct stack_st_SCT *, int)"],
"sk_SCT_new":["struct stack_st_SCT *","(sk_SCT_compfunc)"],
"sk_SCT_new_null":["struct stack_st_SCT *","()"],
"sk_SCT_new_reserve":["struct stack_st_SCT *","(sk_SCT_compfunc, int)"],
"sk_SCT_reserve":["int","(struct stack_st_SCT *, int)"],
"sk_SCT_free":["void","(struct stack_st_SCT *)"],
"sk_SCT_zero":["void","(struct stack_st_SCT *)"],
"sk_SCT_delete":["SCT *","(struct stack_st_SCT *, int)"],
"sk_SCT_delete_ptr":["SCT *","(struct stack_st_SCT *, SCT *)"],
"sk_SCT_push":["int","(struct stack_st_SCT *, SCT *)"],
"sk_SCT_unshift":["int","(struct stack_st_SCT *, SCT *)"],
"sk_SCT_pop":["SCT *","(struct stack_st_SCT *)"],
"sk_SCT_shift":["SCT *","(struct stack_st_SCT *)"],
"sk_SCT_pop_free":["void","(struct stack_st_SCT *, sk_SCT_freefunc)"],
"sk_SCT_insert":["int","(struct stack_st_SCT *, SCT *, int)"],
"sk_SCT_set":["SCT *","(struct stack_st_SCT *, int, SCT *)"],
"sk_SCT_find":["int","(struct stack_st_SCT *, SCT *)"],
"sk_SCT_find_ex":["int","(struct stack_st_SCT *, SCT *)"],
"sk_SCT_sort":["void","(struct stack_st_SCT *)"],
"sk_SCT_is_sorted":["int","(const struct stack_st_SCT *)"],
"sk_SCT_dup":["struct stack_st_SCT *","(const struct stack_st_SCT *)"],
"sk_SCT_deep_copy":["struct stack_st_SCT *","(const struct stack_st_SCT *, sk_SCT_copyfunc, sk_SCT_freefunc)"],
"sk_SCT_set_cmp_func":["sk_SCT_compfunc","(struct stack_st_SCT *, sk_SCT_compfunc)"],
"sk_CTLOG_num":["int","(const struct stack_st_CTLOG *)"],
"sk_CTLOG_value":["CTLOG *","(const struct stack_st_CTLOG *, int)"],
"sk_CTLOG_new":["struct stack_st_CTLOG *","(sk_CTLOG_compfunc)"],
"sk_CTLOG_new_null":["struct stack_st_CTLOG *","()"],
"sk_CTLOG_new_reserve":["struct stack_st_CTLOG *","(sk_CTLOG_compfunc, int)"],
"sk_CTLOG_reserve":["int","(struct stack_st_CTLOG *, int)"],
"sk_CTLOG_free":["void","(struct stack_st_CTLOG *)"],
"sk_CTLOG_zero":["void","(struct stack_st_CTLOG *)"],
"sk_CTLOG_delete":["CTLOG *","(struct stack_st_CTLOG *, int)"],
"sk_CTLOG_delete_ptr":["CTLOG *","(struct stack_st_CTLOG *, CTLOG *)"],
"sk_CTLOG_push":["int","(struct stack_st_CTLOG *, CTLOG *)"],
"sk_CTLOG_unshift":["int","(struct stack_st_CTLOG *, CTLOG *)"],
"sk_CTLOG_pop":["CTLOG *","(struct stack_st_CTLOG *)"],
"sk_CTLOG_shift":["CTLOG *","(struct stack_st_CTLOG *)"],
"sk_CTLOG_pop_free":["void","(struct stack_st_CTLOG *, sk_CTLOG_freefunc)"],
"sk_CTLOG_insert":["int","(struct stack_st_CTLOG *, CTLOG *, int)"],
"sk_CTLOG_set":["CTLOG *","(struct stack_st_CTLOG *, int, CTLOG *)"],
"sk_CTLOG_find":["int","(struct stack_st_CTLOG *, CTLOG *)"],
"sk_CTLOG_find_ex":["int","(struct stack_st_CTLOG *, CTLOG *)"],
"sk_CTLOG_sort":["void","(struct stack_st_CTLOG *)"],
"sk_CTLOG_is_sorted":["int","(const struct stack_st_CTLOG *)"],
"sk_CTLOG_dup":["struct stack_st_CTLOG *","(const struct stack_st_CTLOG *)"],
"sk_CTLOG_deep_copy":["struct stack_st_CTLOG *","(const struct stack_st_CTLOG *, sk_CTLOG_copyfunc, sk_CTLOG_freefunc)"],
"sk_CTLOG_set_cmp_func":["sk_CTLOG_compfunc","(struct stack_st_CTLOG *, sk_CTLOG_compfunc)"],
"CT_POLICY_EVAL_CTX_new":["CT_POLICY_EVAL_CTX *","()"],
"CT_POLICY_EVAL_CTX_free":["void","(CT_POLICY_EVAL_CTX *)"],
"CT_POLICY_EVAL_CTX_get0_cert":["X509 *","(const CT_POLICY_EVAL_CTX *)"],
"CT_POLICY_EVAL_CTX_set1_cert":["int","(CT_POLICY_EVAL_CTX *, X509 *)"],
"CT_POLICY_EVAL_CTX_get0_issuer":["X509 *","(const CT_POLICY_EVAL_CTX *)"],
"CT_POLICY_EVAL_CTX_set1_issuer":["int","(CT_POLICY_EVAL_CTX *, X509 *)"],
"CT_POLICY_EVAL_CTX_get0_log_store":["const CTLOG_STORE *","(const CT_POLICY_EVAL_CTX *)"],
"CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE":["void","(CT_POLICY_EVAL_CTX *, CTLOG_STORE *)"],
"CT_POLICY_EVAL_CTX_get_time":["int","(const CT_POLICY_EVAL_CTX *)"],
"CT_POLICY_EVAL_CTX_set_time":["void","(CT_POLICY_EVAL_CTX *, int)"],
"SCT_new":["SCT *","()"],
"SCT_new_from_base64":["SCT *","(unsigned char, const char *, ct_log_entry_type_t, int, const char *, const char *)"],
"SCT_free":["void","(SCT *)"],
"SCT_LIST_free":["void","(struct stack_st_SCT *)"],
"SCT_get_version":["sct_version_t","(const SCT *)"],
"SCT_set_version":["int","(SCT *, sct_version_t)"],
"SCT_get_log_entry_type":["ct_log_entry_type_t","(const SCT *)"],
"SCT_set_log_entry_type":["int","(SCT *, ct_log_entry_type_t)"],
"SCT_get0_log_id":["int","(const SCT *, unsigned char **)"],
"SCT_set0_log_id":["int","(SCT *, unsigned char *, int)"],
"SCT_set1_log_id":["int","(SCT *, const unsigned char *, int)"],
"SCT_get_timestamp":["int","(const SCT *)"],
"SCT_set_timestamp":["void","(SCT *, int)"],
"SCT_get_signature_nid":["int","(const SCT *)"],
"SCT_set_signature_nid":["int","(SCT *, int)"],
"SCT_get0_extensions":["int","(const SCT *, unsigned char **)"],
"SCT_set0_extensions":["void","(SCT *, unsigned char *, int)"],
"SCT_set1_extensions":["int","(SCT *, const unsigned char *, int)"],
"SCT_get0_signature":["int","(const SCT *, unsigned char **)"],
"SCT_set0_signature":["void","(SCT *, unsigned char *, int)"],
"SCT_set1_signature":["int","(SCT *, const unsigned char *, int)"],
"SCT_get_source":["sct_source_t","(const SCT *)"],
"SCT_set_source":["int","(SCT *, sct_source_t)"],
"SCT_validation_status_string":["const char *","(const SCT *)"],
"SCT_print":["void","(const SCT *, BIO *, int, const CTLOG_STORE *)"],
"SCT_LIST_print":["void","(const struct stack_st_SCT *, BIO *, int, const char *, const CTLOG_STORE *)"],
"SCT_get_validation_status":["sct_validation_status_t","(const SCT *)"],
"SCT_validate":["int","(SCT *, const CT_POLICY_EVAL_CTX *)"],
"SCT_LIST_validate":["int","(const struct stack_st_SCT *, CT_POLICY_EVAL_CTX *)"],
"i2o_SCT_LIST":["int","(const struct stack_st_SCT *, unsigned char **)"],
"o2i_SCT_LIST":["struct stack_st_SCT *","(struct stack_st_SCT **, const unsigned char **, int)"],
"i2d_SCT_LIST":["int","(const struct stack_st_SCT *, unsigned char **)"],
"d2i_SCT_LIST":["struct stack_st_SCT *","(struct stack_st_SCT **, const unsigned char **, long)"],
"i2o_SCT":["int","(const SCT *, unsigned char **)"],
"o2i_SCT":["SCT *","(SCT **, const unsigned char **, int)"],
"CTLOG_new":["CTLOG *","(EVP_PKEY *, const char *)"],
"CTLOG_new_from_base64":["int","(CTLOG **, const char *, const char *)"],
"CTLOG_free":["void","(CTLOG *)"],
"CTLOG_get0_name":["const char *","(const CTLOG *)"],
"CTLOG_get0_log_id":["void","(const CTLOG *, const int **, int *)"],
"CTLOG_get0_public_key":["EVP_PKEY *","(const CTLOG *)"],
"CTLOG_STORE_new":["CTLOG_STORE *","()"],
"CTLOG_STORE_free":["void","(CTLOG_STORE *)"],
"CTLOG_STORE_get0_log_by_id":["const CTLOG *","(const CTLOG_STORE *, const int *, int)"],
"CTLOG_STORE_load_file":["int","(CTLOG_STORE *, const char *)"],
"CTLOG_STORE_load_default_file":["int","(CTLOG_STORE *)"],
"DES_options":["const char *","()"],
"DES_ecb3_encrypt":["void","(const_DES_cblock *, DES_cblock *, DES_key_schedule *, DES_key_schedule *, DES_key_schedule *, int)"],
"DES_cbc_cksum":["DES_LONG","(const unsigned char *, DES_cblock *, long, DES_key_schedule *, const_DES_cblock *)"],
"DES_cbc_encrypt":["void","(const unsigned char *, unsigned char *, long, DES_key_schedule *, DES_cblock *, int)"],
"DES_ncbc_encrypt":["void","(const unsigned char *, unsigned char *, long, DES_key_schedule *, DES_cblock *, int)"],
"DES_xcbc_encrypt":["void","(const unsigned char *, unsigned char *, long, DES_key_schedule *, DES_cblock *, const_DES_cblock *, const_DES_cblock *, int)"],
"DES_cfb_encrypt":["void","(const unsigned char *, unsigned char *, int, long, DES_key_schedule *, DES_cblock *, int)"],
"DES_ecb_encrypt":["void","(const_DES_cblock *, DES_cblock *, DES_key_schedule *, int)"],
"DES_encrypt1":["void","(DES_LONG *, DES_key_schedule *, int)"],
"DES_encrypt2":["void","(DES_LONG *, DES_key_schedule *, int)"],
"DES_encrypt3":["void","(DES_LONG *, DES_key_schedule *, DES_key_schedule *, DES_key_schedule *)"],
"DES_decrypt3":["void","(DES_LONG *, DES_key_schedule *, DES_key_schedule *, DES_key_schedule *)"],
"DES_ede3_cbc_encrypt":["void","(const unsigned char *, unsigned char *, long, DES_key_schedule *, DES_key_schedule *, DES_key_schedule *, DES_cblock *, int)"],
"DES_ede3_cfb64_encrypt":["void","(const unsigned char *, unsigned char *, long, DES_key_schedule *, DES_key_schedule *, DES_key_schedule *, DES_cblock *, int *, int)"],
"DES_ede3_cfb_encrypt":["void","(const unsigned char *, unsigned char *, int, long, DES_key_schedule *, DES_key_schedule *, DES_key_schedule *, DES_cblock *, int)"],
"DES_ede3_ofb64_encrypt":["void","(const unsigned char *, unsigned char *, long, DES_key_schedule *, DES_key_schedule *, DES_key_schedule *, DES_cblock *, int *)"],
"DES_fcrypt":["char *","(const char *, const char *, char *)"],
"DES_crypt":["char *","(const char *, const char *)"],
"DES_ofb_encrypt":["void","(const unsigned char *, unsigned char *, int, long, DES_key_schedule *, DES_cblock *)"],
"DES_pcbc_encrypt":["void","(const unsigned char *, unsigned char *, long, DES_key_schedule *, DES_cblock *, int)"],
"DES_quad_cksum":["DES_LONG","(const unsigned char *, DES_cblock *, long, int, DES_cblock *)"],
"DES_random_key":["int","(DES_cblock *)"],
"DES_set_odd_parity":["void","(DES_cblock *)"],
"DES_check_key_parity":["int","(const_DES_cblock *)"],
"DES_is_weak_key":["int","(const_DES_cblock *)"],
"DES_set_key":["int","(const_DES_cblock *, DES_key_schedule *)"],
"DES_key_sched":["int","(const_DES_cblock *, DES_key_schedule *)"],
"DES_set_key_checked":["int","(const_DES_cblock *, DES_key_schedule *)"],
"DES_set_key_unchecked":["void","(const_DES_cblock *, DES_key_schedule *)"],
"DES_string_to_key":["void","(const char *, DES_cblock *)"],
"DES_string_to_2keys":["void","(const char *, DES_cblock *, DES_cblock *)"],
"DES_cfb64_encrypt":["void","(const unsigned char *, unsigned char *, long, DES_key_schedule *, DES_cblock *, int *, int)"],
"DES_ofb64_encrypt":["void","(const unsigned char *, unsigned char *, long, DES_key_schedule *, DES_cblock *, int *)"],
"_openssl_ebcdic2ascii":["void *","(void *, const void *, int)"],
"_openssl_ascii2ebcdic":["void *","(void *, const void *, int)"],
"ERR_load_RAND_strings":["int","()"],
"RAND_set_rand_method":["int","(const RAND_METHOD *)"],
"RAND_get_rand_method":["const RAND_METHOD *","()"],
"RAND_set_rand_engine":["int","(ENGINE *)"],
"RAND_OpenSSL":["RAND_METHOD *","()"],
"RAND_bytes":["int","(unsigned char *, int)"],
"RAND_priv_bytes":["int","(unsigned char *, int)"],
"RAND_pseudo_bytes":["int","(unsigned char *, int)"],
"RAND_seed":["void","(const void *, int)"],
"RAND_keep_random_devices_open":["void","(int)"],
"RAND_add":["void","(const void *, int, double)"],
"RAND_load_file":["int","(const char *, long)"],
"RAND_write_file":["int","(const char *)"],
"RAND_file_name":["const char *","(char *, int)"],
"RAND_status":["int","()"],
"RAND_poll":["int","()"],
"ERR_load_PEM_strings":["int","()"],
"PEM_get_EVP_CIPHER_INFO":["int","(char *, EVP_CIPHER_INFO *)"],
"PEM_do_header":["int","(EVP_CIPHER_INFO *, unsigned char *, long *, pem_password_cb *, void *)"],
"PEM_read_bio":["int","(BIO *, char **, char **, unsigned char **, long *)"],
"PEM_read_bio_ex":["int","(BIO *, char **, char **, unsigned char **, long *, unsigned int)"],
"PEM_bytes_read_bio_secmem":["int","(unsigned char **, long *, char **, const char *, BIO *, pem_password_cb *, void *)"],
"PEM_write_bio":["int","(BIO *, const char *, const char *, const unsigned char *, long)"],
"PEM_bytes_read_bio":["int","(unsigned char **, long *, char **, const char *, BIO *, pem_password_cb *, void *)"],
"PEM_ASN1_read_bio":["void *","(d2i_of_void *, const char *, BIO *, void **, pem_password_cb *, void *)"],
"PEM_ASN1_write_bio":["int","(i2d_of_void *, const char *, BIO *, void *, const EVP_CIPHER *, unsigned char *, int, pem_password_cb *, void *)"],
"PEM_X509_INFO_read_bio":["struct stack_st_X509_INFO *","(BIO *, struct stack_st_X509_INFO *, pem_password_cb *, void *)"],
"PEM_X509_INFO_write_bio":["int","(BIO *, X509_INFO *, EVP_CIPHER *, unsigned char *, int, pem_password_cb *, void *)"],
"PEM_read":["int","(int *, char **, char **, unsigned char **, long *)"],
"PEM_write":["int","(int *, const char *, const char *, const unsigned char *, long)"],
"PEM_ASN1_read":["void *","(d2i_of_void *, const char *, int *, void **, pem_password_cb *, void *)"],
"PEM_ASN1_write":["int","(i2d_of_void *, const char *, int *, void *, const EVP_CIPHER *, unsigned char *, int, pem_password_cb *, void *)"],
"PEM_X509_INFO_read":["struct stack_st_X509_INFO *","(int *, struct stack_st_X509_INFO *, pem_password_cb *, void *)"],
"PEM_SignInit":["int","(EVP_MD_CTX *, EVP_MD *)"],
"PEM_SignUpdate":["int","(EVP_MD_CTX *, unsigned char *, unsigned int)"],
"PEM_SignFinal":["int","(EVP_MD_CTX *, unsigned char *, unsigned int *, EVP_PKEY *)"],
"PEM_def_callback":["int","(char *, int, int, void *)"],
"PEM_proc_type":["void","(char *, int)"],
"PEM_dek_info":["void","(char *, const char *, int, char *)"],
"PEM_read_bio_X509":["X509 *","(BIO *, X509 **, pem_password_cb *, void *)"],
"PEM_read_X509":["X509 *","(int *, X509 **, pem_password_cb *, void *)"],
"PEM_write_bio_X509":["int","(BIO *, X509 *)"],
"PEM_write_X509":["int","(int *, X509 *)"],
"PEM_read_bio_X509_AUX":["X509 *","(BIO *, X509 **, pem_password_cb *, void *)"],
"PEM_read_X509_AUX":["X509 *","(int *, X509 **, pem_password_cb *, void *)"],
"PEM_write_bio_X509_AUX":["int","(BIO *, X509 *)"],
"PEM_write_X509_AUX":["int","(int *, X509 *)"],
"PEM_read_bio_X509_REQ":["X509_REQ *","(BIO *, X509_REQ **, pem_password_cb *, void *)"],
"PEM_read_X509_REQ":["X509_REQ *","(int *, X509_REQ **, pem_password_cb *, void *)"],
"PEM_write_bio_X509_REQ":["int","(BIO *, X509_REQ *)"],
"PEM_write_X509_REQ":["int","(int *, X509_REQ *)"],
"PEM_write_bio_X509_REQ_NEW":["int","(BIO *, X509_REQ *)"],
"PEM_write_X509_REQ_NEW":["int","(int *, X509_REQ *)"],
"PEM_read_bio_X509_CRL":["X509_CRL *","(BIO *, X509_CRL **, pem_password_cb *, void *)"],
"PEM_read_X509_CRL":["X509_CRL *","(int *, X509_CRL **, pem_password_cb *, void *)"],
"PEM_write_bio_X509_CRL":["int","(BIO *, X509_CRL *)"],
"PEM_write_X509_CRL":["int","(int *, X509_CRL *)"],
"PEM_read_bio_PKCS7":["PKCS7 *","(BIO *, PKCS7 **, pem_password_cb *, void *)"],
"PEM_read_PKCS7":["PKCS7 *","(int *, PKCS7 **, pem_password_cb *, void *)"],
"PEM_write_bio_PKCS7":["int","(BIO *, PKCS7 *)"],
"PEM_write_PKCS7":["int","(int *, PKCS7 *)"],
"PEM_read_bio_NETSCAPE_CERT_SEQUENCE":["NETSCAPE_CERT_SEQUENCE *","(BIO *, NETSCAPE_CERT_SEQUENCE **, pem_password_cb *, void *)"],
"PEM_read_NETSCAPE_CERT_SEQUENCE":["NETSCAPE_CERT_SEQUENCE *","(int *, NETSCAPE_CERT_SEQUENCE **, pem_password_cb *, void *)"],
"PEM_write_bio_NETSCAPE_CERT_SEQUENCE":["int","(BIO *, NETSCAPE_CERT_SEQUENCE *)"],
"PEM_write_NETSCAPE_CERT_SEQUENCE":["int","(int *, NETSCAPE_CERT_SEQUENCE *)"],
"PEM_read_bio_PKCS8":["X509_SIG *","(BIO *, X509_SIG **, pem_password_cb *, void *)"],
"PEM_read_PKCS8":["X509_SIG *","(int *, X509_SIG **, pem_password_cb *, void *)"],
"PEM_write_bio_PKCS8":["int","(BIO *, X509_SIG *)"],
"PEM_write_PKCS8":["int","(int *, X509_SIG *)"],
"PEM_read_bio_PKCS8_PRIV_KEY_INFO":["PKCS8_PRIV_KEY_INFO *","(BIO *, PKCS8_PRIV_KEY_INFO **, pem_password_cb *, void *)"],
"PEM_read_PKCS8_PRIV_KEY_INFO":["PKCS8_PRIV_KEY_INFO *","(int *, PKCS8_PRIV_KEY_INFO **, pem_password_cb *, void *)"],
"PEM_write_bio_PKCS8_PRIV_KEY_INFO":["int","(BIO *, PKCS8_PRIV_KEY_INFO *)"],
"PEM_write_PKCS8_PRIV_KEY_INFO":["int","(int *, PKCS8_PRIV_KEY_INFO *)"],
"PEM_read_bio_RSAPrivateKey":["RSA *","(BIO *, RSA **, pem_password_cb *, void *)"],
"PEM_read_RSAPrivateKey":["RSA *","(int *, RSA **, pem_password_cb *, void *)"],
"PEM_write_bio_RSAPrivateKey":["int","(BIO *, RSA *, const EVP_CIPHER *, unsigned char *, int, pem_password_cb *, void *)"],
"PEM_write_RSAPrivateKey":["int","(int *, RSA *, const EVP_CIPHER *, unsigned char *, int, pem_password_cb *, void *)"],
"PEM_read_bio_RSAPublicKey":["RSA *","(BIO *, RSA **, pem_password_cb *, void *)"],
"PEM_read_RSAPublicKey":["RSA *","(int *, RSA **, pem_password_cb *, void *)"],
"PEM_write_bio_RSAPublicKey":["int","(BIO *, const RSA *)"],
"PEM_write_RSAPublicKey":["int","(int *, const RSA *)"],
"PEM_read_bio_RSA_PUBKEY":["RSA *","(BIO *, RSA **, pem_password_cb *, void *)"],
"PEM_read_RSA_PUBKEY":["RSA *","(int *, RSA **, pem_password_cb *, void *)"],
"PEM_write_bio_RSA_PUBKEY":["int","(BIO *, RSA *)"],
"PEM_write_RSA_PUBKEY":["int","(int *, RSA *)"],
"PEM_read_bio_DSAPrivateKey":["DSA *","(BIO *, DSA **, pem_password_cb *, void *)"],
"PEM_read_DSAPrivateKey":["DSA *","(int *, DSA **, pem_password_cb *, void *)"],
"PEM_write_bio_DSAPrivateKey":["int","(BIO *, DSA *, const EVP_CIPHER *, unsigned char *, int, pem_password_cb *, void *)"],
"PEM_write_DSAPrivateKey":["int","(int *, DSA *, const EVP_CIPHER *, unsigned char *, int, pem_password_cb *, void *)"],
"PEM_read_bio_DSA_PUBKEY":["DSA *","(BIO *, DSA **, pem_password_cb *, void *)"],
"PEM_read_DSA_PUBKEY":["DSA *","(int *, DSA **, pem_password_cb *, void *)"],
"PEM_write_bio_DSA_PUBKEY":["int","(BIO *, DSA *)"],
"PEM_write_DSA_PUBKEY":["int","(int *, DSA *)"],
"PEM_read_bio_DSAparams":["DSA *","(BIO *, DSA **, pem_password_cb *, void *)"],
"PEM_read_DSAparams":["DSA *","(int *, DSA **, pem_password_cb *, void *)"],
"PEM_write_bio_DSAparams":["int","(BIO *, const DSA *)"],
"PEM_write_DSAparams":["int","(int *, const DSA *)"],
"PEM_read_bio_ECPKParameters":["EC_GROUP *","(BIO *, EC_GROUP **, pem_password_cb *, void *)"],
"PEM_read_ECPKParameters":["EC_GROUP *","(int *, EC_GROUP **, pem_password_cb *, void *)"],
"PEM_write_bio_ECPKParameters":["int","(BIO *, const EC_GROUP *)"],
"PEM_write_ECPKParameters":["int","(int *, const EC_GROUP *)"],
"PEM_read_bio_ECPrivateKey":["EC_KEY *","(BIO *, EC_KEY **, pem_password_cb *, void *)"],
"PEM_read_ECPrivateKey":["EC_KEY *","(int *, EC_KEY **, pem_password_cb *, void *)"],
"PEM_write_bio_ECPrivateKey":["int","(BIO *, EC_KEY *, const EVP_CIPHER *, unsigned char *, int, pem_password_cb *, void *)"],
"PEM_write_ECPrivateKey":["int","(int *, EC_KEY *, const EVP_CIPHER *, unsigned char *, int, pem_password_cb *, void *)"],
"PEM_read_bio_EC_PUBKEY":["EC_KEY *","(BIO *, EC_KEY **, pem_password_cb *, void *)"],
"PEM_read_EC_PUBKEY":["EC_KEY *","(int *, EC_KEY **, pem_password_cb *, void *)"],
"PEM_write_bio_EC_PUBKEY":["int","(BIO *, EC_KEY *)"],
"PEM_write_EC_PUBKEY":["int","(int *, EC_KEY *)"],
"PEM_read_bio_DHparams":["DH *","(BIO *, DH **, pem_password_cb *, void *)"],
"PEM_read_DHparams":["DH *","(int *, DH **, pem_password_cb *, void *)"],
"PEM_write_bio_DHparams":["int","(BIO *, const DH *)"],
"PEM_write_DHparams":["int","(int *, const DH *)"],
"PEM_write_bio_DHxparams":["int","(BIO *, const DH *)"],
"PEM_write_DHxparams":["int","(int *, const DH *)"],
"PEM_read_bio_PrivateKey":["EVP_PKEY *","(BIO *, EVP_PKEY **, pem_password_cb *, void *)"],
"PEM_read_PrivateKey":["EVP_PKEY *","(int *, EVP_PKEY **, pem_password_cb *, void *)"],
"PEM_write_bio_PrivateKey":["int","(BIO *, EVP_PKEY *, const EVP_CIPHER *, unsigned char *, int, pem_password_cb *, void *)"],
"PEM_write_PrivateKey":["int","(int *, EVP_PKEY *, const EVP_CIPHER *, unsigned char *, int, pem_password_cb *, void *)"],
"PEM_read_bio_PUBKEY":["EVP_PKEY *","(BIO *, EVP_PKEY **, pem_password_cb *, void *)"],
"PEM_read_PUBKEY":["EVP_PKEY *","(int *, EVP_PKEY **, pem_password_cb *, void *)"],
"PEM_write_bio_PUBKEY":["int","(BIO *, EVP_PKEY *)"],
"PEM_write_PUBKEY":["int","(int *, EVP_PKEY *)"],
"PEM_write_bio_PrivateKey_traditional":["int","(BIO *, EVP_PKEY *, const EVP_CIPHER *, unsigned char *, int, pem_password_cb *, void *)"],
"PEM_write_bio_PKCS8PrivateKey_nid":["int","(BIO *, EVP_PKEY *, int, char *, int, pem_password_cb *, void *)"],
"PEM_write_bio_PKCS8PrivateKey":["int","(BIO *, EVP_PKEY *, const EVP_CIPHER *, char *, int, pem_password_cb *, void *)"],
"i2d_PKCS8PrivateKey_bio":["int","(BIO *, EVP_PKEY *, const EVP_CIPHER *, char *, int, pem_password_cb *, void *)"],
"i2d_PKCS8PrivateKey_nid_bio":["int","(BIO *, EVP_PKEY *, int, char *, int, pem_password_cb *, void *)"],
"d2i_PKCS8PrivateKey_bio":["EVP_PKEY *","(BIO *, EVP_PKEY **, pem_password_cb *, void *)"],
"i2d_PKCS8PrivateKey_fp":["int","(int *, EVP_PKEY *, const EVP_CIPHER *, char *, int, pem_password_cb *, void *)"],
"i2d_PKCS8PrivateKey_nid_fp":["int","(int *, EVP_PKEY *, int, char *, int, pem_password_cb *, void *)"],
"PEM_write_PKCS8PrivateKey_nid":["int","(int *, EVP_PKEY *, int, char *, int, pem_password_cb *, void *)"],
"d2i_PKCS8PrivateKey_fp":["EVP_PKEY *","(int *, EVP_PKEY **, pem_password_cb *, void *)"],
"PEM_write_PKCS8PrivateKey":["int","(int *, EVP_PKEY *, const EVP_CIPHER *, char *, int, pem_password_cb *, void *)"],
"PEM_read_bio_Parameters":["EVP_PKEY *","(BIO *, EVP_PKEY **)"],
"PEM_write_bio_Parameters":["int","(BIO *, EVP_PKEY *)"],
"b2i_PrivateKey":["EVP_PKEY *","(const unsigned char **, long)"],
"b2i_PublicKey":["EVP_PKEY *","(const unsigned char **, long)"],
"b2i_PrivateKey_bio":["EVP_PKEY *","(BIO *)"],
"b2i_PublicKey_bio":["EVP_PKEY *","(BIO *)"],
"i2b_PrivateKey_bio":["int","(BIO *, EVP_PKEY *)"],
"i2b_PublicKey_bio":["int","(BIO *, EVP_PKEY *)"],
"b2i_PVK_bio":["EVP_PKEY *","(BIO *, pem_password_cb *, void *)"],
"i2b_PVK_bio":["int","(BIO *, EVP_PKEY *, int, pem_password_cb *, void *)"],
"ERR_load_UI_strings":["int","()"],
"UI_new":["UI *","()"],
"UI_new_method":["UI *","(const UI_METHOD *)"],
"UI_free":["void","(UI *)"],
"UI_add_input_string":["int","(UI *, const char *, int, char *, int, int)"],
"UI_dup_input_string":["int","(UI *, const char *, int, char *, int, int)"],
"UI_add_verify_string":["int","(UI *, const char *, int, char *, int, int, const char *)"],
"UI_dup_verify_string":["int","(UI *, const char *, int, char *, int, int, const char *)"],
"UI_add_input_boolean":["int","(UI *, const char *, const char *, const char *, const char *, int, char *)"],
"UI_dup_input_boolean":["int","(UI *, const char *, const char *, const char *, const char *, int, char *)"],
"UI_add_info_string":["int","(UI *, const char *)"],
"UI_dup_info_string":["int","(UI *, const char *)"],
"UI_add_error_string":["int","(UI *, const char *)"],
"UI_dup_error_string":["int","(UI *, const char *)"],
"UI_construct_prompt":["char *","(UI *, const char *, const char *)"],
"UI_add_user_data":["void *","(UI *, void *)"],
"UI_dup_user_data":["int","(UI *, void *)"],
"UI_get0_user_data":["void *","(UI *)"],
"UI_get0_result":["const char *","(UI *, int)"],
"UI_get_result_length":["int","(UI *, int)"],
"UI_process":["int","(UI *)"],
"UI_ctrl":["int","(UI *, int, long, void *, void (*)(void))"],
"UI_set_ex_data":["int","(UI *, int, void *)"],
"UI_get_ex_data":["void *","(UI *, int)"],
"UI_set_default_method":["void","(const UI_METHOD *)"],
"UI_get_default_method":["const UI_METHOD *","()"],
"UI_get_method":["const UI_METHOD *","(UI *)"],
"UI_set_method":["const UI_METHOD *","(UI *, const UI_METHOD *)"],
"UI_OpenSSL":["UI_METHOD *","()"],
"UI_null":["const UI_METHOD *","()"],
"sk_UI_STRING_num":["int","(const struct stack_st_UI_STRING *)"],
"sk_UI_STRING_value":["UI_STRING *","(const struct stack_st_UI_STRING *, int)"],
"sk_UI_STRING_new":["struct stack_st_UI_STRING *","(sk_UI_STRING_compfunc)"],
"sk_UI_STRING_new_null":["struct stack_st_UI_STRING *","()"],
"sk_UI_STRING_new_reserve":["struct stack_st_UI_STRING *","(sk_UI_STRING_compfunc, int)"],
"sk_UI_STRING_reserve":["int","(struct stack_st_UI_STRING *, int)"],
"sk_UI_STRING_free":["void","(struct stack_st_UI_STRING *)"],
"sk_UI_STRING_zero":["void","(struct stack_st_UI_STRING *)"],
"sk_UI_STRING_delete":["UI_STRING *","(struct stack_st_UI_STRING *, int)"],
"sk_UI_STRING_delete_ptr":["UI_STRING *","(struct stack_st_UI_STRING *, UI_STRING *)"],
"sk_UI_STRING_push":["int","(struct stack_st_UI_STRING *, UI_STRING *)"],
"sk_UI_STRING_unshift":["int","(struct stack_st_UI_STRING *, UI_STRING *)"],
"sk_UI_STRING_pop":["UI_STRING *","(struct stack_st_UI_STRING *)"],
"sk_UI_STRING_shift":["UI_STRING *","(struct stack_st_UI_STRING *)"],
"sk_UI_STRING_pop_free":["void","(struct stack_st_UI_STRING *, sk_UI_STRING_freefunc)"],
"sk_UI_STRING_insert":["int","(struct stack_st_UI_STRING *, UI_STRING *, int)"],
"sk_UI_STRING_set":["UI_STRING *","(struct stack_st_UI_STRING *, int, UI_STRING *)"],
"sk_UI_STRING_find":["int","(struct stack_st_UI_STRING *, UI_STRING *)"],
"sk_UI_STRING_find_ex":["int","(struct stack_st_UI_STRING *, UI_STRING *)"],
"sk_UI_STRING_sort":["void","(struct stack_st_UI_STRING *)"],
"sk_UI_STRING_is_sorted":["int","(const struct stack_st_UI_STRING *)"],
"sk_UI_STRING_dup":["struct stack_st_UI_STRING *","(const struct stack_st_UI_STRING *)"],
"sk_UI_STRING_deep_copy":["struct stack_st_UI_STRING *","(const struct stack_st_UI_STRING *, sk_UI_STRING_copyfunc, sk_UI_STRING_freefunc)"],
"sk_UI_STRING_set_cmp_func":["sk_UI_STRING_compfunc","(struct stack_st_UI_STRING *, sk_UI_STRING_compfunc)"],
"UI_create_method":["UI_METHOD *","(const char *)"],
"UI_destroy_method":["void","(UI_METHOD *)"],
"UI_method_set_opener":["int","(UI_METHOD *, int (*)(UI *))"],
"UI_method_set_writer":["int","(UI_METHOD *, int (*)(UI *, UI_STRING *))"],
"UI_method_set_flusher":["int","(UI_METHOD *, int (*)(UI *))"],
"UI_method_set_reader":["int","(UI_METHOD *, int (*)(UI *, UI_STRING *))"],
"UI_method_set_closer":["int","(UI_METHOD *, int (*)(UI *))"],
"UI_method_set_data_duplicator":["int","(UI_METHOD *, void *(*)(UI *, void *), void (*)(UI *, void *))"],
"UI_method_set_prompt_constructor":["int","(UI_METHOD *, char *(*)(UI *, const char *, const char *))"],
"UI_method_set_ex_data":["int","(UI_METHOD *, int, void *)"],
"UI_method_get_opener":["int (*)(UI *)","(const UI_METHOD *)"],
"UI_method_get_writer":["int (*)(UI *, UI_STRING *)","(const UI_METHOD *)"],
"UI_method_get_flusher":["int (*)(UI *)","(const UI_METHOD *)"],
"UI_method_get_reader":["int (*)(UI *, UI_STRING *)","(const UI_METHOD *)"],
"UI_method_get_closer":["int (*)(UI *)","(const UI_METHOD *)"],
"UI_method_get_prompt_constructor":["char *(*)(UI *, const char *, const char *)","(const UI_METHOD *)"],
"UI_method_get_data_duplicator":["void *(*)(UI *, void *)","(const UI_METHOD *)"],
"UI_method_get_data_destructor":["void (*)(UI *, void *)","(const UI_METHOD *)"],
"UI_method_get_ex_data":["const void *","(const UI_METHOD *, int)"],
"UI_get_string_type":["enum UI_string_types","(UI_STRING *)"],
"UI_get_input_flags":["int","(UI_STRING *)"],
"UI_get0_output_string":["const char *","(UI_STRING *)"],
"UI_get0_action_string":["const char *","(UI_STRING *)"],
"UI_get0_result_string":["const char *","(UI_STRING *)"],
"UI_get_result_string_length":["int","(UI_STRING *)"],
"UI_get0_test_string":["const char *","(UI_STRING *)"],
"UI_get_result_minsize":["int","(UI_STRING *)"],
"UI_get_result_maxsize":["int","(UI_STRING *)"],
"UI_set_result":["int","(UI *, UI_STRING *, const char *)"],
"UI_set_result_ex":["int","(UI *, UI_STRING *, const char *, int)"],
"UI_UTIL_read_pw_string":["int","(char *, int, const char *, int)"],
"UI_UTIL_read_pw":["int","(char *, char *, int, const char *, int)"],
"UI_UTIL_wrap_read_pem_callback":["UI_METHOD *","(pem_password_cb *, int)"],
"lh_ERR_STRING_DATA_new":["struct lhash_st_ERR_STRING_DATA *","(unsigned long (*)(const ERR_STRING_DATA *), int (*)(const ERR_STRING_DATA *, const ERR_STRING_DATA *))"],
"lh_ERR_STRING_DATA_free":["void","(struct lhash_st_ERR_STRING_DATA *)"],
"lh_ERR_STRING_DATA_insert":["ERR_STRING_DATA *","(struct lhash_st_ERR_STRING_DATA *, ERR_STRING_DATA *)"],
"lh_ERR_STRING_DATA_delete":["ERR_STRING_DATA *","(struct lhash_st_ERR_STRING_DATA *, const ERR_STRING_DATA *)"],
"lh_ERR_STRING_DATA_retrieve":["ERR_STRING_DATA *","(struct lhash_st_ERR_STRING_DATA *, const ERR_STRING_DATA *)"],
"lh_ERR_STRING_DATA_error":["int","(struct lhash_st_ERR_STRING_DATA *)"],
"lh_ERR_STRING_DATA_num_items":["unsigned long","(struct lhash_st_ERR_STRING_DATA *)"],
"lh_ERR_STRING_DATA_node_stats_bio":["void","(const struct lhash_st_ERR_STRING_DATA *, BIO *)"],
"lh_ERR_STRING_DATA_node_usage_stats_bio":["void","(const struct lhash_st_ERR_STRING_DATA *, BIO *)"],
"lh_ERR_STRING_DATA_stats_bio":["void","(const struct lhash_st_ERR_STRING_DATA *, BIO *)"],
"lh_ERR_STRING_DATA_get_down_load":["unsigned long","(struct lhash_st_ERR_STRING_DATA *)"],
"lh_ERR_STRING_DATA_set_down_load":["void","(struct lhash_st_ERR_STRING_DATA *, unsigned long)"],
"lh_ERR_STRING_DATA_doall":["void","(struct lhash_st_ERR_STRING_DATA *, void (*)(ERR_STRING_DATA *))"],
"ERR_put_error":["void","(int, int, int, const char *, int)"],
"ERR_set_error_data":["void","(char *, int)"],
"ERR_get_error":["unsigned long","()"],
"ERR_get_error_line":["unsigned long","(const char **, int *)"],
"ERR_get_error_line_data":["unsigned long","(const char **, int *, const char **, int *)"],
"ERR_peek_error":["unsigned long","()"],
"ERR_peek_error_line":["unsigned long","(const char **, int *)"],
"ERR_peek_error_line_data":["unsigned long","(const char **, int *, const char **, int *)"],
"ERR_peek_last_error":["unsigned long","()"],
"ERR_peek_last_error_line":["unsigned long","(const char **, int *)"],
"ERR_peek_last_error_line_data":["unsigned long","(const char **, int *, const char **, int *)"],
"ERR_clear_error":["void","()"],
"ERR_error_string":["char *","(unsigned long, char *)"],
"ERR_error_string_n":["void","(unsigned long, char *, int)"],
"ERR_lib_error_string":["const char *","(unsigned long)"],
"ERR_func_error_string":["const char *","(unsigned long)"],
"ERR_reason_error_string":["const char *","(unsigned long)"],
"ERR_print_errors_cb":["void","(int (*)(const char *, int, void *), void *)"],
"ERR_print_errors_fp":["void","(int *)"],
"ERR_print_errors":["void","(BIO *)"],
"ERR_add_error_data":["void","(int, ...)"],
"ERR_add_error_vdata":["void","(int, int)"],
"ERR_load_strings":["int","(int, ERR_STRING_DATA *)"],
"ERR_load_strings_const":["int","(const ERR_STRING_DATA *)"],
"ERR_unload_strings":["int","(int, ERR_STRING_DATA *)"],
"ERR_load_ERR_strings":["int","()"],
"ERR_remove_thread_state":["void","(void *)"],
"ERR_remove_state":["void","(unsigned long)"],
"ERR_get_state":["ERR_STATE *","()"],
"ERR_get_next_error_library":["int","()"],
"ERR_set_mark":["int","()"],
"ERR_pop_to_mark":["int","()"],
"ERR_clear_last_mark":["int","()"],
"ERR_load_ENGINE_strings":["int","()"],
"ENGINE_get_first":["ENGINE *","()"],
"ENGINE_get_last":["ENGINE *","()"],
"ENGINE_get_next":["ENGINE *","(ENGINE *)"],
"ENGINE_get_prev":["ENGINE *","(ENGINE *)"],
"ENGINE_add":["int","(ENGINE *)"],
"ENGINE_remove":["int","(ENGINE *)"],
"ENGINE_by_id":["ENGINE *","(const char *)"],
"ENGINE_load_builtin_engines":["void","()"],
"ENGINE_get_table_flags":["unsigned int","()"],
"ENGINE_set_table_flags":["void","(unsigned int)"],
"ENGINE_register_RSA":["int","(ENGINE *)"],
"ENGINE_unregister_RSA":["void","(ENGINE *)"],
"ENGINE_register_all_RSA":["void","()"],
"ENGINE_register_DSA":["int","(ENGINE *)"],
"ENGINE_unregister_DSA":["void","(ENGINE *)"],
"ENGINE_register_all_DSA":["void","()"],
"ENGINE_register_EC":["int","(ENGINE *)"],
"ENGINE_unregister_EC":["void","(ENGINE *)"],
"ENGINE_register_all_EC":["void","()"],
"ENGINE_register_DH":["int","(ENGINE *)"],
"ENGINE_unregister_DH":["void","(ENGINE *)"],
"ENGINE_register_all_DH":["void","()"],
"ENGINE_register_RAND":["int","(ENGINE *)"],
"ENGINE_unregister_RAND":["void","(ENGINE *)"],
"ENGINE_register_all_RAND":["void","()"],
"ENGINE_register_ciphers":["int","(ENGINE *)"],
"ENGINE_unregister_ciphers":["void","(ENGINE *)"],
"ENGINE_register_all_ciphers":["void","()"],
"ENGINE_register_digests":["int","(ENGINE *)"],
"ENGINE_unregister_digests":["void","(ENGINE *)"],
"ENGINE_register_all_digests":["void","()"],
"ENGINE_register_pkey_meths":["int","(ENGINE *)"],
"ENGINE_unregister_pkey_meths":["void","(ENGINE *)"],
"ENGINE_register_all_pkey_meths":["void","()"],
"ENGINE_register_pkey_asn1_meths":["int","(ENGINE *)"],
"ENGINE_unregister_pkey_asn1_meths":["void","(ENGINE *)"],
"ENGINE_register_all_pkey_asn1_meths":["void","()"],
"ENGINE_register_complete":["int","(ENGINE *)"],
"ENGINE_register_all_complete":["int","()"],
"ENGINE_ctrl":["int","(ENGINE *, int, long, void *, void (*)(void))"],
"ENGINE_cmd_is_executable":["int","(ENGINE *, int)"],
"ENGINE_ctrl_cmd":["int","(ENGINE *, const char *, long, void *, void (*)(void), int)"],
"ENGINE_ctrl_cmd_string":["int","(ENGINE *, const char *, const char *, int)"],
"ENGINE_new":["ENGINE *","()"],
"ENGINE_free":["int","(ENGINE *)"],
"ENGINE_up_ref":["int","(ENGINE *)"],
"ENGINE_set_id":["int","(ENGINE *, const char *)"],
"ENGINE_set_name":["int","(ENGINE *, const char *)"],
"ENGINE_set_RSA":["int","(ENGINE *, const RSA_METHOD *)"],
"ENGINE_set_DSA":["int","(ENGINE *, const DSA_METHOD *)"],
"ENGINE_set_EC":["int","(ENGINE *, const EC_KEY_METHOD *)"],
"ENGINE_set_DH":["int","(ENGINE *, const DH_METHOD *)"],
"ENGINE_set_RAND":["int","(ENGINE *, const RAND_METHOD *)"],
"ENGINE_set_destroy_function":["int","(ENGINE *, ENGINE_GEN_INT_FUNC_PTR)"],
"ENGINE_set_init_function":["int","(ENGINE *, ENGINE_GEN_INT_FUNC_PTR)"],
"ENGINE_set_finish_function":["int","(ENGINE *, ENGINE_GEN_INT_FUNC_PTR)"],
"ENGINE_set_ctrl_function":["int","(ENGINE *, ENGINE_CTRL_FUNC_PTR)"],
"ENGINE_set_load_privkey_function":["int","(ENGINE *, ENGINE_LOAD_KEY_PTR)"],
"ENGINE_set_load_pubkey_function":["int","(ENGINE *, ENGINE_LOAD_KEY_PTR)"],
"ENGINE_set_load_ssl_client_cert_function":["int","(ENGINE *, ENGINE_SSL_CLIENT_CERT_PTR)"],
"ENGINE_set_ciphers":["int","(ENGINE *, ENGINE_CIPHERS_PTR)"],
"ENGINE_set_digests":["int","(ENGINE *, ENGINE_DIGESTS_PTR)"],
"ENGINE_set_pkey_meths":["int","(ENGINE *, ENGINE_PKEY_METHS_PTR)"],
"ENGINE_set_pkey_asn1_meths":["int","(ENGINE *, ENGINE_PKEY_ASN1_METHS_PTR)"],
"ENGINE_set_flags":["int","(ENGINE *, int)"],
"ENGINE_set_cmd_defns":["int","(ENGINE *, const ENGINE_CMD_DEFN *)"],
"ENGINE_set_ex_data":["int","(ENGINE *, int, void *)"],
"ENGINE_get_ex_data":["void *","(const ENGINE *, int)"],
"ENGINE_get_id":["const char *","(const ENGINE *)"],
"ENGINE_get_name":["const char *","(const ENGINE *)"],
"ENGINE_get_RSA":["const RSA_METHOD *","(const ENGINE *)"],
"ENGINE_get_DSA":["const DSA_METHOD *","(const ENGINE *)"],
"ENGINE_get_EC":["const EC_KEY_METHOD *","(const ENGINE *)"],
"ENGINE_get_DH":["const DH_METHOD *","(const ENGINE *)"],
"ENGINE_get_RAND":["const RAND_METHOD *","(const ENGINE *)"],
"ENGINE_get_destroy_function":["ENGINE_GEN_INT_FUNC_PTR","(const ENGINE *)"],
"ENGINE_get_init_function":["ENGINE_GEN_INT_FUNC_PTR","(const ENGINE *)"],
"ENGINE_get_finish_function":["ENGINE_GEN_INT_FUNC_PTR","(const ENGINE *)"],
"ENGINE_get_ctrl_function":["ENGINE_CTRL_FUNC_PTR","(const ENGINE *)"],
"ENGINE_get_load_privkey_function":["ENGINE_LOAD_KEY_PTR","(const ENGINE *)"],
"ENGINE_get_load_pubkey_function":["ENGINE_LOAD_KEY_PTR","(const ENGINE *)"],
"ENGINE_get_ssl_client_cert_function":["ENGINE_SSL_CLIENT_CERT_PTR","(const ENGINE *)"],
"ENGINE_get_ciphers":["ENGINE_CIPHERS_PTR","(const ENGINE *)"],
"ENGINE_get_digests":["ENGINE_DIGESTS_PTR","(const ENGINE *)"],
"ENGINE_get_pkey_meths":["ENGINE_PKEY_METHS_PTR","(const ENGINE *)"],
"ENGINE_get_pkey_asn1_meths":["ENGINE_PKEY_ASN1_METHS_PTR","(const ENGINE *)"],
"ENGINE_get_cipher":["const EVP_CIPHER *","(ENGINE *, int)"],
"ENGINE_get_digest":["const EVP_MD *","(ENGINE *, int)"],
"ENGINE_get_pkey_meth":["const EVP_PKEY_METHOD *","(ENGINE *, int)"],
"ENGINE_get_pkey_asn1_meth":["const EVP_PKEY_ASN1_METHOD *","(ENGINE *, int)"],
"ENGINE_get_pkey_asn1_meth_str":["const EVP_PKEY_ASN1_METHOD *","(ENGINE *, const char *, int)"],
"ENGINE_pkey_asn1_find_str":["const EVP_PKEY_ASN1_METHOD *","(ENGINE **, const char *, int)"],
"ENGINE_get_cmd_defns":["const ENGINE_CMD_DEFN *","(const ENGINE *)"],
"ENGINE_get_flags":["int","(const ENGINE *)"],
"ENGINE_init":["int","(ENGINE *)"],
"ENGINE_finish":["int","(ENGINE *)"],
"ENGINE_load_private_key":["EVP_PKEY *","(ENGINE *, const char *, UI_METHOD *, void *)"],
"ENGINE_load_public_key":["EVP_PKEY *","(ENGINE *, const char *, UI_METHOD *, void *)"],
"ENGINE_load_ssl_client_cert":["int","(ENGINE *, SSL *, struct stack_st_X509_NAME *, X509 **, EVP_PKEY **, struct stack_st_X509 **, UI_METHOD *, void *)"],
"ENGINE_get_default_RSA":["ENGINE *","()"],
"ENGINE_get_default_DSA":["ENGINE *","()"],
"ENGINE_get_default_EC":["ENGINE *","()"],
"ENGINE_get_default_DH":["ENGINE *","()"],
"ENGINE_get_default_RAND":["ENGINE *","()"],
"ENGINE_get_cipher_engine":["ENGINE *","(int)"],
"ENGINE_get_digest_engine":["ENGINE *","(int)"],
"ENGINE_get_pkey_meth_engine":["ENGINE *","(int)"],
"ENGINE_get_pkey_asn1_meth_engine":["ENGINE *","(int)"],
"ENGINE_set_default_RSA":["int","(ENGINE *)"],
"ENGINE_set_default_string":["int","(ENGINE *, const char *)"],
"ENGINE_set_default_DSA":["int","(ENGINE *)"],
"ENGINE_set_default_EC":["int","(ENGINE *)"],
"ENGINE_set_default_DH":["int","(ENGINE *)"],
"ENGINE_set_default_RAND":["int","(ENGINE *)"],
"ENGINE_set_default_ciphers":["int","(ENGINE *)"],
"ENGINE_set_default_digests":["int","(ENGINE *)"],
"ENGINE_set_default_pkey_meths":["int","(ENGINE *)"],
"ENGINE_set_default_pkey_asn1_meths":["int","(ENGINE *)"],
"ENGINE_set_default":["int","(ENGINE *, unsigned int)"],
"ENGINE_add_conf_module":["void","()"],
"ENGINE_get_static_state":["void *","()"],
"HMAC_size":["int","(const HMAC_CTX *)"],
"HMAC_CTX_new":["HMAC_CTX *","()"],
"HMAC_CTX_reset":["int","(HMAC_CTX *)"],
"HMAC_CTX_free":["void","(HMAC_CTX *)"],
"HMAC_Init":["int","(HMAC_CTX *, const void *, int, const EVP_MD *)"],
"HMAC_Init_ex":["int","(HMAC_CTX *, const void *, int, const EVP_MD *, ENGINE *)"],
"HMAC_Update":["int","(HMAC_CTX *, const unsigned char *, int)"],
"HMAC_Final":["int","(HMAC_CTX *, unsigned char *, unsigned int *)"],
"HMAC":["unsigned char *","(const EVP_MD *, const void *, int, const unsigned char *, int, unsigned char *, unsigned int *)"],
"HMAC_CTX_copy":["int","(HMAC_CTX *, HMAC_CTX *)"],
"HMAC_CTX_set_flags":["void","(HMAC_CTX *, unsigned long)"],
"HMAC_CTX_get_md":["const EVP_MD *","(const HMAC_CTX *)"],
"ERR_load_KDF_strings":["int","()"],
"MD4_Init":["int","(MD4_CTX *)"],
"MD4_Update":["int","(MD4_CTX *, const void *, int)"],
"MD4_Final":["int","(unsigned char *, MD4_CTX *)"],
"MD4":["unsigned char *","(const unsigned char *, int, unsigned char *)"],
"MD4_Transform":["void","(MD4_CTX *, const unsigned char *)"],
"MD5_Init":["int","(MD5_CTX *)"],
"MD5_Update":["int","(MD5_CTX *, const void *, int)"],
"MD5_Final":["int","(unsigned char *, MD5_CTX *)"],
"MD5":["unsigned char *","(const unsigned char *, int, unsigned char *)"],
"MD5_Transform":["void","(MD5_CTX *, const unsigned char *)"],
"CRYPTO_cbc128_encrypt":["void","(const unsigned char *, unsigned char *, int, const void *, unsigned char *, block128_f)"],
"CRYPTO_cbc128_decrypt":["void","(const unsigned char *, unsigned char *, int, const void *, unsigned char *, block128_f)"],
"CRYPTO_ctr128_encrypt":["void","(const unsigned char *, unsigned char *, int, const void *, unsigned char *, unsigned char *, unsigned int *, block128_f)"],
"CRYPTO_ctr128_encrypt_ctr32":["void","(const unsigned char *, unsigned char *, int, const void *, unsigned char *, unsigned char *, unsigned int *, ctr128_f)"],
"CRYPTO_ofb128_encrypt":["void","(const unsigned char *, unsigned char *, int, const void *, unsigned char *, int *, block128_f)"],
"CRYPTO_cfb128_encrypt":["void","(const unsigned char *, unsigned char *, int, const void *, unsigned char *, int *, int, block128_f)"],
"CRYPTO_cfb128_8_encrypt":["void","(const unsigned char *, unsigned char *, int, const void *, unsigned char *, int *, int, block128_f)"],
"CRYPTO_cfb128_1_encrypt":["void","(const unsigned char *, unsigned char *, int, const void *, unsigned char *, int *, int, block128_f)"],
"CRYPTO_cts128_encrypt_block":["int","(const unsigned char *, unsigned char *, int, const void *, unsigned char *, block128_f)"],
"CRYPTO_cts128_encrypt":["int","(const unsigned char *, unsigned char *, int, const void *, unsigned char *, cbc128_f)"],
"CRYPTO_cts128_decrypt_block":["int","(const unsigned char *, unsigned char *, int, const void *, unsigned char *, block128_f)"],
"CRYPTO_cts128_decrypt":["int","(const unsigned char *, unsigned char *, int, const void *, unsigned char *, cbc128_f)"],
"CRYPTO_nistcts128_encrypt_block":["int","(const unsigned char *, unsigned char *, int, const void *, unsigned char *, block128_f)"],
"CRYPTO_nistcts128_encrypt":["int","(const unsigned char *, unsigned char *, int, const void *, unsigned char *, cbc128_f)"],
"CRYPTO_nistcts128_decrypt_block":["int","(const unsigned char *, unsigned char *, int, const void *, unsigned char *, block128_f)"],
"CRYPTO_nistcts128_decrypt":["int","(const unsigned char *, unsigned char *, int, const void *, unsigned char *, cbc128_f)"],
"CRYPTO_gcm128_new":["GCM128_CONTEXT *","(void *, block128_f)"],
"CRYPTO_gcm128_init":["void","(GCM128_CONTEXT *, void *, block128_f)"],
"CRYPTO_gcm128_setiv":["void","(GCM128_CONTEXT *, const unsigned char *, int)"],
"CRYPTO_gcm128_aad":["int","(GCM128_CONTEXT *, const unsigned char *, int)"],
"CRYPTO_gcm128_encrypt":["int","(GCM128_CONTEXT *, const unsigned char *, unsigned char *, int)"],
"CRYPTO_gcm128_decrypt":["int","(GCM128_CONTEXT *, const unsigned char *, unsigned char *, int)"],
"CRYPTO_gcm128_encrypt_ctr32":["int","(GCM128_CONTEXT *, const unsigned char *, unsigned char *, int, ctr128_f)"],
"CRYPTO_gcm128_decrypt_ctr32":["int","(GCM128_CONTEXT *, const unsigned char *, unsigned char *, int, ctr128_f)"],
"CRYPTO_gcm128_finish":["int","(GCM128_CONTEXT *, const unsigned char *, int)"],
"CRYPTO_gcm128_tag":["void","(GCM128_CONTEXT *, unsigned char *, int)"],
"CRYPTO_gcm128_release":["void","(GCM128_CONTEXT *)"],
"CRYPTO_ccm128_init":["void","(CCM128_CONTEXT *, unsigned int, unsigned int, void *, block128_f)"],
"CRYPTO_ccm128_setiv":["int","(CCM128_CONTEXT *, const unsigned char *, int, int)"],
"CRYPTO_ccm128_aad":["void","(CCM128_CONTEXT *, const unsigned char *, int)"],
"CRYPTO_ccm128_encrypt":["int","(CCM128_CONTEXT *, const unsigned char *, unsigned char *, int)"],
"CRYPTO_ccm128_decrypt":["int","(CCM128_CONTEXT *, const unsigned char *, unsigned char *, int)"],
"CRYPTO_ccm128_encrypt_ccm64":["int","(CCM128_CONTEXT *, const unsigned char *, unsigned char *, int, ccm128_f)"],
"CRYPTO_ccm128_decrypt_ccm64":["int","(CCM128_CONTEXT *, const unsigned char *, unsigned char *, int, ccm128_f)"],
"CRYPTO_ccm128_tag":["int","(CCM128_CONTEXT *, unsigned char *, int)"],
"CRYPTO_xts128_encrypt":["int","(const XTS128_CONTEXT *, const unsigned char *, const unsigned char *, unsigned char *, int, int)"],
"CRYPTO_128_wrap":["int","(void *, const unsigned char *, unsigned char *, const unsigned char *, int, block128_f)"],
"CRYPTO_128_unwrap":["int","(void *, const unsigned char *, unsigned char *, const unsigned char *, int, block128_f)"],
"CRYPTO_128_wrap_pad":["int","(void *, const unsigned char *, unsigned char *, const unsigned char *, int, block128_f)"],
"CRYPTO_128_unwrap_pad":["int","(void *, const unsigned char *, unsigned char *, const unsigned char *, int, block128_f)"],
"CRYPTO_ocb128_new":["OCB128_CONTEXT *","(void *, void *, block128_f, block128_f, ocb128_f)"],
"CRYPTO_ocb128_init":["int","(OCB128_CONTEXT *, void *, void *, block128_f, block128_f, ocb128_f)"],
"CRYPTO_ocb128_copy_ctx":["int","(OCB128_CONTEXT *, OCB128_CONTEXT *, void *, void *)"],
"CRYPTO_ocb128_setiv":["int","(OCB128_CONTEXT *, const unsigned char *, int, int)"],
"CRYPTO_ocb128_aad":["int","(OCB128_CONTEXT *, const unsigned char *, int)"],
"CRYPTO_ocb128_encrypt":["int","(OCB128_CONTEXT *, const unsigned char *, unsigned char *, int)"],
"CRYPTO_ocb128_decrypt":["int","(OCB128_CONTEXT *, const unsigned char *, unsigned char *, int)"],
"CRYPTO_ocb128_finish":["int","(OCB128_CONTEXT *, const unsigned char *, int)"],
"CRYPTO_ocb128_tag":["int","(OCB128_CONTEXT *, unsigned char *, int)"],
"CRYPTO_ocb128_cleanup":["void","(OCB128_CONTEXT *)"],
"ERR_load_OCSP_strings":["int","()"],
"sk_OCSP_CERTID_num":["int","(const struct stack_st_OCSP_CERTID *)"],
"sk_OCSP_CERTID_value":["OCSP_CERTID *","(const struct stack_st_OCSP_CERTID *, int)"],
"sk_OCSP_CERTID_new":["struct stack_st_OCSP_CERTID *","(sk_OCSP_CERTID_compfunc)"],
"sk_OCSP_CERTID_new_null":["struct stack_st_OCSP_CERTID *","()"],
"sk_OCSP_CERTID_new_reserve":["struct stack_st_OCSP_CERTID *","(sk_OCSP_CERTID_compfunc, int)"],
"sk_OCSP_CERTID_reserve":["int","(struct stack_st_OCSP_CERTID *, int)"],
"sk_OCSP_CERTID_free":["void","(struct stack_st_OCSP_CERTID *)"],
"sk_OCSP_CERTID_zero":["void","(struct stack_st_OCSP_CERTID *)"],
"sk_OCSP_CERTID_delete":["OCSP_CERTID *","(struct stack_st_OCSP_CERTID *, int)"],
"sk_OCSP_CERTID_delete_ptr":["OCSP_CERTID *","(struct stack_st_OCSP_CERTID *, OCSP_CERTID *)"],
"sk_OCSP_CERTID_push":["int","(struct stack_st_OCSP_CERTID *, OCSP_CERTID *)"],
"sk_OCSP_CERTID_unshift":["int","(struct stack_st_OCSP_CERTID *, OCSP_CERTID *)"],
"sk_OCSP_CERTID_pop":["OCSP_CERTID *","(struct stack_st_OCSP_CERTID *)"],
"sk_OCSP_CERTID_shift":["OCSP_CERTID *","(struct stack_st_OCSP_CERTID *)"],
"sk_OCSP_CERTID_pop_free":["void","(struct stack_st_OCSP_CERTID *, sk_OCSP_CERTID_freefunc)"],
"sk_OCSP_CERTID_insert":["int","(struct stack_st_OCSP_CERTID *, OCSP_CERTID *, int)"],
"sk_OCSP_CERTID_set":["OCSP_CERTID *","(struct stack_st_OCSP_CERTID *, int, OCSP_CERTID *)"],
"sk_OCSP_CERTID_find":["int","(struct stack_st_OCSP_CERTID *, OCSP_CERTID *)"],
"sk_OCSP_CERTID_find_ex":["int","(struct stack_st_OCSP_CERTID *, OCSP_CERTID *)"],
"sk_OCSP_CERTID_sort":["void","(struct stack_st_OCSP_CERTID *)"],
"sk_OCSP_CERTID_is_sorted":["int","(const struct stack_st_OCSP_CERTID *)"],
"sk_OCSP_CERTID_dup":["struct stack_st_OCSP_CERTID *","(const struct stack_st_OCSP_CERTID *)"],
"sk_OCSP_CERTID_deep_copy":["struct stack_st_OCSP_CERTID *","(const struct stack_st_OCSP_CERTID *, sk_OCSP_CERTID_copyfunc, sk_OCSP_CERTID_freefunc)"],
"sk_OCSP_CERTID_set_cmp_func":["sk_OCSP_CERTID_compfunc","(struct stack_st_OCSP_CERTID *, sk_OCSP_CERTID_compfunc)"],
"sk_OCSP_ONEREQ_num":["int","(const struct stack_st_OCSP_ONEREQ *)"],
"sk_OCSP_ONEREQ_value":["OCSP_ONEREQ *","(const struct stack_st_OCSP_ONEREQ *, int)"],
"sk_OCSP_ONEREQ_new":["struct stack_st_OCSP_ONEREQ *","(sk_OCSP_ONEREQ_compfunc)"],
"sk_OCSP_ONEREQ_new_null":["struct stack_st_OCSP_ONEREQ *","()"],
"sk_OCSP_ONEREQ_new_reserve":["struct stack_st_OCSP_ONEREQ *","(sk_OCSP_ONEREQ_compfunc, int)"],
"sk_OCSP_ONEREQ_reserve":["int","(struct stack_st_OCSP_ONEREQ *, int)"],
"sk_OCSP_ONEREQ_free":["void","(struct stack_st_OCSP_ONEREQ *)"],
"sk_OCSP_ONEREQ_zero":["void","(struct stack_st_OCSP_ONEREQ *)"],
"sk_OCSP_ONEREQ_delete":["OCSP_ONEREQ *","(struct stack_st_OCSP_ONEREQ *, int)"],
"sk_OCSP_ONEREQ_delete_ptr":["OCSP_ONEREQ *","(struct stack_st_OCSP_ONEREQ *, OCSP_ONEREQ *)"],
"sk_OCSP_ONEREQ_push":["int","(struct stack_st_OCSP_ONEREQ *, OCSP_ONEREQ *)"],
"sk_OCSP_ONEREQ_unshift":["int","(struct stack_st_OCSP_ONEREQ *, OCSP_ONEREQ *)"],
"sk_OCSP_ONEREQ_pop":["OCSP_ONEREQ *","(struct stack_st_OCSP_ONEREQ *)"],
"sk_OCSP_ONEREQ_shift":["OCSP_ONEREQ *","(struct stack_st_OCSP_ONEREQ *)"],
"sk_OCSP_ONEREQ_pop_free":["void","(struct stack_st_OCSP_ONEREQ *, sk_OCSP_ONEREQ_freefunc)"],
"sk_OCSP_ONEREQ_insert":["int","(struct stack_st_OCSP_ONEREQ *, OCSP_ONEREQ *, int)"],
"sk_OCSP_ONEREQ_set":["OCSP_ONEREQ *","(struct stack_st_OCSP_ONEREQ *, int, OCSP_ONEREQ *)"],
"sk_OCSP_ONEREQ_find":["int","(struct stack_st_OCSP_ONEREQ *, OCSP_ONEREQ *)"],
"sk_OCSP_ONEREQ_find_ex":["int","(struct stack_st_OCSP_ONEREQ *, OCSP_ONEREQ *)"],
"sk_OCSP_ONEREQ_sort":["void","(struct stack_st_OCSP_ONEREQ *)"],
"sk_OCSP_ONEREQ_is_sorted":["int","(const struct stack_st_OCSP_ONEREQ *)"],
"sk_OCSP_ONEREQ_dup":["struct stack_st_OCSP_ONEREQ *","(const struct stack_st_OCSP_ONEREQ *)"],
"sk_OCSP_ONEREQ_deep_copy":["struct stack_st_OCSP_ONEREQ *","(const struct stack_st_OCSP_ONEREQ *, sk_OCSP_ONEREQ_copyfunc, sk_OCSP_ONEREQ_freefunc)"],
"sk_OCSP_ONEREQ_set_cmp_func":["sk_OCSP_ONEREQ_compfunc","(struct stack_st_OCSP_ONEREQ *, sk_OCSP_ONEREQ_compfunc)"],
"sk_OCSP_RESPID_num":["int","(const struct stack_st_OCSP_RESPID *)"],
"sk_OCSP_RESPID_value":["OCSP_RESPID *","(const struct stack_st_OCSP_RESPID *, int)"],
"sk_OCSP_RESPID_new":["struct stack_st_OCSP_RESPID *","(sk_OCSP_RESPID_compfunc)"],
"sk_OCSP_RESPID_new_null":["struct stack_st_OCSP_RESPID *","()"],
"sk_OCSP_RESPID_new_reserve":["struct stack_st_OCSP_RESPID *","(sk_OCSP_RESPID_compfunc, int)"],
"sk_OCSP_RESPID_reserve":["int","(struct stack_st_OCSP_RESPID *, int)"],
"sk_OCSP_RESPID_free":["void","(struct stack_st_OCSP_RESPID *)"],
"sk_OCSP_RESPID_zero":["void","(struct stack_st_OCSP_RESPID *)"],
"sk_OCSP_RESPID_delete":["OCSP_RESPID *","(struct stack_st_OCSP_RESPID *, int)"],
"sk_OCSP_RESPID_delete_ptr":["OCSP_RESPID *","(struct stack_st_OCSP_RESPID *, OCSP_RESPID *)"],
"sk_OCSP_RESPID_push":["int","(struct stack_st_OCSP_RESPID *, OCSP_RESPID *)"],
"sk_OCSP_RESPID_unshift":["int","(struct stack_st_OCSP_RESPID *, OCSP_RESPID *)"],
"sk_OCSP_RESPID_pop":["OCSP_RESPID *","(struct stack_st_OCSP_RESPID *)"],
"sk_OCSP_RESPID_shift":["OCSP_RESPID *","(struct stack_st_OCSP_RESPID *)"],
"sk_OCSP_RESPID_pop_free":["void","(struct stack_st_OCSP_RESPID *, sk_OCSP_RESPID_freefunc)"],
"sk_OCSP_RESPID_insert":["int","(struct stack_st_OCSP_RESPID *, OCSP_RESPID *, int)"],
"sk_OCSP_RESPID_set":["OCSP_RESPID *","(struct stack_st_OCSP_RESPID *, int, OCSP_RESPID *)"],
"sk_OCSP_RESPID_find":["int","(struct stack_st_OCSP_RESPID *, OCSP_RESPID *)"],
"sk_OCSP_RESPID_find_ex":["int","(struct stack_st_OCSP_RESPID *, OCSP_RESPID *)"],
"sk_OCSP_RESPID_sort":["void","(struct stack_st_OCSP_RESPID *)"],
"sk_OCSP_RESPID_is_sorted":["int","(const struct stack_st_OCSP_RESPID *)"],
"sk_OCSP_RESPID_dup":["struct stack_st_OCSP_RESPID *","(const struct stack_st_OCSP_RESPID *)"],
"sk_OCSP_RESPID_deep_copy":["struct stack_st_OCSP_RESPID *","(const struct stack_st_OCSP_RESPID *, sk_OCSP_RESPID_copyfunc, sk_OCSP_RESPID_freefunc)"],
"sk_OCSP_RESPID_set_cmp_func":["sk_OCSP_RESPID_compfunc","(struct stack_st_OCSP_RESPID *, sk_OCSP_RESPID_compfunc)"],
"sk_OCSP_SINGLERESP_num":["int","(const struct stack_st_OCSP_SINGLERESP *)"],
"sk_OCSP_SINGLERESP_value":["OCSP_SINGLERESP *","(const struct stack_st_OCSP_SINGLERESP *, int)"],
"sk_OCSP_SINGLERESP_new":["struct stack_st_OCSP_SINGLERESP *","(sk_OCSP_SINGLERESP_compfunc)"],
"sk_OCSP_SINGLERESP_new_null":["struct stack_st_OCSP_SINGLERESP *","()"],
"sk_OCSP_SINGLERESP_new_reserve":["struct stack_st_OCSP_SINGLERESP *","(sk_OCSP_SINGLERESP_compfunc, int)"],
"sk_OCSP_SINGLERESP_reserve":["int","(struct stack_st_OCSP_SINGLERESP *, int)"],
"sk_OCSP_SINGLERESP_free":["void","(struct stack_st_OCSP_SINGLERESP *)"],
"sk_OCSP_SINGLERESP_zero":["void","(struct stack_st_OCSP_SINGLERESP *)"],
"sk_OCSP_SINGLERESP_delete":["OCSP_SINGLERESP *","(struct stack_st_OCSP_SINGLERESP *, int)"],
"sk_OCSP_SINGLERESP_delete_ptr":["OCSP_SINGLERESP *","(struct stack_st_OCSP_SINGLERESP *, OCSP_SINGLERESP *)"],
"sk_OCSP_SINGLERESP_push":["int","(struct stack_st_OCSP_SINGLERESP *, OCSP_SINGLERESP *)"],
"sk_OCSP_SINGLERESP_unshift":["int","(struct stack_st_OCSP_SINGLERESP *, OCSP_SINGLERESP *)"],
"sk_OCSP_SINGLERESP_pop":["OCSP_SINGLERESP *","(struct stack_st_OCSP_SINGLERESP *)"],
"sk_OCSP_SINGLERESP_shift":["OCSP_SINGLERESP *","(struct stack_st_OCSP_SINGLERESP *)"],
"sk_OCSP_SINGLERESP_pop_free":["void","(struct stack_st_OCSP_SINGLERESP *, sk_OCSP_SINGLERESP_freefunc)"],
"sk_OCSP_SINGLERESP_insert":["int","(struct stack_st_OCSP_SINGLERESP *, OCSP_SINGLERESP *, int)"],
"sk_OCSP_SINGLERESP_set":["OCSP_SINGLERESP *","(struct stack_st_OCSP_SINGLERESP *, int, OCSP_SINGLERESP *)"],
"sk_OCSP_SINGLERESP_find":["int","(struct stack_st_OCSP_SINGLERESP *, OCSP_SINGLERESP *)"],
"sk_OCSP_SINGLERESP_find_ex":["int","(struct stack_st_OCSP_SINGLERESP *, OCSP_SINGLERESP *)"],
"sk_OCSP_SINGLERESP_sort":["void","(struct stack_st_OCSP_SINGLERESP *)"],
"sk_OCSP_SINGLERESP_is_sorted":["int","(const struct stack_st_OCSP_SINGLERESP *)"],
"sk_OCSP_SINGLERESP_dup":["struct stack_st_OCSP_SINGLERESP *","(const struct stack_st_OCSP_SINGLERESP *)"],
"sk_OCSP_SINGLERESP_deep_copy":["struct stack_st_OCSP_SINGLERESP *","(const struct stack_st_OCSP_SINGLERESP *, sk_OCSP_SINGLERESP_copyfunc, sk_OCSP_SINGLERESP_freefunc)"],
"sk_OCSP_SINGLERESP_set_cmp_func":["sk_OCSP_SINGLERESP_compfunc","(struct stack_st_OCSP_SINGLERESP *, sk_OCSP_SINGLERESP_compfunc)"],
"OCSP_CERTID_dup":["OCSP_CERTID *","(OCSP_CERTID *)"],
"OCSP_sendreq_bio":["OCSP_RESPONSE *","(BIO *, const char *, OCSP_REQUEST *)"],
"OCSP_sendreq_new":["OCSP_REQ_CTX *","(BIO *, const char *, OCSP_REQUEST *, int)"],
"OCSP_REQ_CTX_nbio":["int","(OCSP_REQ_CTX *)"],
"OCSP_sendreq_nbio":["int","(OCSP_RESPONSE **, OCSP_REQ_CTX *)"],
"OCSP_REQ_CTX_new":["OCSP_REQ_CTX *","(BIO *, int)"],
"OCSP_REQ_CTX_free":["void","(OCSP_REQ_CTX *)"],
"OCSP_set_max_response_length":["void","(OCSP_REQ_CTX *, unsigned long)"],
"OCSP_REQ_CTX_i2d":["int","(OCSP_REQ_CTX *, const ASN1_ITEM *, ASN1_VALUE *)"],
"OCSP_REQ_CTX_nbio_d2i":["int","(OCSP_REQ_CTX *, ASN1_VALUE **, const ASN1_ITEM *)"],
"OCSP_REQ_CTX_get0_mem_bio":["BIO *","(OCSP_REQ_CTX *)"],
"OCSP_REQ_CTX_http":["int","(OCSP_REQ_CTX *, const char *, const char *)"],
"OCSP_REQ_CTX_set1_req":["int","(OCSP_REQ_CTX *, OCSP_REQUEST *)"],
"OCSP_REQ_CTX_add1_header":["int","(OCSP_REQ_CTX *, const char *, const char *)"],
"OCSP_cert_to_id":["OCSP_CERTID *","(const EVP_MD *, const X509 *, const X509 *)"],
"OCSP_cert_id_new":["OCSP_CERTID *","(const EVP_MD *, const X509_NAME *, const ASN1_BIT_STRING *, const ASN1_INTEGER *)"],
"OCSP_request_add0_id":["OCSP_ONEREQ *","(OCSP_REQUEST *, OCSP_CERTID *)"],
"OCSP_request_add1_nonce":["int","(OCSP_REQUEST *, unsigned char *, int)"],
"OCSP_basic_add1_nonce":["int","(OCSP_BASICRESP *, unsigned char *, int)"],
"OCSP_check_nonce":["int","(OCSP_REQUEST *, OCSP_BASICRESP *)"],
"OCSP_copy_nonce":["int","(OCSP_BASICRESP *, OCSP_REQUEST *)"],
"OCSP_request_set1_name":["int","(OCSP_REQUEST *, X509_NAME *)"],
"OCSP_request_add1_cert":["int","(OCSP_REQUEST *, X509 *)"],
"OCSP_request_sign":["int","(OCSP_REQUEST *, X509 *, EVP_PKEY *, const EVP_MD *, struct stack_st_X509 *, unsigned long)"],
"OCSP_response_status":["int","(OCSP_RESPONSE *)"],
"OCSP_response_get1_basic":["OCSP_BASICRESP *","(OCSP_RESPONSE *)"],
"OCSP_resp_get0_signature":["const ASN1_OCTET_STRING *","(const OCSP_BASICRESP *)"],
"OCSP_resp_get0_tbs_sigalg":["const X509_ALGOR *","(const OCSP_BASICRESP *)"],
"OCSP_resp_get0_respdata":["const OCSP_RESPDATA *","(const OCSP_BASICRESP *)"],
"OCSP_resp_get0_signer":["int","(OCSP_BASICRESP *, X509 **, struct stack_st_X509 *)"],
"OCSP_resp_count":["int","(OCSP_BASICRESP *)"],
"OCSP_resp_get0":["OCSP_SINGLERESP *","(OCSP_BASICRESP *, int)"],
"OCSP_resp_get0_produced_at":["const ASN1_GENERALIZEDTIME *","(const OCSP_BASICRESP *)"],
"OCSP_resp_get0_certs":["const struct stack_st_X509 *","(const OCSP_BASICRESP *)"],
"OCSP_resp_get0_id":["int","(const OCSP_BASICRESP *, const ASN1_OCTET_STRING **, const X509_NAME **)"],
"OCSP_resp_get1_id":["int","(const OCSP_BASICRESP *, ASN1_OCTET_STRING **, X509_NAME **)"],
"OCSP_resp_find":["int","(OCSP_BASICRESP *, OCSP_CERTID *, int)"],
"OCSP_single_get0_status":["int","(OCSP_SINGLERESP *, int *, ASN1_GENERALIZEDTIME **, ASN1_GENERALIZEDTIME **, ASN1_GENERALIZEDTIME **)"],
"OCSP_resp_find_status":["int","(OCSP_BASICRESP *, OCSP_CERTID *, int *, int *, ASN1_GENERALIZEDTIME **, ASN1_GENERALIZEDTIME **, ASN1_GENERALIZEDTIME **)"],
"OCSP_check_validity":["int","(ASN1_GENERALIZEDTIME *, ASN1_GENERALIZEDTIME *, long, long)"],
"OCSP_request_verify":["int","(OCSP_REQUEST *, struct stack_st_X509 *, X509_STORE *, unsigned long)"],
"OCSP_parse_url":["int","(const char *, char **, char **, char **, int *)"],
"OCSP_id_issuer_cmp":["int","(const OCSP_CERTID *, const OCSP_CERTID *)"],
"OCSP_id_cmp":["int","(const OCSP_CERTID *, const OCSP_CERTID *)"],
"OCSP_request_onereq_count":["int","(OCSP_REQUEST *)"],
"OCSP_request_onereq_get0":["OCSP_ONEREQ *","(OCSP_REQUEST *, int)"],
"OCSP_onereq_get0_id":["OCSP_CERTID *","(OCSP_ONEREQ *)"],
"OCSP_id_get0_info":["int","(ASN1_OCTET_STRING **, ASN1_OBJECT **, ASN1_OCTET_STRING **, ASN1_INTEGER **, OCSP_CERTID *)"],
"OCSP_request_is_signed":["int","(OCSP_REQUEST *)"],
"OCSP_response_create":["OCSP_RESPONSE *","(int, OCSP_BASICRESP *)"],
"OCSP_basic_add1_status":["OCSP_SINGLERESP *","(OCSP_BASICRESP *, OCSP_CERTID *, int, int, ASN1_TIME *, ASN1_TIME *, ASN1_TIME *)"],
"OCSP_basic_add1_cert":["int","(OCSP_BASICRESP *, X509 *)"],
"OCSP_basic_sign":["int","(OCSP_BASICRESP *, X509 *, EVP_PKEY *, const EVP_MD *, struct stack_st_X509 *, unsigned long)"],
"OCSP_basic_sign_ctx":["int","(OCSP_BASICRESP *, X509 *, EVP_MD_CTX *, struct stack_st_X509 *, unsigned long)"],
"OCSP_RESPID_set_by_name":["int","(OCSP_RESPID *, X509 *)"],
"OCSP_RESPID_set_by_key":["int","(OCSP_RESPID *, X509 *)"],
"OCSP_RESPID_match":["int","(OCSP_RESPID *, X509 *)"],
"OCSP_crlID_new":["X509_EXTENSION *","(const char *, long *, char *)"],
"OCSP_accept_responses_new":["X509_EXTENSION *","(char **)"],
"OCSP_archive_cutoff_new":["X509_EXTENSION *","(char *)"],
"OCSP_url_svcloc_new":["X509_EXTENSION *","(X509_NAME *, const char **)"],
"OCSP_REQUEST_get_ext_count":["int","(OCSP_REQUEST *)"],
"OCSP_REQUEST_get_ext_by_NID":["int","(OCSP_REQUEST *, int, int)"],
"OCSP_REQUEST_get_ext_by_OBJ":["int","(OCSP_REQUEST *, const ASN1_OBJECT *, int)"],
"OCSP_REQUEST_get_ext_by_critical":["int","(OCSP_REQUEST *, int, int)"],
"OCSP_REQUEST_get_ext":["X509_EXTENSION *","(OCSP_REQUEST *, int)"],
"OCSP_REQUEST_delete_ext":["X509_EXTENSION *","(OCSP_REQUEST *, int)"],
"OCSP_REQUEST_get1_ext_d2i":["void *","(OCSP_REQUEST *, int, int *, int *)"],
"OCSP_REQUEST_add1_ext_i2d":["int","(OCSP_REQUEST *, int, void *, int, unsigned long)"],
"OCSP_REQUEST_add_ext":["int","(OCSP_REQUEST *, X509_EXTENSION *, int)"],
"OCSP_ONEREQ_get_ext_count":["int","(OCSP_ONEREQ *)"],
"OCSP_ONEREQ_get_ext_by_NID":["int","(OCSP_ONEREQ *, int, int)"],
"OCSP_ONEREQ_get_ext_by_OBJ":["int","(OCSP_ONEREQ *, const ASN1_OBJECT *, int)"],
"OCSP_ONEREQ_get_ext_by_critical":["int","(OCSP_ONEREQ *, int, int)"],
"OCSP_ONEREQ_get_ext":["X509_EXTENSION *","(OCSP_ONEREQ *, int)"],
"OCSP_ONEREQ_delete_ext":["X509_EXTENSION *","(OCSP_ONEREQ *, int)"],
"OCSP_ONEREQ_get1_ext_d2i":["void *","(OCSP_ONEREQ *, int, int *, int *)"],
"OCSP_ONEREQ_add1_ext_i2d":["int","(OCSP_ONEREQ *, int, void *, int, unsigned long)"],
"OCSP_ONEREQ_add_ext":["int","(OCSP_ONEREQ *, X509_EXTENSION *, int)"],
"OCSP_BASICRESP_get_ext_count":["int","(OCSP_BASICRESP *)"],
"OCSP_BASICRESP_get_ext_by_NID":["int","(OCSP_BASICRESP *, int, int)"],
"OCSP_BASICRESP_get_ext_by_OBJ":["int","(OCSP_BASICRESP *, const ASN1_OBJECT *, int)"],
"OCSP_BASICRESP_get_ext_by_critical":["int","(OCSP_BASICRESP *, int, int)"],
"OCSP_BASICRESP_get_ext":["X509_EXTENSION *","(OCSP_BASICRESP *, int)"],
"OCSP_BASICRESP_delete_ext":["X509_EXTENSION *","(OCSP_BASICRESP *, int)"],
"OCSP_BASICRESP_get1_ext_d2i":["void *","(OCSP_BASICRESP *, int, int *, int *)"],
"OCSP_BASICRESP_add1_ext_i2d":["int","(OCSP_BASICRESP *, int, void *, int, unsigned long)"],
"OCSP_BASICRESP_add_ext":["int","(OCSP_BASICRESP *, X509_EXTENSION *, int)"],
"OCSP_SINGLERESP_get_ext_count":["int","(OCSP_SINGLERESP *)"],
"OCSP_SINGLERESP_get_ext_by_NID":["int","(OCSP_SINGLERESP *, int, int)"],
"OCSP_SINGLERESP_get_ext_by_OBJ":["int","(OCSP_SINGLERESP *, const ASN1_OBJECT *, int)"],
"OCSP_SINGLERESP_get_ext_by_critical":["int","(OCSP_SINGLERESP *, int, int)"],
"OCSP_SINGLERESP_get_ext":["X509_EXTENSION *","(OCSP_SINGLERESP *, int)"],
"OCSP_SINGLERESP_delete_ext":["X509_EXTENSION *","(OCSP_SINGLERESP *, int)"],
"OCSP_SINGLERESP_get1_ext_d2i":["void *","(OCSP_SINGLERESP *, int, int *, int *)"],
"OCSP_SINGLERESP_add1_ext_i2d":["int","(OCSP_SINGLERESP *, int, void *, int, unsigned long)"],
"OCSP_SINGLERESP_add_ext":["int","(OCSP_SINGLERESP *, X509_EXTENSION *, int)"],
"OCSP_SINGLERESP_get0_id":["const OCSP_CERTID *","(const OCSP_SINGLERESP *)"],
"OCSP_SINGLERESP_new":["OCSP_SINGLERESP *","()"],
"OCSP_SINGLERESP_free":["void","(OCSP_SINGLERESP *)"],
"d2i_OCSP_SINGLERESP":["OCSP_SINGLERESP *","(OCSP_SINGLERESP **, const unsigned char **, long)"],
"i2d_OCSP_SINGLERESP":["int","(OCSP_SINGLERESP *, unsigned char **)"],
"OCSP_CERTSTATUS_new":["OCSP_CERTSTATUS *","()"],
"OCSP_CERTSTATUS_free":["void","(OCSP_CERTSTATUS *)"],
"d2i_OCSP_CERTSTATUS":["OCSP_CERTSTATUS *","(OCSP_CERTSTATUS **, const unsigned char **, long)"],
"i2d_OCSP_CERTSTATUS":["int","(OCSP_CERTSTATUS *, unsigned char **)"],
"OCSP_REVOKEDINFO_new":["OCSP_REVOKEDINFO *","()"],
"OCSP_REVOKEDINFO_free":["void","(OCSP_REVOKEDINFO *)"],
"d2i_OCSP_REVOKEDINFO":["OCSP_REVOKEDINFO *","(OCSP_REVOKEDINFO **, const unsigned char **, long)"],
"i2d_OCSP_REVOKEDINFO":["int","(OCSP_REVOKEDINFO *, unsigned char **)"],
"OCSP_BASICRESP_new":["OCSP_BASICRESP *","()"],
"OCSP_BASICRESP_free":["void","(OCSP_BASICRESP *)"],
"d2i_OCSP_BASICRESP":["OCSP_BASICRESP *","(OCSP_BASICRESP **, const unsigned char **, long)"],
"i2d_OCSP_BASICRESP":["int","(OCSP_BASICRESP *, unsigned char **)"],
"OCSP_RESPDATA_new":["OCSP_RESPDATA *","()"],
"OCSP_RESPDATA_free":["void","(OCSP_RESPDATA *)"],
"d2i_OCSP_RESPDATA":["OCSP_RESPDATA *","(OCSP_RESPDATA **, const unsigned char **, long)"],
"i2d_OCSP_RESPDATA":["int","(OCSP_RESPDATA *, unsigned char **)"],
"OCSP_RESPID_new":["OCSP_RESPID *","()"],
"OCSP_RESPID_free":["void","(OCSP_RESPID *)"],
"d2i_OCSP_RESPID":["OCSP_RESPID *","(OCSP_RESPID **, const unsigned char **, long)"],
"i2d_OCSP_RESPID":["int","(OCSP_RESPID *, unsigned char **)"],
"OCSP_RESPONSE_new":["OCSP_RESPONSE *","()"],
"OCSP_RESPONSE_free":["void","(OCSP_RESPONSE *)"],
"d2i_OCSP_RESPONSE":["OCSP_RESPONSE *","(OCSP_RESPONSE **, const unsigned char **, long)"],
"i2d_OCSP_RESPONSE":["int","(OCSP_RESPONSE *, unsigned char **)"],
"OCSP_RESPBYTES_new":["OCSP_RESPBYTES *","()"],
"OCSP_RESPBYTES_free":["void","(OCSP_RESPBYTES *)"],
"d2i_OCSP_RESPBYTES":["OCSP_RESPBYTES *","(OCSP_RESPBYTES **, const unsigned char **, long)"],
"i2d_OCSP_RESPBYTES":["int","(OCSP_RESPBYTES *, unsigned char **)"],
"OCSP_ONEREQ_new":["OCSP_ONEREQ *","()"],
"OCSP_ONEREQ_free":["void","(OCSP_ONEREQ *)"],
"d2i_OCSP_ONEREQ":["OCSP_ONEREQ *","(OCSP_ONEREQ **, const unsigned char **, long)"],
"i2d_OCSP_ONEREQ":["int","(OCSP_ONEREQ *, unsigned char **)"],
"OCSP_CERTID_new":["OCSP_CERTID *","()"],
"OCSP_CERTID_free":["void","(OCSP_CERTID *)"],
"d2i_OCSP_CERTID":["OCSP_CERTID *","(OCSP_CERTID **, const unsigned char **, long)"],
"i2d_OCSP_CERTID":["int","(OCSP_CERTID *, unsigned char **)"],
"OCSP_REQUEST_new":["OCSP_REQUEST *","()"],
"OCSP_REQUEST_free":["void","(OCSP_REQUEST *)"],
"d2i_OCSP_REQUEST":["OCSP_REQUEST *","(OCSP_REQUEST **, const unsigned char **, long)"],
"i2d_OCSP_REQUEST":["int","(OCSP_REQUEST *, unsigned char **)"],
"OCSP_SIGNATURE_new":["OCSP_SIGNATURE *","()"],
"OCSP_SIGNATURE_free":["void","(OCSP_SIGNATURE *)"],
"d2i_OCSP_SIGNATURE":["OCSP_SIGNATURE *","(OCSP_SIGNATURE **, const unsigned char **, long)"],
"i2d_OCSP_SIGNATURE":["int","(OCSP_SIGNATURE *, unsigned char **)"],
"OCSP_REQINFO_new":["OCSP_REQINFO *","()"],
"OCSP_REQINFO_free":["void","(OCSP_REQINFO *)"],
"d2i_OCSP_REQINFO":["OCSP_REQINFO *","(OCSP_REQINFO **, const unsigned char **, long)"],
"i2d_OCSP_REQINFO":["int","(OCSP_REQINFO *, unsigned char **)"],
"OCSP_CRLID_new":["OCSP_CRLID *","()"],
"OCSP_CRLID_free":["void","(OCSP_CRLID *)"],
"d2i_OCSP_CRLID":["OCSP_CRLID *","(OCSP_CRLID **, const unsigned char **, long)"],
"i2d_OCSP_CRLID":["int","(OCSP_CRLID *, unsigned char **)"],
"OCSP_SERVICELOC_new":["OCSP_SERVICELOC *","()"],
"OCSP_SERVICELOC_free":["void","(OCSP_SERVICELOC *)"],
"d2i_OCSP_SERVICELOC":["OCSP_SERVICELOC *","(OCSP_SERVICELOC **, const unsigned char **, long)"],
"i2d_OCSP_SERVICELOC":["int","(OCSP_SERVICELOC *, unsigned char **)"],
"OCSP_response_status_str":["const char *","(long)"],
"OCSP_cert_status_str":["const char *","(long)"],
"OCSP_crl_reason_str":["const char *","(long)"],
"OCSP_REQUEST_print":["int","(BIO *, OCSP_REQUEST *, unsigned long)"],
"OCSP_RESPONSE_print":["int","(BIO *, OCSP_RESPONSE *, unsigned long)"],
"OCSP_basic_verify":["int","(OCSP_BASICRESP *, struct stack_st_X509 *, X509_STORE *, unsigned long)"],
"ERR_load_PKCS12_strings":["int","()"],
"sk_PKCS12_SAFEBAG_num":["int","(const struct stack_st_PKCS12_SAFEBAG *)"],
"sk_PKCS12_SAFEBAG_value":["PKCS12_SAFEBAG *","(const struct stack_st_PKCS12_SAFEBAG *, int)"],
"sk_PKCS12_SAFEBAG_new":["struct stack_st_PKCS12_SAFEBAG *","(sk_PKCS12_SAFEBAG_compfunc)"],
"sk_PKCS12_SAFEBAG_new_null":["struct stack_st_PKCS12_SAFEBAG *","()"],
"sk_PKCS12_SAFEBAG_new_reserve":["struct stack_st_PKCS12_SAFEBAG *","(sk_PKCS12_SAFEBAG_compfunc, int)"],
"sk_PKCS12_SAFEBAG_reserve":["int","(struct stack_st_PKCS12_SAFEBAG *, int)"],
"sk_PKCS12_SAFEBAG_free":["void","(struct stack_st_PKCS12_SAFEBAG *)"],
"sk_PKCS12_SAFEBAG_zero":["void","(struct stack_st_PKCS12_SAFEBAG *)"],
"sk_PKCS12_SAFEBAG_delete":["PKCS12_SAFEBAG *","(struct stack_st_PKCS12_SAFEBAG *, int)"],
"sk_PKCS12_SAFEBAG_delete_ptr":["PKCS12_SAFEBAG *","(struct stack_st_PKCS12_SAFEBAG *, PKCS12_SAFEBAG *)"],
"sk_PKCS12_SAFEBAG_push":["int","(struct stack_st_PKCS12_SAFEBAG *, PKCS12_SAFEBAG *)"],
"sk_PKCS12_SAFEBAG_unshift":["int","(struct stack_st_PKCS12_SAFEBAG *, PKCS12_SAFEBAG *)"],
"sk_PKCS12_SAFEBAG_pop":["PKCS12_SAFEBAG *","(struct stack_st_PKCS12_SAFEBAG *)"],
"sk_PKCS12_SAFEBAG_shift":["PKCS12_SAFEBAG *","(struct stack_st_PKCS12_SAFEBAG *)"],
"sk_PKCS12_SAFEBAG_pop_free":["void","(struct stack_st_PKCS12_SAFEBAG *, sk_PKCS12_SAFEBAG_freefunc)"],
"sk_PKCS12_SAFEBAG_insert":["int","(struct stack_st_PKCS12_SAFEBAG *, PKCS12_SAFEBAG *, int)"],
"sk_PKCS12_SAFEBAG_set":["PKCS12_SAFEBAG *","(struct stack_st_PKCS12_SAFEBAG *, int, PKCS12_SAFEBAG *)"],
"sk_PKCS12_SAFEBAG_find":["int","(struct stack_st_PKCS12_SAFEBAG *, PKCS12_SAFEBAG *)"],
"sk_PKCS12_SAFEBAG_find_ex":["int","(struct stack_st_PKCS12_SAFEBAG *, PKCS12_SAFEBAG *)"],
"sk_PKCS12_SAFEBAG_sort":["void","(struct stack_st_PKCS12_SAFEBAG *)"],
"sk_PKCS12_SAFEBAG_is_sorted":["int","(const struct stack_st_PKCS12_SAFEBAG *)"],
"sk_PKCS12_SAFEBAG_dup":["struct stack_st_PKCS12_SAFEBAG *","(const struct stack_st_PKCS12_SAFEBAG *)"],
"sk_PKCS12_SAFEBAG_deep_copy":["struct stack_st_PKCS12_SAFEBAG *","(const struct stack_st_PKCS12_SAFEBAG *, sk_PKCS12_SAFEBAG_copyfunc, sk_PKCS12_SAFEBAG_freefunc)"],
"sk_PKCS12_SAFEBAG_set_cmp_func":["sk_PKCS12_SAFEBAG_compfunc","(struct stack_st_PKCS12_SAFEBAG *, sk_PKCS12_SAFEBAG_compfunc)"],
"PKCS12_get_attr":["ASN1_TYPE *","(const PKCS12_SAFEBAG *, int)"],
"PKCS8_get_attr":["ASN1_TYPE *","(PKCS8_PRIV_KEY_INFO *, int)"],
"PKCS12_mac_present":["int","(const PKCS12 *)"],
"PKCS12_get0_mac":["void","(const ASN1_OCTET_STRING **, const X509_ALGOR **, const ASN1_OCTET_STRING **, const ASN1_INTEGER **, const PKCS12 *)"],
"PKCS12_SAFEBAG_get0_attr":["const ASN1_TYPE *","(const PKCS12_SAFEBAG *, int)"],
"PKCS12_SAFEBAG_get0_type":["const ASN1_OBJECT *","(const PKCS12_SAFEBAG *)"],
"PKCS12_SAFEBAG_get_nid":["int","(const PKCS12_SAFEBAG *)"],
"PKCS12_SAFEBAG_get_bag_nid":["int","(const PKCS12_SAFEBAG *)"],
"PKCS12_SAFEBAG_get1_cert":["X509 *","(const PKCS12_SAFEBAG *)"],
"PKCS12_SAFEBAG_get1_crl":["X509_CRL *","(const PKCS12_SAFEBAG *)"],
"PKCS12_SAFEBAG_get0_safes":["const struct stack_st_PKCS12_SAFEBAG *","(const PKCS12_SAFEBAG *)"],
"PKCS12_SAFEBAG_get0_p8inf":["const PKCS8_PRIV_KEY_INFO *","(const PKCS12_SAFEBAG *)"],
"PKCS12_SAFEBAG_get0_pkcs8":["const X509_SIG *","(const PKCS12_SAFEBAG *)"],
"PKCS12_SAFEBAG_create_cert":["PKCS12_SAFEBAG *","(X509 *)"],
"PKCS12_SAFEBAG_create_crl":["PKCS12_SAFEBAG *","(X509_CRL *)"],
"PKCS12_SAFEBAG_create0_p8inf":["PKCS12_SAFEBAG *","(PKCS8_PRIV_KEY_INFO *)"],
"PKCS12_SAFEBAG_create0_pkcs8":["PKCS12_SAFEBAG *","(X509_SIG *)"],
"PKCS12_SAFEBAG_create_pkcs8_encrypt":["PKCS12_SAFEBAG *","(int, const char *, int, unsigned char *, int, int, PKCS8_PRIV_KEY_INFO *)"],
"PKCS12_item_pack_safebag":["PKCS12_SAFEBAG *","(void *, const ASN1_ITEM *, int, int)"],
"PKCS8_decrypt":["PKCS8_PRIV_KEY_INFO *","(const X509_SIG *, const char *, int)"],
"PKCS12_decrypt_skey":["PKCS8_PRIV_KEY_INFO *","(const PKCS12_SAFEBAG *, const char *, int)"],
"PKCS8_encrypt":["X509_SIG *","(int, const EVP_CIPHER *, const char *, int, unsigned char *, int, int, PKCS8_PRIV_KEY_INFO *)"],
"PKCS8_set0_pbe":["X509_SIG *","(const char *, int, PKCS8_PRIV_KEY_INFO *, X509_ALGOR *)"],
"PKCS12_pack_p7data":["PKCS7 *","(struct stack_st_PKCS12_SAFEBAG *)"],
"PKCS12_unpack_p7data":["struct stack_st_PKCS12_SAFEBAG *","(PKCS7 *)"],
"PKCS12_pack_p7encdata":["PKCS7 *","(int, const char *, int, unsigned char *, int, int, struct stack_st_PKCS12_SAFEBAG *)"],
"PKCS12_unpack_p7encdata":["struct stack_st_PKCS12_SAFEBAG *","(PKCS7 *, const char *, int)"],
"PKCS12_pack_authsafes":["int","(PKCS12 *, struct stack_st_PKCS7 *)"],
"PKCS12_unpack_authsafes":["struct stack_st_PKCS7 *","(const PKCS12 *)"],
"PKCS12_add_localkeyid":["int","(PKCS12_SAFEBAG *, unsigned char *, int)"],
"PKCS12_add_friendlyname_asc":["int","(PKCS12_SAFEBAG *, const char *, int)"],
"PKCS12_add_friendlyname_utf8":["int","(PKCS12_SAFEBAG *, const char *, int)"],
"PKCS12_add_CSPName_asc":["int","(PKCS12_SAFEBAG *, const char *, int)"],
"PKCS12_add_friendlyname_uni":["int","(PKCS12_SAFEBAG *, const unsigned char *, int)"],
"PKCS8_add_keyusage":["int","(PKCS8_PRIV_KEY_INFO *, int)"],
"PKCS12_get_attr_gen":["ASN1_TYPE *","(const struct stack_st_X509_ATTRIBUTE *, int)"],
"PKCS12_get_friendlyname":["char *","(PKCS12_SAFEBAG *)"],
"PKCS12_SAFEBAG_get0_attrs":["const struct stack_st_X509_ATTRIBUTE *","(const PKCS12_SAFEBAG *)"],
"PKCS12_pbe_crypt":["unsigned char *","(const X509_ALGOR *, const char *, int, const unsigned char *, int, unsigned char **, int *, int)"],
"PKCS12_item_decrypt_d2i":["void *","(const X509_ALGOR *, const ASN1_ITEM *, const char *, int, const ASN1_OCTET_STRING *, int)"],
"PKCS12_item_i2d_encrypt":["ASN1_OCTET_STRING *","(X509_ALGOR *, const ASN1_ITEM *, const char *, int, void *, int)"],
"PKCS12_init":["PKCS12 *","(int)"],
"PKCS12_key_gen_asc":["int","(const char *, int, unsigned char *, int, int, int, int, unsigned char *, const EVP_MD *)"],
"PKCS12_key_gen_uni":["int","(unsigned char *, int, unsigned char *, int, int, int, int, unsigned char *, const EVP_MD *)"],
"PKCS12_key_gen_utf8":["int","(const char *, int, unsigned char *, int, int, int, int, unsigned char *, const EVP_MD *)"],
"PKCS12_PBE_keyivgen":["int","(EVP_CIPHER_CTX *, const char *, int, ASN1_TYPE *, const EVP_CIPHER *, const EVP_MD *, int)"],
"PKCS12_gen_mac":["int","(PKCS12 *, const char *, int, unsigned char *, unsigned int *)"],
"PKCS12_verify_mac":["int","(PKCS12 *, const char *, int)"],
"PKCS12_set_mac":["int","(PKCS12 *, const char *, int, unsigned char *, int, int, const EVP_MD *)"],
"PKCS12_setup_mac":["int","(PKCS12 *, int, unsigned char *, int, const EVP_MD *)"],
"OPENSSL_asc2uni":["unsigned char *","(const char *, int, unsigned char **, int *)"],
"OPENSSL_uni2asc":["char *","(const unsigned char *, int)"],
"OPENSSL_utf82uni":["unsigned char *","(const char *, int, unsigned char **, int *)"],
"OPENSSL_uni2utf8":["char *","(const unsigned char *, int)"],
"PKCS12_new":["PKCS12 *","()"],
"PKCS12_free":["void","(PKCS12 *)"],
"d2i_PKCS12":["PKCS12 *","(PKCS12 **, const unsigned char **, long)"],
"i2d_PKCS12":["int","(PKCS12 *, unsigned char **)"],
"PKCS12_MAC_DATA_new":["PKCS12_MAC_DATA *","()"],
"PKCS12_MAC_DATA_free":["void","(PKCS12_MAC_DATA *)"],
"d2i_PKCS12_MAC_DATA":["PKCS12_MAC_DATA *","(PKCS12_MAC_DATA **, const unsigned char **, long)"],
"i2d_PKCS12_MAC_DATA":["int","(PKCS12_MAC_DATA *, unsigned char **)"],
"PKCS12_SAFEBAG_new":["PKCS12_SAFEBAG *","()"],
"PKCS12_SAFEBAG_free":["void","(PKCS12_SAFEBAG *)"],
"d2i_PKCS12_SAFEBAG":["PKCS12_SAFEBAG *","(PKCS12_SAFEBAG **, const unsigned char **, long)"],
"i2d_PKCS12_SAFEBAG":["int","(PKCS12_SAFEBAG *, unsigned char **)"],
"PKCS12_BAGS_new":["PKCS12_BAGS *","()"],
"PKCS12_BAGS_free":["void","(PKCS12_BAGS *)"],
"d2i_PKCS12_BAGS":["PKCS12_BAGS *","(PKCS12_BAGS **, const unsigned char **, long)"],
"i2d_PKCS12_BAGS":["int","(PKCS12_BAGS *, unsigned char **)"],
"PKCS12_PBE_add":["void","()"],
"PKCS12_parse":["int","(PKCS12 *, const char *, EVP_PKEY **, X509 **, struct stack_st_X509 **)"],
"PKCS12_create":["PKCS12 *","(const char *, const char *, EVP_PKEY *, X509 *, struct stack_st_X509 *, int, int, int, int, int)"],
"PKCS12_add_cert":["PKCS12_SAFEBAG *","(struct stack_st_PKCS12_SAFEBAG **, X509 *)"],
"PKCS12_add_key":["PKCS12_SAFEBAG *","(struct stack_st_PKCS12_SAFEBAG **, EVP_PKEY *, int, int, int, const char *)"],
"PKCS12_add_safe":["int","(struct stack_st_PKCS7 **, struct stack_st_PKCS12_SAFEBAG *, int, int, const char *)"],
"PKCS12_add_safes":["PKCS12 *","(struct stack_st_PKCS7 *, int)"],
"i2d_PKCS12_bio":["int","(BIO *, PKCS12 *)"],
"i2d_PKCS12_fp":["int","(int *, PKCS12 *)"],
"d2i_PKCS12_bio":["PKCS12 *","(BIO *, PKCS12 **)"],
"d2i_PKCS12_fp":["PKCS12 *","(int *, PKCS12 **)"],
"PKCS12_newpass":["int","(PKCS12 *, const char *, const char *)"],
"RC2_set_key":["void","(RC2_KEY *, int, const unsigned char *, int)"],
"RC2_ecb_encrypt":["void","(const unsigned char *, unsigned char *, RC2_KEY *, int)"],
"RC2_encrypt":["void","(unsigned long *, RC2_KEY *)"],
"RC2_decrypt":["void","(unsigned long *, RC2_KEY *)"],
"RC2_cbc_encrypt":["void","(const unsigned char *, unsigned char *, long, RC2_KEY *, unsigned char *, int)"],
"RC2_cfb64_encrypt":["void","(const unsigned char *, unsigned char *, long, RC2_KEY *, unsigned char *, int *, int)"],
"RC2_ofb64_encrypt":["void","(const unsigned char *, unsigned char *, long, RC2_KEY *, unsigned char *, int *)"],
"RC4_options":["const char *","()"],
"RC4_set_key":["void","(RC4_KEY *, int, const unsigned char *)"],
"RC4":["void","(RC4_KEY *, int, const unsigned char *, unsigned char *)"],
"RIPEMD160_Init":["int","(RIPEMD160_CTX *)"],
"RIPEMD160_Update":["int","(RIPEMD160_CTX *, const void *, int)"],
"RIPEMD160_Final":["int","(unsigned char *, RIPEMD160_CTX *)"],
"RIPEMD160":["unsigned char *","(const unsigned char *, int, unsigned char *)"],
"RIPEMD160_Transform":["void","(RIPEMD160_CTX *, const unsigned char *)"],
"SEED_set_key":["void","(const unsigned char *, SEED_KEY_SCHEDULE *)"],
"SEED_encrypt":["void","(const unsigned char *, unsigned char *, const SEED_KEY_SCHEDULE *)"],
"SEED_decrypt":["void","(const unsigned char *, unsigned char *, const SEED_KEY_SCHEDULE *)"],
"SEED_ecb_encrypt":["void","(const unsigned char *, unsigned char *, const SEED_KEY_SCHEDULE *, int)"],
"SEED_cbc_encrypt":["void","(const unsigned char *, unsigned char *, int, const SEED_KEY_SCHEDULE *, unsigned char *, int)"],
"SEED_cfb128_encrypt":["void","(const unsigned char *, unsigned char *, int, const SEED_KEY_SCHEDULE *, unsigned char *, int *, int)"],
"SEED_ofb128_encrypt":["void","(const unsigned char *, unsigned char *, int, const SEED_KEY_SCHEDULE *, unsigned char *, int *)"],
"ERR_load_ASYNC_strings":["int","()"],
"ASYNC_init_thread":["int","(int, int)"],
"ASYNC_cleanup_thread":["void","()"],
"ASYNC_WAIT_CTX_new":["ASYNC_WAIT_CTX *","()"],
"ASYNC_WAIT_CTX_free":["void","(ASYNC_WAIT_CTX *)"],
"ASYNC_WAIT_CTX_set_wait_fd":["int","(ASYNC_WAIT_CTX *, const void *, int, void *, void (*)(ASYNC_WAIT_CTX *, const void *, int, void *))"],
"ASYNC_WAIT_CTX_get_fd":["int","(ASYNC_WAIT_CTX *, const void *, int *, void **)"],
"ASYNC_WAIT_CTX_get_all_fds":["int","(ASYNC_WAIT_CTX *, int *, int *)"],
"ASYNC_WAIT_CTX_get_changed_fds":["int","(ASYNC_WAIT_CTX *, int *, int *, int *, int *)"],
"ASYNC_WAIT_CTX_clear_fd":["int","(ASYNC_WAIT_CTX *, const void *)"],
"ASYNC_is_capable":["int","()"],
"ASYNC_start_job":["int","(ASYNC_JOB **, ASYNC_WAIT_CTX *, int *, int (*)(void *), void *, int)"],
"ASYNC_pause_job":["int","()"],
"ASYNC_get_current_job":["ASYNC_JOB *","()"],
"ASYNC_get_wait_ctx":["ASYNC_WAIT_CTX *","(ASYNC_JOB *)"],
"ASYNC_block_pause":["void","()"],
"ASYNC_unblock_pause":["void","()"],
"ERR_load_SSL_strings":["int","()"],
"sk_SRTP_PROTECTION_PROFILE_num":["int","(const struct stack_st_SRTP_PROTECTION_PROFILE *)"],
"sk_SRTP_PROTECTION_PROFILE_value":["SRTP_PROTECTION_PROFILE *","(const struct stack_st_SRTP_PROTECTION_PROFILE *, int)"],
"sk_SRTP_PROTECTION_PROFILE_new":["struct stack_st_SRTP_PROTECTION_PROFILE *","(sk_SRTP_PROTECTION_PROFILE_compfunc)"],
"sk_SRTP_PROTECTION_PROFILE_new_null":["struct stack_st_SRTP_PROTECTION_PROFILE *","()"],
"sk_SRTP_PROTECTION_PROFILE_new_reserve":["struct stack_st_SRTP_PROTECTION_PROFILE *","(sk_SRTP_PROTECTION_PROFILE_compfunc, int)"],
"sk_SRTP_PROTECTION_PROFILE_reserve":["int","(struct stack_st_SRTP_PROTECTION_PROFILE *, int)"],
"sk_SRTP_PROTECTION_PROFILE_free":["void","(struct stack_st_SRTP_PROTECTION_PROFILE *)"],
"sk_SRTP_PROTECTION_PROFILE_zero":["void","(struct stack_st_SRTP_PROTECTION_PROFILE *)"],
"sk_SRTP_PROTECTION_PROFILE_delete":["SRTP_PROTECTION_PROFILE *","(struct stack_st_SRTP_PROTECTION_PROFILE *, int)"],
"sk_SRTP_PROTECTION_PROFILE_delete_ptr":["SRTP_PROTECTION_PROFILE *","(struct stack_st_SRTP_PROTECTION_PROFILE *, SRTP_PROTECTION_PROFILE *)"],
"sk_SRTP_PROTECTION_PROFILE_push":["int","(struct stack_st_SRTP_PROTECTION_PROFILE *, SRTP_PROTECTION_PROFILE *)"],
"sk_SRTP_PROTECTION_PROFILE_unshift":["int","(struct stack_st_SRTP_PROTECTION_PROFILE *, SRTP_PROTECTION_PROFILE *)"],
"sk_SRTP_PROTECTION_PROFILE_pop":["SRTP_PROTECTION_PROFILE *","(struct stack_st_SRTP_PROTECTION_PROFILE *)"],
"sk_SRTP_PROTECTION_PROFILE_shift":["SRTP_PROTECTION_PROFILE *","(struct stack_st_SRTP_PROTECTION_PROFILE *)"],
"sk_SRTP_PROTECTION_PROFILE_pop_free":["void","(struct stack_st_SRTP_PROTECTION_PROFILE *, sk_SRTP_PROTECTION_PROFILE_freefunc)"],
"sk_SRTP_PROTECTION_PROFILE_insert":["int","(struct stack_st_SRTP_PROTECTION_PROFILE *, SRTP_PROTECTION_PROFILE *, int)"],
"sk_SRTP_PROTECTION_PROFILE_set":["SRTP_PROTECTION_PROFILE *","(struct stack_st_SRTP_PROTECTION_PROFILE *, int, SRTP_PROTECTION_PROFILE *)"],
"sk_SRTP_PROTECTION_PROFILE_find":["int","(struct stack_st_SRTP_PROTECTION_PROFILE *, SRTP_PROTECTION_PROFILE *)"],
"sk_SRTP_PROTECTION_PROFILE_find_ex":["int","(struct stack_st_SRTP_PROTECTION_PROFILE *, SRTP_PROTECTION_PROFILE *)"],
"sk_SRTP_PROTECTION_PROFILE_sort":["void","(struct stack_st_SRTP_PROTECTION_PROFILE *)"],
"sk_SRTP_PROTECTION_PROFILE_is_sorted":["int","(const struct stack_st_SRTP_PROTECTION_PROFILE *)"],
"sk_SRTP_PROTECTION_PROFILE_dup":["struct stack_st_SRTP_PROTECTION_PROFILE *","(const struct stack_st_SRTP_PROTECTION_PROFILE *)"],
"sk_SRTP_PROTECTION_PROFILE_deep_copy":["struct stack_st_SRTP_PROTECTION_PROFILE *","(const struct stack_st_SRTP_PROTECTION_PROFILE *, sk_SRTP_PROTECTION_PROFILE_copyfunc, sk_SRTP_PROTECTION_PROFILE_freefunc)"],
"sk_SRTP_PROTECTION_PROFILE_set_cmp_func":["sk_SRTP_PROTECTION_PROFILE_compfunc","(struct stack_st_SRTP_PROTECTION_PROFILE *, sk_SRTP_PROTECTION_PROFILE_compfunc)"],
"SSL_CTX_get_options":["unsigned long","(const SSL_CTX *)"],
"SSL_get_options":["unsigned long","(const SSL *)"],
"SSL_CTX_clear_options":["unsigned long","(SSL_CTX *, unsigned long)"],
"SSL_clear_options":["unsigned long","(SSL *, unsigned long)"],
"SSL_CTX_set_options":["unsigned long","(SSL_CTX *, unsigned long)"],
"SSL_set_options":["unsigned long","(SSL *, unsigned long)"],
"SSL_CTX_set_msg_callback":["void","(SSL_CTX *, void (*)(int, int, int, const void *, int, SSL *, void *))"],
"SSL_set_msg_callback":["void","(SSL *, void (*)(int, int, int, const void *, int, SSL *, void *))"],
"SSL_SRP_CTX_init":["int","(SSL *)"],
"SSL_CTX_SRP_CTX_init":["int","(SSL_CTX *)"],
"SSL_SRP_CTX_free":["int","(SSL *)"],
"SSL_CTX_SRP_CTX_free":["int","(SSL_CTX *)"],
"SSL_srp_server_param_with_username":["int","(SSL *, int *)"],
"SRP_Calc_A_param":["int","(SSL *)"],
"SSL_CTX_sessions":["struct lhash_st_SSL_SESSION *","(SSL_CTX *)"],
"SSL_CTX_sess_set_new_cb":["void","(SSL_CTX *, int (*)(struct ssl_st *, SSL_SESSION *))"],
"SSL_CTX_sess_get_new_cb":["int (*)(struct ssl_st *, SSL_SESSION *)","(SSL_CTX *)"],
"SSL_CTX_sess_set_remove_cb":["void","(SSL_CTX *, void (*)(struct ssl_ctx_st *, SSL_SESSION *))"],
"SSL_CTX_sess_get_remove_cb":["void (*)(struct ssl_ctx_st *, SSL_SESSION *)","(SSL_CTX *)"],
"SSL_CTX_sess_set_get_cb":["void","(SSL_CTX *, SSL_SESSION *(*)(struct ssl_st *, const unsigned char *, int, int *))"],
"SSL_CTX_sess_get_get_cb":["SSL_SESSION *(*)(struct ssl_st *, const unsigned char *, int, int *)","(SSL_CTX *)"],
"SSL_CTX_set_info_callback":["void","(SSL_CTX *, void (*)(const SSL *, int, int))"],
"SSL_CTX_get_info_callback":["void (*)(const SSL *, int, int)","(SSL_CTX *)"],
"SSL_CTX_set_client_cert_cb":["void","(SSL_CTX *, int (*)(SSL *, X509 **, EVP_PKEY **))"],
"SSL_CTX_get_client_cert_cb":["int (*)(SSL *, X509 **, EVP_PKEY **)","(SSL_CTX *)"],
"SSL_CTX_set_client_cert_engine":["int","(SSL_CTX *, ENGINE *)"],
"SSL_CTX_set_cookie_generate_cb":["void","(SSL_CTX *, int (*)(SSL *, unsigned char *, unsigned int *))"],
"SSL_CTX_set_cookie_verify_cb":["void","(SSL_CTX *, int (*)(SSL *, const unsigned char *, unsigned int))"],
"SSL_CTX_set_stateless_cookie_generate_cb":["void","(SSL_CTX *, int (*)(SSL *, unsigned char *, int *))"],
"SSL_CTX_set_stateless_cookie_verify_cb":["void","(SSL_CTX *, int (*)(SSL *, const unsigned char *, int))"],
"SSL_CTX_set_next_protos_advertised_cb":["void","(SSL_CTX *, SSL_CTX_npn_advertised_cb_func, void *)"],
"SSL_CTX_set_next_proto_select_cb":["void","(SSL_CTX *, SSL_CTX_npn_select_cb_func, void *)"],
"SSL_get0_next_proto_negotiated":["void","(const SSL *, const unsigned char **, unsigned int *)"],
"SSL_select_next_proto":["int","(unsigned char **, unsigned char *, const unsigned char *, unsigned int, const unsigned char *, unsigned int)"],
"SSL_CTX_set_alpn_protos":["int","(SSL_CTX *, const unsigned char *, unsigned int)"],
"SSL_set_alpn_protos":["int","(SSL *, const unsigned char *, unsigned int)"],
"SSL_CTX_set_alpn_select_cb":["void","(SSL_CTX *, SSL_CTX_alpn_select_cb_func, void *)"],
"SSL_get0_alpn_selected":["void","(const SSL *, const unsigned char **, unsigned int *)"],
"SSL_CTX_set_psk_client_callback":["void","(SSL_CTX *, SSL_psk_client_cb_func)"],
"SSL_set_psk_client_callback":["void","(SSL *, SSL_psk_client_cb_func)"],
"SSL_CTX_set_psk_server_callback":["void","(SSL_CTX *, SSL_psk_server_cb_func)"],
"SSL_set_psk_server_callback":["void","(SSL *, SSL_psk_server_cb_func)"],
"SSL_CTX_use_psk_identity_hint":["int","(SSL_CTX *, const char *)"],
"SSL_use_psk_identity_hint":["int","(SSL *, const char *)"],
"SSL_get_psk_identity_hint":["const char *","(const SSL *)"],
"SSL_get_psk_identity":["const char *","(const SSL *)"],
"SSL_set_psk_find_session_callback":["void","(SSL *, SSL_psk_find_session_cb_func)"],
"SSL_CTX_set_psk_find_session_callback":["void","(SSL_CTX *, SSL_psk_find_session_cb_func)"],
"SSL_set_psk_use_session_callback":["void","(SSL *, SSL_psk_use_session_cb_func)"],
"SSL_CTX_set_psk_use_session_callback":["void","(SSL_CTX *, SSL_psk_use_session_cb_func)"],
"SSL_CTX_has_client_custom_ext":["int","(const SSL_CTX *, unsigned int)"],
"SSL_CTX_add_client_custom_ext":["int","(SSL_CTX *, unsigned int, custom_ext_add_cb, custom_ext_free_cb, void *, custom_ext_parse_cb, void *)"],
"SSL_CTX_add_server_custom_ext":["int","(SSL_CTX *, unsigned int, custom_ext_add_cb, custom_ext_free_cb, void *, custom_ext_parse_cb, void *)"],
"SSL_CTX_add_custom_ext":["int","(SSL_CTX *, unsigned int, unsigned int, SSL_custom_ext_add_cb_ex, SSL_custom_ext_free_cb_ex, void *, SSL_custom_ext_parse_cb_ex, void *)"],
"SSL_extension_supported":["int","(unsigned int)"],
"SSL_CTX_set_keylog_callback":["void","(SSL_CTX *, SSL_CTX_keylog_cb_func)"],
"SSL_CTX_get_keylog_callback":["SSL_CTX_keylog_cb_func","(const SSL_CTX *)"],
"SSL_CTX_set_max_early_data":["int","(SSL_CTX *, int)"],
"SSL_CTX_get_max_early_data":["int","(const SSL_CTX *)"],
"SSL_set_max_early_data":["int","(SSL *, int)"],
"SSL_get_max_early_data":["int","(const SSL *)"],
"SSL_CTX_set_recv_max_early_data":["int","(SSL_CTX *, int)"],
"SSL_CTX_get_recv_max_early_data":["int","(const SSL_CTX *)"],
"SSL_set_recv_max_early_data":["int","(SSL *, int)"],
"SSL_get_recv_max_early_data":["int","(const SSL *)"],
"SSL_CTX_set_tlsext_max_fragment_length":["int","(SSL_CTX *, int)"],
"SSL_set_tlsext_max_fragment_length":["int","(SSL *, int)"],
"SSL_get_servername":["const char *","(const SSL *, const int)"],
"SSL_get_servername_type":["int","(const SSL *)"],
"SSL_export_keying_material":["int","(SSL *, unsigned char *, int, const char *, int, const unsigned char *, int, int)"],
"SSL_export_keying_material_early":["int","(SSL *, unsigned char *, int, const char *, int, const unsigned char *, int)"],
"SSL_get_peer_signature_type_nid":["int","(const SSL *, int *)"],
"SSL_get_signature_type_nid":["int","(const SSL *, int *)"],
"SSL_get_sigalgs":["int","(SSL *, int, int *, int *, int *, unsigned char *, unsigned char *)"],
"SSL_get_shared_sigalgs":["int","(SSL *, int, int *, int *, int *, unsigned char *, unsigned char *)"],
"SSL_check_chain":["int","(SSL *, X509 *, EVP_PKEY *, struct stack_st_X509 *)"],
"sk_SSL_CIPHER_num":["int","(const struct stack_st_SSL_CIPHER *)"],
"sk_SSL_CIPHER_value":["const SSL_CIPHER *","(const struct stack_st_SSL_CIPHER *, int)"],
"sk_SSL_CIPHER_new":["struct stack_st_SSL_CIPHER *","(sk_SSL_CIPHER_compfunc)"],
"sk_SSL_CIPHER_new_null":["struct stack_st_SSL_CIPHER *","()"],
"sk_SSL_CIPHER_new_reserve":["struct stack_st_SSL_CIPHER *","(sk_SSL_CIPHER_compfunc, int)"],
"sk_SSL_CIPHER_reserve":["int","(struct stack_st_SSL_CIPHER *, int)"],
"sk_SSL_CIPHER_free":["void","(struct stack_st_SSL_CIPHER *)"],
"sk_SSL_CIPHER_zero":["void","(struct stack_st_SSL_CIPHER *)"],
"sk_SSL_CIPHER_delete":["const SSL_CIPHER *","(struct stack_st_SSL_CIPHER *, int)"],
"sk_SSL_CIPHER_delete_ptr":["const SSL_CIPHER *","(struct stack_st_SSL_CIPHER *, const SSL_CIPHER *)"],
"sk_SSL_CIPHER_push":["int","(struct stack_st_SSL_CIPHER *, const SSL_CIPHER *)"],
"sk_SSL_CIPHER_unshift":["int","(struct stack_st_SSL_CIPHER *, const SSL_CIPHER *)"],
"sk_SSL_CIPHER_pop":["const SSL_CIPHER *","(struct stack_st_SSL_CIPHER *)"],
"sk_SSL_CIPHER_shift":["const SSL_CIPHER *","(struct stack_st_SSL_CIPHER *)"],
"sk_SSL_CIPHER_pop_free":["void","(struct stack_st_SSL_CIPHER *, sk_SSL_CIPHER_freefunc)"],
"sk_SSL_CIPHER_insert":["int","(struct stack_st_SSL_CIPHER *, const SSL_CIPHER *, int)"],
"sk_SSL_CIPHER_set":["const SSL_CIPHER *","(struct stack_st_SSL_CIPHER *, int, const SSL_CIPHER *)"],
"sk_SSL_CIPHER_find":["int","(struct stack_st_SSL_CIPHER *, const SSL_CIPHER *)"],
"sk_SSL_CIPHER_find_ex":["int","(struct stack_st_SSL_CIPHER *, const SSL_CIPHER *)"],
"sk_SSL_CIPHER_sort":["void","(struct stack_st_SSL_CIPHER *)"],
"sk_SSL_CIPHER_is_sorted":["int","(const struct stack_st_SSL_CIPHER *)"],
"sk_SSL_CIPHER_dup":["struct stack_st_SSL_CIPHER *","(const struct stack_st_SSL_CIPHER *)"],
"sk_SSL_CIPHER_deep_copy":["struct stack_st_SSL_CIPHER *","(const struct stack_st_SSL_CIPHER *, sk_SSL_CIPHER_copyfunc, sk_SSL_CIPHER_freefunc)"],
"sk_SSL_CIPHER_set_cmp_func":["sk_SSL_CIPHER_compfunc","(struct stack_st_SSL_CIPHER *, sk_SSL_CIPHER_compfunc)"],
"sk_SSL_COMP_num":["int","(const struct stack_st_SSL_COMP *)"],
"sk_SSL_COMP_value":["SSL_COMP *","(const struct stack_st_SSL_COMP *, int)"],
"sk_SSL_COMP_new":["struct stack_st_SSL_COMP *","(sk_SSL_COMP_compfunc)"],
"sk_SSL_COMP_new_null":["struct stack_st_SSL_COMP *","()"],
"sk_SSL_COMP_new_reserve":["struct stack_st_SSL_COMP *","(sk_SSL_COMP_compfunc, int)"],
"sk_SSL_COMP_reserve":["int","(struct stack_st_SSL_COMP *, int)"],
"sk_SSL_COMP_free":["void","(struct stack_st_SSL_COMP *)"],
"sk_SSL_COMP_zero":["void","(struct stack_st_SSL_COMP *)"],
"sk_SSL_COMP_delete":["SSL_COMP *","(struct stack_st_SSL_COMP *, int)"],
"sk_SSL_COMP_delete_ptr":["SSL_COMP *","(struct stack_st_SSL_COMP *, SSL_COMP *)"],
"sk_SSL_COMP_push":["int","(struct stack_st_SSL_COMP *, SSL_COMP *)"],
"sk_SSL_COMP_unshift":["int","(struct stack_st_SSL_COMP *, SSL_COMP *)"],
"sk_SSL_COMP_pop":["SSL_COMP *","(struct stack_st_SSL_COMP *)"],
"sk_SSL_COMP_shift":["SSL_COMP *","(struct stack_st_SSL_COMP *)"],
"sk_SSL_COMP_pop_free":["void","(struct stack_st_SSL_COMP *, sk_SSL_COMP_freefunc)"],
"sk_SSL_COMP_insert":["int","(struct stack_st_SSL_COMP *, SSL_COMP *, int)"],
"sk_SSL_COMP_set":["SSL_COMP *","(struct stack_st_SSL_COMP *, int, SSL_COMP *)"],
"sk_SSL_COMP_find":["int","(struct stack_st_SSL_COMP *, SSL_COMP *)"],
"sk_SSL_COMP_find_ex":["int","(struct stack_st_SSL_COMP *, SSL_COMP *)"],
"sk_SSL_COMP_sort":["void","(struct stack_st_SSL_COMP *)"],
"sk_SSL_COMP_is_sorted":["int","(const struct stack_st_SSL_COMP *)"],
"sk_SSL_COMP_dup":["struct stack_st_SSL_COMP *","(const struct stack_st_SSL_COMP *)"],
"sk_SSL_COMP_deep_copy":["struct stack_st_SSL_COMP *","(const struct stack_st_SSL_COMP *, sk_SSL_COMP_copyfunc, sk_SSL_COMP_freefunc)"],
"sk_SSL_COMP_set_cmp_func":["sk_SSL_COMP_compfunc","(struct stack_st_SSL_COMP *, sk_SSL_COMP_compfunc)"],
"SSL_set_debug":["void","(SSL *, int)"],
"SSL_in_init":["int","(const SSL *)"],
"SSL_in_before":["int","(const SSL *)"],
"SSL_is_init_finished":["int","(const SSL *)"],
"SSL_get_finished":["int","(const SSL *, void *, int)"],
"SSL_get_peer_finished":["int","(const SSL *, void *, int)"],
"PEM_read_bio_SSL_SESSION":["SSL_SESSION *","(BIO *, SSL_SESSION **, pem_password_cb *, void *)"],
"PEM_read_SSL_SESSION":["SSL_SESSION *","(int *, SSL_SESSION **, pem_password_cb *, void *)"],
"PEM_write_bio_SSL_SESSION":["int","(BIO *, SSL_SESSION *)"],
"PEM_write_SSL_SESSION":["int","(int *, SSL_SESSION *)"],
"BIO_f_ssl":["const BIO_METHOD *","()"],
"BIO_new_ssl":["BIO *","(SSL_CTX *, int)"],
"BIO_new_ssl_connect":["BIO *","(SSL_CTX *)"],
"BIO_new_buffer_ssl_connect":["BIO *","(SSL_CTX *)"],
"BIO_ssl_copy_session_id":["int","(BIO *, BIO *)"],
"BIO_ssl_shutdown":["void","(BIO *)"],
"SSL_CTX_set_cipher_list":["int","(SSL_CTX *, const char *)"],
"SSL_CTX_new":["SSL_CTX *","(const SSL_METHOD *)"],
"SSL_CTX_up_ref":["int","(SSL_CTX *)"],
"SSL_CTX_free":["void","(SSL_CTX *)"],
"SSL_CTX_set_timeout":["long","(SSL_CTX *, long)"],
"SSL_CTX_get_timeout":["long","(const SSL_CTX *)"],
"SSL_CTX_get_cert_store":["X509_STORE *","(const SSL_CTX *)"],
"SSL_CTX_set_cert_store":["void","(SSL_CTX *, X509_STORE *)"],
"SSL_CTX_set1_cert_store":["void","(SSL_CTX *, X509_STORE *)"],
"SSL_want":["int","(const SSL *)"],
"SSL_clear":["int","(SSL *)"],
"SSL_CTX_flush_sessions":["void","(SSL_CTX *, long)"],
"SSL_get_current_cipher":["const SSL_CIPHER *","(const SSL *)"],
"SSL_get_pending_cipher":["const SSL_CIPHER *","(const SSL *)"],
"SSL_CIPHER_get_bits":["int","(const SSL_CIPHER *, int *)"],
"SSL_CIPHER_get_version":["const char *","(const SSL_CIPHER *)"],
"SSL_CIPHER_get_name":["const char *","(const SSL_CIPHER *)"],
"SSL_CIPHER_standard_name":["const char *","(const SSL_CIPHER *)"],
"OPENSSL_cipher_name":["const char *","(const char *)"],
"SSL_CIPHER_get_id":["int","(const SSL_CIPHER *)"],
"SSL_CIPHER_get_protocol_id":["int","(const SSL_CIPHER *)"],
"SSL_CIPHER_get_kx_nid":["int","(const SSL_CIPHER *)"],
"SSL_CIPHER_get_auth_nid":["int","(const SSL_CIPHER *)"],
"SSL_CIPHER_get_handshake_digest":["const EVP_MD *","(const SSL_CIPHER *)"],
"SSL_CIPHER_is_aead":["int","(const SSL_CIPHER *)"],
"SSL_get_fd":["int","(const SSL *)"],
"SSL_get_rfd":["int","(const SSL *)"],
"SSL_get_wfd":["int","(const SSL *)"],
"SSL_get_cipher_list":["const char *","(const SSL *, int)"],
"SSL_get_shared_ciphers":["char *","(const SSL *, char *, int)"],
"SSL_get_read_ahead":["int","(const SSL *)"],
"SSL_pending":["int","(const SSL *)"],
"SSL_has_pending":["int","(const SSL *)"],
"SSL_set_fd":["int","(SSL *, int)"],
"SSL_set_rfd":["int","(SSL *, int)"],
"SSL_set_wfd":["int","(SSL *, int)"],
"SSL_set0_rbio":["void","(SSL *, BIO *)"],
"SSL_set0_wbio":["void","(SSL *, BIO *)"],
"SSL_set_bio":["void","(SSL *, BIO *, BIO *)"],
"SSL_get_rbio":["BIO *","(const SSL *)"],
"SSL_get_wbio":["BIO *","(const SSL *)"],
"SSL_set_cipher_list":["int","(SSL *, const char *)"],
"SSL_CTX_set_ciphersuites":["int","(SSL_CTX *, const char *)"],
"SSL_set_ciphersuites":["int","(SSL *, const char *)"],
"SSL_set_read_ahead":["void","(SSL *, int)"],
"SSL_get_verify_mode":["int","(const SSL *)"],
"SSL_get_verify_depth":["int","(const SSL *)"],
"SSL_get_verify_callback":["SSL_verify_cb","(const SSL *)"],
"SSL_set_verify":["void","(SSL *, int, SSL_verify_cb)"],
"SSL_set_verify_depth":["void","(SSL *, int)"],
"SSL_set_cert_cb":["void","(SSL *, int (*)(SSL *, void *), void *)"],
"SSL_use_RSAPrivateKey":["int","(SSL *, RSA *)"],
"SSL_use_RSAPrivateKey_ASN1":["int","(SSL *, const unsigned char *, long)"],
"SSL_use_PrivateKey":["int","(SSL *, EVP_PKEY *)"],
"SSL_use_PrivateKey_ASN1":["int","(int, SSL *, const unsigned char *, long)"],
"SSL_use_certificate":["int","(SSL *, X509 *)"],
"SSL_use_certificate_ASN1":["int","(SSL *, const unsigned char *, int)"],
"SSL_use_cert_and_key":["int","(SSL *, X509 *, EVP_PKEY *, struct stack_st_X509 *, int)"],
"SSL_CTX_use_serverinfo":["int","(SSL_CTX *, const unsigned char *, int)"],
"SSL_CTX_use_serverinfo_ex":["int","(SSL_CTX *, unsigned int, const unsigned char *, int)"],
"SSL_CTX_use_serverinfo_file":["int","(SSL_CTX *, const char *)"],
"SSL_use_RSAPrivateKey_file":["int","(SSL *, const char *, int)"],
"SSL_use_PrivateKey_file":["int","(SSL *, const char *, int)"],
"SSL_use_certificate_file":["int","(SSL *, const char *, int)"],
"SSL_CTX_use_RSAPrivateKey_file":["int","(SSL_CTX *, const char *, int)"],
"SSL_CTX_use_PrivateKey_file":["int","(SSL_CTX *, const char *, int)"],
"SSL_CTX_use_certificate_file":["int","(SSL_CTX *, const char *, int)"],
"SSL_CTX_use_certificate_chain_file":["int","(SSL_CTX *, const char *)"],
"SSL_use_certificate_chain_file":["int","(SSL *, const char *)"],
"SSL_load_client_CA_file":["struct stack_st_X509_NAME *","(const char *)"],
"SSL_add_file_cert_subjects_to_stack":["int","(struct stack_st_X509_NAME *, const char *)"],
"SSL_add_dir_cert_subjects_to_stack":["int","(struct stack_st_X509_NAME *, const char *)"],
"SSL_state_string":["const char *","(const SSL *)"],
"SSL_rstate_string":["const char *","(const SSL *)"],
"SSL_state_string_long":["const char *","(const SSL *)"],
"SSL_rstate_string_long":["const char *","(const SSL *)"],
"SSL_SESSION_get_time":["long","(const SSL_SESSION *)"],
"SSL_SESSION_set_time":["long","(SSL_SESSION *, long)"],
"SSL_SESSION_get_timeout":["long","(const SSL_SESSION *)"],
"SSL_SESSION_set_timeout":["long","(SSL_SESSION *, long)"],
"SSL_SESSION_get_protocol_version":["int","(const SSL_SESSION *)"],
"SSL_SESSION_set_protocol_version":["int","(SSL_SESSION *, int)"],
"SSL_SESSION_get0_hostname":["const char *","(const SSL_SESSION *)"],
"SSL_SESSION_set1_hostname":["int","(SSL_SESSION *, const char *)"],
"SSL_SESSION_get0_alpn_selected":["void","(const SSL_SESSION *, const unsigned char **, int *)"],
"SSL_SESSION_set1_alpn_selected":["int","(SSL_SESSION *, const unsigned char *, int)"],
"SSL_SESSION_get0_cipher":["const SSL_CIPHER *","(const SSL_SESSION *)"],
"SSL_SESSION_set_cipher":["int","(SSL_SESSION *, const SSL_CIPHER *)"],
"SSL_SESSION_has_ticket":["int","(const SSL_SESSION *)"],
"SSL_SESSION_get_ticket_lifetime_hint":["unsigned long","(const SSL_SESSION *)"],
"SSL_SESSION_get0_ticket":["void","(const SSL_SESSION *, const unsigned char **, int *)"],
"SSL_SESSION_get_max_early_data":["int","(const SSL_SESSION *)"],
"SSL_SESSION_set_max_early_data":["int","(SSL_SESSION *, int)"],
"SSL_copy_session_id":["int","(SSL *, const SSL *)"],
"SSL_SESSION_get0_peer":["X509 *","(SSL_SESSION *)"],
"SSL_SESSION_set1_id_context":["int","(SSL_SESSION *, const unsigned char *, unsigned int)"],
"SSL_SESSION_set1_id":["int","(SSL_SESSION *, const unsigned char *, unsigned int)"],
"SSL_SESSION_is_resumable":["int","(const SSL_SESSION *)"],
"SSL_SESSION_new":["SSL_SESSION *","()"],
"SSL_SESSION_dup":["SSL_SESSION *","(SSL_SESSION *)"],
"SSL_SESSION_get_id":["const unsigned char *","(const SSL_SESSION *, unsigned int *)"],
"SSL_SESSION_get0_id_context":["const unsigned char *","(const SSL_SESSION *, unsigned int *)"],
"SSL_SESSION_get_compress_id":["unsigned int","(const SSL_SESSION *)"],
"SSL_SESSION_print_fp":["int","(int *, const SSL_SESSION *)"],
"SSL_SESSION_print":["int","(BIO *, const SSL_SESSION *)"],
"SSL_SESSION_print_keylog":["int","(BIO *, const SSL_SESSION *)"],
"SSL_SESSION_up_ref":["int","(SSL_SESSION *)"],
"SSL_SESSION_free":["void","(SSL_SESSION *)"],
"i2d_SSL_SESSION":["int","(SSL_SESSION *, unsigned char **)"],
"SSL_set_session":["int","(SSL *, SSL_SESSION *)"],
"SSL_CTX_add_session":["int","(SSL_CTX *, SSL_SESSION *)"],
"SSL_CTX_remove_session":["int","(SSL_CTX *, SSL_SESSION *)"],
"SSL_CTX_set_generate_session_id":["int","(SSL_CTX *, GEN_SESSION_CB)"],
"SSL_set_generate_session_id":["int","(SSL *, GEN_SESSION_CB)"],
"SSL_has_matching_session_id":["int","(const SSL *, const unsigned char *, unsigned int)"],
"d2i_SSL_SESSION":["SSL_SESSION *","(SSL_SESSION **, const unsigned char **, long)"],
"SSL_get_peer_certificate":["X509 *","(const SSL *)"],
"SSL_get_peer_cert_chain":["struct stack_st_X509 *","(const SSL *)"],
"SSL_CTX_get_verify_mode":["int","(const SSL_CTX *)"],
"SSL_CTX_get_verify_depth":["int","(const SSL_CTX *)"],
"SSL_CTX_get_verify_callback":["SSL_verify_cb","(const SSL_CTX *)"],
"SSL_CTX_set_verify":["void","(SSL_CTX *, int, SSL_verify_cb)"],
"SSL_CTX_set_verify_depth":["void","(SSL_CTX *, int)"],
"SSL_CTX_set_cert_verify_callback":["void","(SSL_CTX *, int (*)(X509_STORE_CTX *, void *), void *)"],
"SSL_CTX_set_cert_cb":["void","(SSL_CTX *, int (*)(SSL *, void *), void *)"],
"SSL_CTX_use_RSAPrivateKey":["int","(SSL_CTX *, RSA *)"],
"SSL_CTX_use_RSAPrivateKey_ASN1":["int","(SSL_CTX *, const unsigned char *, long)"],
"SSL_CTX_use_PrivateKey":["int","(SSL_CTX *, EVP_PKEY *)"],
"SSL_CTX_use_PrivateKey_ASN1":["int","(int, SSL_CTX *, const unsigned char *, long)"],
"SSL_CTX_use_certificate":["int","(SSL_CTX *, X509 *)"],
"SSL_CTX_use_certificate_ASN1":["int","(SSL_CTX *, int, const unsigned char *)"],
"SSL_CTX_use_cert_and_key":["int","(SSL_CTX *, X509 *, EVP_PKEY *, struct stack_st_X509 *, int)"],
"SSL_CTX_set_default_passwd_cb":["void","(SSL_CTX *, pem_password_cb *)"],
"SSL_CTX_set_default_passwd_cb_userdata":["void","(SSL_CTX *, void *)"],
"SSL_CTX_get_default_passwd_cb":["pem_password_cb *","(SSL_CTX *)"],
"SSL_CTX_get_default_passwd_cb_userdata":["void *","(SSL_CTX *)"],
"SSL_set_default_passwd_cb":["void","(SSL *, pem_password_cb *)"],
"SSL_set_default_passwd_cb_userdata":["void","(SSL *, void *)"],
"SSL_get_default_passwd_cb":["pem_password_cb *","(SSL *)"],
"SSL_get_default_passwd_cb_userdata":["void *","(SSL *)"],
"SSL_CTX_check_private_key":["int","(const SSL_CTX *)"],
"SSL_check_private_key":["int","(const SSL *)"],
"SSL_CTX_set_session_id_context":["int","(SSL_CTX *, const unsigned char *, unsigned int)"],
"SSL_new":["SSL *","(SSL_CTX *)"],
"SSL_up_ref":["int","(SSL *)"],
"SSL_is_dtls":["int","(const SSL *)"],
"SSL_set_session_id_context":["int","(SSL *, const unsigned char *, unsigned int)"],
"SSL_CTX_set_purpose":["int","(SSL_CTX *, int)"],
"SSL_set_purpose":["int","(SSL *, int)"],
"SSL_CTX_set_trust":["int","(SSL_CTX *, int)"],
"SSL_set_trust":["int","(SSL *, int)"],
"SSL_set1_host":["int","(SSL *, const char *)"],
"SSL_add1_host":["int","(SSL *, const char *)"],
"SSL_get0_peername":["const char *","(SSL *)"],
"SSL_set_hostflags":["void","(SSL *, unsigned int)"],
"SSL_CTX_dane_enable":["int","(SSL_CTX *)"],
"SSL_CTX_dane_mtype_set":["int","(SSL_CTX *, const EVP_MD *, int, int)"],
"SSL_dane_enable":["int","(SSL *, const char *)"],
"SSL_dane_tlsa_add":["int","(SSL *, int, int, int, const unsigned char *, int)"],
"SSL_get0_dane_authority":["int","(SSL *, X509 **, EVP_PKEY **)"],
"SSL_get0_dane_tlsa":["int","(SSL *, int *, int *, int *, const unsigned char **, int *)"],
"SSL_get0_dane":["SSL_DANE *","(SSL *)"],
"SSL_CTX_dane_set_flags":["unsigned long","(SSL_CTX *, unsigned long)"],
"SSL_CTX_dane_clear_flags":["unsigned long","(SSL_CTX *, unsigned long)"],
"SSL_dane_set_flags":["unsigned long","(SSL *, unsigned long)"],
"SSL_dane_clear_flags":["unsigned long","(SSL *, unsigned long)"],
"SSL_CTX_set1_param":["int","(SSL_CTX *, X509_VERIFY_PARAM *)"],
"SSL_set1_param":["int","(SSL *, X509_VERIFY_PARAM *)"],
"SSL_CTX_get0_param":["X509_VERIFY_PARAM *","(SSL_CTX *)"],
"SSL_get0_param":["X509_VERIFY_PARAM *","(SSL *)"],
"SSL_CTX_set_srp_username":["int","(SSL_CTX *, char *)"],
"SSL_CTX_set_srp_password":["int","(SSL_CTX *, char *)"],
"SSL_CTX_set_srp_strength":["int","(SSL_CTX *, int)"],
"SSL_CTX_set_srp_client_pwd_callback":["int","(SSL_CTX *, char *(*)(SSL *, void *))"],
"SSL_CTX_set_srp_verify_param_callback":["int","(SSL_CTX *, int (*)(SSL *, void *))"],
"SSL_CTX_set_srp_username_callback":["int","(SSL_CTX *, int (*)(SSL *, int *, void *))"],
"SSL_CTX_set_srp_cb_arg":["int","(SSL_CTX *, void *)"],
"SSL_set_srp_server_param":["int","(SSL *, const BIGNUM *, const BIGNUM *, BIGNUM *, BIGNUM *, char *)"],
"SSL_set_srp_server_param_pw":["int","(SSL *, const char *, const char *, const char *)"],
"SSL_get_srp_g":["BIGNUM *","(SSL *)"],
"SSL_get_srp_N":["BIGNUM *","(SSL *)"],
"SSL_get_srp_username":["char *","(SSL *)"],
"SSL_get_srp_userinfo":["char *","(SSL *)"],
"SSL_CTX_set_client_hello_cb":["void","(SSL_CTX *, SSL_client_hello_cb_fn, void *)"],
"SSL_client_hello_isv2":["int","(SSL *)"],
"SSL_client_hello_get0_legacy_version":["unsigned int","(SSL *)"],
"SSL_client_hello_get0_random":["int","(SSL *, const unsigned char **)"],
"SSL_client_hello_get0_session_id":["int","(SSL *, const unsigned char **)"],
"SSL_client_hello_get0_ciphers":["int","(SSL *, const unsigned char **)"],
"SSL_client_hello_get0_compression_methods":["int","(SSL *, const unsigned char **)"],
"SSL_client_hello_get1_extensions_present":["int","(SSL *, int **, int *)"],
"SSL_client_hello_get0_ext":["int","(SSL *, unsigned int, const unsigned char **, int *)"],
"SSL_certs_clear":["void","(SSL *)"],
"SSL_free":["void","(SSL *)"],
"SSL_waiting_for_async":["int","(SSL *)"],
"SSL_get_all_async_fds":["int","(SSL *, int *, int *)"],
"SSL_get_changed_async_fds":["int","(SSL *, int *, int *, int *, int *)"],
"SSL_accept":["int","(SSL *)"],
"SSL_stateless":["int","(SSL *)"],
"SSL_connect":["int","(SSL *)"],
"SSL_read":["int","(SSL *, void *, int)"],
"SSL_read_ex":["int","(SSL *, void *, int, int *)"],
"SSL_read_early_data":["int","(SSL *, void *, int, int *)"],
"SSL_peek":["int","(SSL *, void *, int)"],
"SSL_peek_ex":["int","(SSL *, void *, int, int *)"],
"SSL_write":["int","(SSL *, const void *, int)"],
"SSL_write_ex":["int","(SSL *, const void *, int, int *)"],
"SSL_write_early_data":["int","(SSL *, const void *, int, int *)"],
"SSL_ctrl":["long","(SSL *, int, long, void *)"],
"SSL_callback_ctrl":["long","(SSL *, int, void (*)(void))"],
"SSL_CTX_ctrl":["long","(SSL_CTX *, int, long, void *)"],
"SSL_CTX_callback_ctrl":["long","(SSL_CTX *, int, void (*)(void))"],
"SSL_get_early_data_status":["int","(const SSL *)"],
"SSL_get_error":["int","(const SSL *, int)"],
"SSL_get_version":["const char *","(const SSL *)"],
"SSL_CTX_set_ssl_version":["int","(SSL_CTX *, const SSL_METHOD *)"],
"TLS_method":["const SSL_METHOD *","()"],
"TLS_server_method":["const SSL_METHOD *","()"],
"TLS_client_method":["const SSL_METHOD *","()"],
"TLSv1_method":["const SSL_METHOD *","()"],
"TLSv1_server_method":["const SSL_METHOD *","()"],
"TLSv1_client_method":["const SSL_METHOD *","()"],
"TLSv1_1_method":["const SSL_METHOD *","()"],
"TLSv1_1_server_method":["const SSL_METHOD *","()"],
"TLSv1_1_client_method":["const SSL_METHOD *","()"],
"TLSv1_2_method":["const SSL_METHOD *","()"],
"TLSv1_2_server_method":["const SSL_METHOD *","()"],
"TLSv1_2_client_method":["const SSL_METHOD *","()"],
"DTLSv1_method":["const SSL_METHOD *","()"],
"DTLSv1_server_method":["const SSL_METHOD *","()"],
"DTLSv1_client_method":["const SSL_METHOD *","()"],
"DTLSv1_2_method":["const SSL_METHOD *","()"],
"DTLSv1_2_server_method":["const SSL_METHOD *","()"],
"DTLSv1_2_client_method":["const SSL_METHOD *","()"],
"DTLS_method":["const SSL_METHOD *","()"],
"DTLS_server_method":["const SSL_METHOD *","()"],
"DTLS_client_method":["const SSL_METHOD *","()"],
"DTLS_get_data_mtu":["int","(const SSL *)"],
"SSL_get_ciphers":["struct stack_st_SSL_CIPHER *","(const SSL *)"],
"SSL_CTX_get_ciphers":["struct stack_st_SSL_CIPHER *","(const SSL_CTX *)"],
"SSL_get_client_ciphers":["struct stack_st_SSL_CIPHER *","(const SSL *)"],
"SSL_get1_supported_ciphers":["struct stack_st_SSL_CIPHER *","(SSL *)"],
"SSL_do_handshake":["int","(SSL *)"],
"SSL_key_update":["int","(SSL *, int)"],
"SSL_get_key_update_type":["int","(const SSL *)"],
"SSL_renegotiate":["int","(SSL *)"],
"SSL_renegotiate_abbreviated":["int","(SSL *)"],
"SSL_renegotiate_pending":["int","(const SSL *)"],
"SSL_shutdown":["int","(SSL *)"],
"SSL_verify_client_post_handshake":["int","(SSL *)"],
"SSL_CTX_set_post_handshake_auth":["void","(SSL_CTX *, int)"],
"SSL_set_post_handshake_auth":["void","(SSL *, int)"],
"SSL_CTX_get_ssl_method":["const SSL_METHOD *","(const SSL_CTX *)"],
"SSL_get_ssl_method":["const SSL_METHOD *","(const SSL *)"],
"SSL_set_ssl_method":["int","(SSL *, const SSL_METHOD *)"],
"SSL_alert_type_string_long":["const char *","(int)"],
"SSL_alert_type_string":["const char *","(int)"],
"SSL_alert_desc_string_long":["const char *","(int)"],
"SSL_alert_desc_string":["const char *","(int)"],
"SSL_set0_CA_list":["void","(SSL *, struct stack_st_X509_NAME *)"],
"SSL_CTX_set0_CA_list":["void","(SSL_CTX *, struct stack_st_X509_NAME *)"],
"SSL_get0_CA_list":["const struct stack_st_X509_NAME *","(const SSL *)"],
"SSL_CTX_get0_CA_list":["const struct stack_st_X509_NAME *","(const SSL_CTX *)"],
"SSL_add1_to_CA_list":["int","(SSL *, const X509 *)"],
"SSL_CTX_add1_to_CA_list":["int","(SSL_CTX *, const X509 *)"],
"SSL_get0_peer_CA_list":["const struct stack_st_X509_NAME *","(const SSL *)"],
"SSL_set_client_CA_list":["void","(SSL *, struct stack_st_X509_NAME *)"],
"SSL_CTX_set_client_CA_list":["void","(SSL_CTX *, struct stack_st_X509_NAME *)"],
"SSL_get_client_CA_list":["struct stack_st_X509_NAME *","(const SSL *)"],
"SSL_CTX_get_client_CA_list":["struct stack_st_X509_NAME *","(const SSL_CTX *)"],
"SSL_add_client_CA":["int","(SSL *, X509 *)"],
"SSL_CTX_add_client_CA":["int","(SSL_CTX *, X509 *)"],
"SSL_set_connect_state":["void","(SSL *)"],
"SSL_set_accept_state":["void","(SSL *)"],
"SSL_get_default_timeout":["long","(const SSL *)"],
"SSL_CIPHER_description":["char *","(const SSL_CIPHER *, char *, int)"],
"SSL_dup_CA_list":["struct stack_st_X509_NAME *","(const struct stack_st_X509_NAME *)"],
"SSL_dup":["SSL *","(SSL *)"],
"SSL_get_certificate":["X509 *","(const SSL *)"],
"SSL_get_privatekey":["struct evp_pkey_st *","(const SSL *)"],
"SSL_CTX_get0_certificate":["X509 *","(const SSL_CTX *)"],
"SSL_CTX_get0_privatekey":["EVP_PKEY *","(const SSL_CTX *)"],
"SSL_CTX_set_quiet_shutdown":["void","(SSL_CTX *, int)"],
"SSL_CTX_get_quiet_shutdown":["int","(const SSL_CTX *)"],
"SSL_set_quiet_shutdown":["void","(SSL *, int)"],
"SSL_get_quiet_shutdown":["int","(const SSL *)"],
"SSL_set_shutdown":["void","(SSL *, int)"],
"SSL_get_shutdown":["int","(const SSL *)"],
"SSL_version":["int","(const SSL *)"],
"SSL_client_version":["int","(const SSL *)"],
"SSL_CTX_set_default_verify_paths":["int","(SSL_CTX *)"],
"SSL_CTX_set_default_verify_dir":["int","(SSL_CTX *)"],
"SSL_CTX_set_default_verify_file":["int","(SSL_CTX *)"],
"SSL_CTX_load_verify_locations":["int","(SSL_CTX *, const char *, const char *)"],
"SSL_get_session":["SSL_SESSION *","(const SSL *)"],
"SSL_get1_session":["SSL_SESSION *","(SSL *)"],
"SSL_get_SSL_CTX":["SSL_CTX *","(const SSL *)"],
"SSL_set_SSL_CTX":["SSL_CTX *","(SSL *, SSL_CTX *)"],
"SSL_set_info_callback":["void","(SSL *, void (*)(const SSL *, int, int))"],
"SSL_get_info_callback":["void (*)(const SSL *, int, int)","(const SSL *)"],
"SSL_get_state":["OSSL_HANDSHAKE_STATE","(const SSL *)"],
"SSL_set_verify_result":["void","(SSL *, long)"],
"SSL_get_verify_result":["long","(const SSL *)"],
"SSL_get0_verified_chain":["struct stack_st_X509 *","(const SSL *)"],
"SSL_get_client_random":["int","(const SSL *, unsigned char *, int)"],
"SSL_get_server_random":["int","(const SSL *, unsigned char *, int)"],
"SSL_SESSION_get_master_key":["int","(const SSL_SESSION *, unsigned char *, int)"],
"SSL_SESSION_set1_master_key":["int","(SSL_SESSION *, const unsigned char *, int)"],
"SSL_SESSION_get_max_fragment_length":["int","(const SSL_SESSION *)"],
"SSL_set_ex_data":["int","(SSL *, int, void *)"],
"SSL_get_ex_data":["void *","(const SSL *, int)"],
"SSL_SESSION_set_ex_data":["int","(SSL_SESSION *, int, void *)"],
"SSL_SESSION_get_ex_data":["void *","(const SSL_SESSION *, int)"],
"SSL_CTX_set_ex_data":["int","(SSL_CTX *, int, void *)"],
"SSL_CTX_get_ex_data":["void *","(const SSL_CTX *, int)"],
"SSL_get_ex_data_X509_STORE_CTX_idx":["int","()"],
"SSL_CTX_set_default_read_buffer_len":["void","(SSL_CTX *, int)"],
"SSL_set_default_read_buffer_len":["void","(SSL *, int)"],
"SSL_CTX_set_tmp_dh_callback":["void","(SSL_CTX *, DH *(*)(SSL *, int, int))"],
"SSL_set_tmp_dh_callback":["void","(SSL *, DH *(*)(SSL *, int, int))"],
"SSL_get_current_compression":["const COMP_METHOD *","(const SSL *)"],
"SSL_get_current_expansion":["const COMP_METHOD *","(const SSL *)"],
"SSL_COMP_get_name":["const char *","(const COMP_METHOD *)"],
"SSL_COMP_get0_name":["const char *","(const SSL_COMP *)"],
"SSL_COMP_get_id":["int","(const SSL_COMP *)"],
"SSL_COMP_get_compression_methods":["struct stack_st_SSL_COMP *","()"],
"SSL_COMP_set0_compression_methods":["struct stack_st_SSL_COMP *","(struct stack_st_SSL_COMP *)"],
"SSL_COMP_add_compression_method":["int","(int, COMP_METHOD *)"],
"SSL_CIPHER_find":["const SSL_CIPHER *","(SSL *, const unsigned char *)"],
"SSL_CIPHER_get_cipher_nid":["int","(const SSL_CIPHER *)"],
"SSL_CIPHER_get_digest_nid":["int","(const SSL_CIPHER *)"],
"SSL_bytes_to_cipher_list":["int","(SSL *, const unsigned char *, int, int, struct stack_st_SSL_CIPHER **, struct stack_st_SSL_CIPHER **)"],
"SSL_set_session_ticket_ext":["int","(SSL *, void *, int)"],
"SSL_set_session_ticket_ext_cb":["int","(SSL *, tls_session_ticket_ext_cb_fn, void *)"],
"SSL_set_session_secret_cb":["int","(SSL *, tls_session_secret_cb_fn, void *)"],
"SSL_CTX_set_not_resumable_session_callback":["void","(SSL_CTX *, int (*)(SSL *, int))"],
"SSL_set_not_resumable_session_callback":["void","(SSL *, int (*)(SSL *, int))"],
"SSL_CTX_set_record_padding_callback":["void","(SSL_CTX *, int (*)(int *))"],
"SSL_CTX_set_record_padding_callback_arg":["void","(SSL_CTX *, void *)"],
"SSL_CTX_get_record_padding_callback_arg":["void *","(const SSL_CTX *)"],
"SSL_CTX_set_block_padding":["int","(SSL_CTX *, int)"],
"SSL_set_record_padding_callback":["void","(SSL *, int (*)(int *))"],
"SSL_set_record_padding_callback_arg":["void","(SSL *, void *)"],
"SSL_get_record_padding_callback_arg":["void *","(const SSL *)"],
"SSL_set_block_padding":["int","(SSL *, int)"],
"SSL_set_num_tickets":["int","(SSL *, int)"],
"SSL_get_num_tickets":["int","(const SSL *)"],
"SSL_CTX_set_num_tickets":["int","(SSL_CTX *, int)"],
"SSL_CTX_get_num_tickets":["int","(const SSL_CTX *)"],
"SSL_session_reused":["int","(const SSL *)"],
"SSL_is_server":["int","(const SSL *)"],
"SSL_CONF_CTX_new":["SSL_CONF_CTX *","()"],
"SSL_CONF_CTX_finish":["int","(SSL_CONF_CTX *)"],
"SSL_CONF_CTX_free":["void","(SSL_CONF_CTX *)"],
"SSL_CONF_CTX_set_flags":["unsigned int","(SSL_CONF_CTX *, unsigned int)"],
"SSL_CONF_CTX_clear_flags":["unsigned int","(SSL_CONF_CTX *, unsigned int)"],
"SSL_CONF_CTX_set1_prefix":["int","(SSL_CONF_CTX *, const char *)"],
"SSL_CONF_CTX_set_ssl":["void","(SSL_CONF_CTX *, SSL *)"],
"SSL_CONF_CTX_set_ssl_ctx":["void","(SSL_CONF_CTX *, SSL_CTX *)"],
"SSL_CONF_cmd":["int","(SSL_CONF_CTX *, const char *, const char *)"],
"SSL_CONF_cmd_argv":["int","(SSL_CONF_CTX *, int *, char ***)"],
"SSL_CONF_cmd_value_type":["int","(SSL_CONF_CTX *, const char *)"],
"SSL_add_ssl_module":["void","()"],
"SSL_config":["int","(SSL *, const char *)"],
"SSL_CTX_config":["int","(SSL_CTX *, const char *)"],
"DTLSv1_listen":["int","(SSL *, BIO_ADDR *)"],
"SSL_set_ct_validation_callback":["int","(SSL *, ssl_ct_validation_cb, void *)"],
"SSL_CTX_set_ct_validation_callback":["int","(SSL_CTX *, ssl_ct_validation_cb, void *)"],
"SSL_enable_ct":["int","(SSL *, int)"],
"SSL_CTX_enable_ct":["int","(SSL_CTX *, int)"],
"SSL_ct_is_enabled":["int","(const SSL *)"],
"SSL_CTX_ct_is_enabled":["int","(const SSL_CTX *)"],
"SSL_get0_peer_scts":["const struct stack_st_SCT *","(SSL *)"],
"SSL_CTX_set_default_ctlog_list_file":["int","(SSL_CTX *)"],
"SSL_CTX_set_ctlog_list_file":["int","(SSL_CTX *, const char *)"],
"SSL_CTX_set0_ctlog_store":["void","(SSL_CTX *, CTLOG_STORE *)"],
"SSL_CTX_get0_ctlog_store":["const CTLOG_STORE *","(const SSL_CTX *)"],
"SSL_set_security_level":["void","(SSL *, int)"],
"SSL_get_security_level":["int","(const SSL *)"],
"SSL_set_security_callback":["void","(SSL *, int (*)(const SSL *, const SSL_CTX *, int, int, int, void *, void *))"],
"SSL_get_security_callback":["int (*)(const SSL *, const SSL_CTX *, int, int, int, void *, void *)","(const SSL *)"],
"SSL_set0_security_ex_data":["void","(SSL *, void *)"],
"SSL_get0_security_ex_data":["void *","(const SSL *)"],
"SSL_CTX_set_security_level":["void","(SSL_CTX *, int)"],
"SSL_CTX_get_security_level":["int","(const SSL_CTX *)"],
"SSL_CTX_set_security_callback":["void","(SSL_CTX *, int (*)(const SSL *, const SSL_CTX *, int, int, int, void *, void *))"],
"SSL_CTX_get_security_callback":["int (*)(const SSL *, const SSL_CTX *, int, int, int, void *, void *)","(const SSL_CTX *)"],
"SSL_CTX_set0_security_ex_data":["void","(SSL_CTX *, void *)"],
"SSL_CTX_get0_security_ex_data":["void *","(const SSL_CTX *)"],
"OPENSSL_init_ssl":["int","(int, const OPENSSL_INIT_SETTINGS *)"],
"SSL_test_functions":["const struct openssl_ssl_test_functions *","()"],
"SSL_free_buffers":["int","(SSL *)"],
"SSL_alloc_buffers":["int","(SSL *)"],
"SSL_CTX_set_session_ticket_cb":["int","(SSL_CTX *, SSL_CTX_generate_session_ticket_fn, SSL_CTX_decrypt_session_ticket_fn, void *)"],
"SSL_SESSION_set1_ticket_appdata":["int","(SSL_SESSION *, const void *, int)"],
"SSL_SESSION_get0_ticket_appdata":["int","(SSL_SESSION *, void **, int *)"],
"DTLS_set_timer_cb":["void","(SSL *, DTLS_timer_cb)"],
"SSL_CTX_set_allow_early_data_cb":["void","(SSL_CTX *, SSL_allow_early_data_cb_fn, void *)"],
"SSL_set_allow_early_data_cb":["void","(SSL *, SSL_allow_early_data_cb_fn, void *)"],
"SSL_CTX_set_tlsext_use_srtp":["int","(SSL_CTX *, const char *)"],
"SSL_set_tlsext_use_srtp":["int","(SSL *, const char *)"],
"SSL_get_srtp_profiles":["struct stack_st_SRTP_PROTECTION_PROFILE *","(SSL *)"],
"SSL_get_selected_srtp_profile":["SRTP_PROTECTION_PROFILE *","(SSL *)"],
"ERR_load_TS_strings":["int","()"],
"sk_ESS_CERT_ID_num":["int","(const struct stack_st_ESS_CERT_ID *)"],
"sk_ESS_CERT_ID_value":["ESS_CERT_ID *","(const struct stack_st_ESS_CERT_ID *, int)"],
"sk_ESS_CERT_ID_new":["struct stack_st_ESS_CERT_ID *","(sk_ESS_CERT_ID_compfunc)"],
"sk_ESS_CERT_ID_new_null":["struct stack_st_ESS_CERT_ID *","()"],
"sk_ESS_CERT_ID_new_reserve":["struct stack_st_ESS_CERT_ID *","(sk_ESS_CERT_ID_compfunc, int)"],
"sk_ESS_CERT_ID_reserve":["int","(struct stack_st_ESS_CERT_ID *, int)"],
"sk_ESS_CERT_ID_free":["void","(struct stack_st_ESS_CERT_ID *)"],
"sk_ESS_CERT_ID_zero":["void","(struct stack_st_ESS_CERT_ID *)"],
"sk_ESS_CERT_ID_delete":["ESS_CERT_ID *","(struct stack_st_ESS_CERT_ID *, int)"],
"sk_ESS_CERT_ID_delete_ptr":["ESS_CERT_ID *","(struct stack_st_ESS_CERT_ID *, ESS_CERT_ID *)"],
"sk_ESS_CERT_ID_push":["int","(struct stack_st_ESS_CERT_ID *, ESS_CERT_ID *)"],
"sk_ESS_CERT_ID_unshift":["int","(struct stack_st_ESS_CERT_ID *, ESS_CERT_ID *)"],
"sk_ESS_CERT_ID_pop":["ESS_CERT_ID *","(struct stack_st_ESS_CERT_ID *)"],
"sk_ESS_CERT_ID_shift":["ESS_CERT_ID *","(struct stack_st_ESS_CERT_ID *)"],
"sk_ESS_CERT_ID_pop_free":["void","(struct stack_st_ESS_CERT_ID *, sk_ESS_CERT_ID_freefunc)"],
"sk_ESS_CERT_ID_insert":["int","(struct stack_st_ESS_CERT_ID *, ESS_CERT_ID *, int)"],
"sk_ESS_CERT_ID_set":["ESS_CERT_ID *","(struct stack_st_ESS_CERT_ID *, int, ESS_CERT_ID *)"],
"sk_ESS_CERT_ID_find":["int","(struct stack_st_ESS_CERT_ID *, ESS_CERT_ID *)"],
"sk_ESS_CERT_ID_find_ex":["int","(struct stack_st_ESS_CERT_ID *, ESS_CERT_ID *)"],
"sk_ESS_CERT_ID_sort":["void","(struct stack_st_ESS_CERT_ID *)"],
"sk_ESS_CERT_ID_is_sorted":["int","(const struct stack_st_ESS_CERT_ID *)"],
"sk_ESS_CERT_ID_dup":["struct stack_st_ESS_CERT_ID *","(const struct stack_st_ESS_CERT_ID *)"],
"sk_ESS_CERT_ID_deep_copy":["struct stack_st_ESS_CERT_ID *","(const struct stack_st_ESS_CERT_ID *, sk_ESS_CERT_ID_copyfunc, sk_ESS_CERT_ID_freefunc)"],
"sk_ESS_CERT_ID_set_cmp_func":["sk_ESS_CERT_ID_compfunc","(struct stack_st_ESS_CERT_ID *, sk_ESS_CERT_ID_compfunc)"],
"sk_ESS_CERT_ID_V2_num":["int","(const struct stack_st_ESS_CERT_ID_V2 *)"],
"sk_ESS_CERT_ID_V2_value":["ESS_CERT_ID_V2 *","(const struct stack_st_ESS_CERT_ID_V2 *, int)"],
"sk_ESS_CERT_ID_V2_new":["struct stack_st_ESS_CERT_ID_V2 *","(sk_ESS_CERT_ID_V2_compfunc)"],
"sk_ESS_CERT_ID_V2_new_null":["struct stack_st_ESS_CERT_ID_V2 *","()"],
"sk_ESS_CERT_ID_V2_new_reserve":["struct stack_st_ESS_CERT_ID_V2 *","(sk_ESS_CERT_ID_V2_compfunc, int)"],
"sk_ESS_CERT_ID_V2_reserve":["int","(struct stack_st_ESS_CERT_ID_V2 *, int)"],
"sk_ESS_CERT_ID_V2_free":["void","(struct stack_st_ESS_CERT_ID_V2 *)"],
"sk_ESS_CERT_ID_V2_zero":["void","(struct stack_st_ESS_CERT_ID_V2 *)"],
"sk_ESS_CERT_ID_V2_delete":["ESS_CERT_ID_V2 *","(struct stack_st_ESS_CERT_ID_V2 *, int)"],
"sk_ESS_CERT_ID_V2_delete_ptr":["ESS_CERT_ID_V2 *","(struct stack_st_ESS_CERT_ID_V2 *, ESS_CERT_ID_V2 *)"],
"sk_ESS_CERT_ID_V2_push":["int","(struct stack_st_ESS_CERT_ID_V2 *, ESS_CERT_ID_V2 *)"],
"sk_ESS_CERT_ID_V2_unshift":["int","(struct stack_st_ESS_CERT_ID_V2 *, ESS_CERT_ID_V2 *)"],
"sk_ESS_CERT_ID_V2_pop":["ESS_CERT_ID_V2 *","(struct stack_st_ESS_CERT_ID_V2 *)"],
"sk_ESS_CERT_ID_V2_shift":["ESS_CERT_ID_V2 *","(struct stack_st_ESS_CERT_ID_V2 *)"],
"sk_ESS_CERT_ID_V2_pop_free":["void","(struct stack_st_ESS_CERT_ID_V2 *, sk_ESS_CERT_ID_V2_freefunc)"],
"sk_ESS_CERT_ID_V2_insert":["int","(struct stack_st_ESS_CERT_ID_V2 *, ESS_CERT_ID_V2 *, int)"],
"sk_ESS_CERT_ID_V2_set":["ESS_CERT_ID_V2 *","(struct stack_st_ESS_CERT_ID_V2 *, int, ESS_CERT_ID_V2 *)"],
"sk_ESS_CERT_ID_V2_find":["int","(struct stack_st_ESS_CERT_ID_V2 *, ESS_CERT_ID_V2 *)"],
"sk_ESS_CERT_ID_V2_find_ex":["int","(struct stack_st_ESS_CERT_ID_V2 *, ESS_CERT_ID_V2 *)"],
"sk_ESS_CERT_ID_V2_sort":["void","(struct stack_st_ESS_CERT_ID_V2 *)"],
"sk_ESS_CERT_ID_V2_is_sorted":["int","(const struct stack_st_ESS_CERT_ID_V2 *)"],
"sk_ESS_CERT_ID_V2_dup":["struct stack_st_ESS_CERT_ID_V2 *","(const struct stack_st_ESS_CERT_ID_V2 *)"],
"sk_ESS_CERT_ID_V2_deep_copy":["struct stack_st_ESS_CERT_ID_V2 *","(const struct stack_st_ESS_CERT_ID_V2 *, sk_ESS_CERT_ID_V2_copyfunc, sk_ESS_CERT_ID_V2_freefunc)"],
"sk_ESS_CERT_ID_V2_set_cmp_func":["sk_ESS_CERT_ID_V2_compfunc","(struct stack_st_ESS_CERT_ID_V2 *, sk_ESS_CERT_ID_V2_compfunc)"],
"TS_REQ_new":["TS_REQ *","()"],
"TS_REQ_free":["void","(TS_REQ *)"],
"i2d_TS_REQ":["int","(const TS_REQ *, unsigned char **)"],
"d2i_TS_REQ":["TS_REQ *","(TS_REQ **, const unsigned char **, long)"],
"TS_REQ_dup":["TS_REQ *","(TS_REQ *)"],
"d2i_TS_REQ_fp":["TS_REQ *","(int *, TS_REQ **)"],
"i2d_TS_REQ_fp":["int","(int *, TS_REQ *)"],
"d2i_TS_REQ_bio":["TS_REQ *","(BIO *, TS_REQ **)"],
"i2d_TS_REQ_bio":["int","(BIO *, TS_REQ *)"],
"TS_MSG_IMPRINT_new":["TS_MSG_IMPRINT *","()"],
"TS_MSG_IMPRINT_free":["void","(TS_MSG_IMPRINT *)"],
"i2d_TS_MSG_IMPRINT":["int","(const TS_MSG_IMPRINT *, unsigned char **)"],
"d2i_TS_MSG_IMPRINT":["TS_MSG_IMPRINT *","(TS_MSG_IMPRINT **, const unsigned char **, long)"],
"TS_MSG_IMPRINT_dup":["TS_MSG_IMPRINT *","(TS_MSG_IMPRINT *)"],
"d2i_TS_MSG_IMPRINT_fp":["TS_MSG_IMPRINT *","(int *, TS_MSG_IMPRINT **)"],
"i2d_TS_MSG_IMPRINT_fp":["int","(int *, TS_MSG_IMPRINT *)"],
"d2i_TS_MSG_IMPRINT_bio":["TS_MSG_IMPRINT *","(BIO *, TS_MSG_IMPRINT **)"],
"i2d_TS_MSG_IMPRINT_bio":["int","(BIO *, TS_MSG_IMPRINT *)"],
"TS_RESP_new":["TS_RESP *","()"],
"TS_RESP_free":["void","(TS_RESP *)"],
"i2d_TS_RESP":["int","(const TS_RESP *, unsigned char **)"],
"d2i_TS_RESP":["TS_RESP *","(TS_RESP **, const unsigned char **, long)"],
"PKCS7_to_TS_TST_INFO":["TS_TST_INFO *","(PKCS7 *)"],
"TS_RESP_dup":["TS_RESP *","(TS_RESP *)"],
"d2i_TS_RESP_fp":["TS_RESP *","(int *, TS_RESP **)"],
"i2d_TS_RESP_fp":["int","(int *, TS_RESP *)"],
"d2i_TS_RESP_bio":["TS_RESP *","(BIO *, TS_RESP **)"],
"i2d_TS_RESP_bio":["int","(BIO *, TS_RESP *)"],
"TS_STATUS_INFO_new":["TS_STATUS_INFO *","()"],
"TS_STATUS_INFO_free":["void","(TS_STATUS_INFO *)"],
"i2d_TS_STATUS_INFO":["int","(const TS_STATUS_INFO *, unsigned char **)"],
"d2i_TS_STATUS_INFO":["TS_STATUS_INFO *","(TS_STATUS_INFO **, const unsigned char **, long)"],
"TS_STATUS_INFO_dup":["TS_STATUS_INFO *","(TS_STATUS_INFO *)"],
"TS_TST_INFO_new":["TS_TST_INFO *","()"],
"TS_TST_INFO_free":["void","(TS_TST_INFO *)"],
"i2d_TS_TST_INFO":["int","(const TS_TST_INFO *, unsigned char **)"],
"d2i_TS_TST_INFO":["TS_TST_INFO *","(TS_TST_INFO **, const unsigned char **, long)"],
"TS_TST_INFO_dup":["TS_TST_INFO *","(TS_TST_INFO *)"],
"d2i_TS_TST_INFO_fp":["TS_TST_INFO *","(int *, TS_TST_INFO **)"],
"i2d_TS_TST_INFO_fp":["int","(int *, TS_TST_INFO *)"],
"d2i_TS_TST_INFO_bio":["TS_TST_INFO *","(BIO *, TS_TST_INFO **)"],
"i2d_TS_TST_INFO_bio":["int","(BIO *, TS_TST_INFO *)"],
"TS_ACCURACY_new":["TS_ACCURACY *","()"],
"TS_ACCURACY_free":["void","(TS_ACCURACY *)"],
"i2d_TS_ACCURACY":["int","(const TS_ACCURACY *, unsigned char **)"],
"d2i_TS_ACCURACY":["TS_ACCURACY *","(TS_ACCURACY **, const unsigned char **, long)"],
"TS_ACCURACY_dup":["TS_ACCURACY *","(TS_ACCURACY *)"],
"ESS_ISSUER_SERIAL_new":["ESS_ISSUER_SERIAL *","()"],
"ESS_ISSUER_SERIAL_free":["void","(ESS_ISSUER_SERIAL *)"],
"i2d_ESS_ISSUER_SERIAL":["int","(const ESS_ISSUER_SERIAL *, unsigned char **)"],
"d2i_ESS_ISSUER_SERIAL":["ESS_ISSUER_SERIAL *","(ESS_ISSUER_SERIAL **, const unsigned char **, long)"],
"ESS_ISSUER_SERIAL_dup":["ESS_ISSUER_SERIAL *","(ESS_ISSUER_SERIAL *)"],
"ESS_CERT_ID_new":["ESS_CERT_ID *","()"],
"ESS_CERT_ID_free":["void","(ESS_CERT_ID *)"],
"i2d_ESS_CERT_ID":["int","(const ESS_CERT_ID *, unsigned char **)"],
"d2i_ESS_CERT_ID":["ESS_CERT_ID *","(ESS_CERT_ID **, const unsigned char **, long)"],
"ESS_CERT_ID_dup":["ESS_CERT_ID *","(ESS_CERT_ID *)"],
"ESS_SIGNING_CERT_new":["ESS_SIGNING_CERT *","()"],
"ESS_SIGNING_CERT_free":["void","(ESS_SIGNING_CERT *)"],
"i2d_ESS_SIGNING_CERT":["int","(const ESS_SIGNING_CERT *, unsigned char **)"],
"d2i_ESS_SIGNING_CERT":["ESS_SIGNING_CERT *","(ESS_SIGNING_CERT **, const unsigned char **, long)"],
"ESS_SIGNING_CERT_dup":["ESS_SIGNING_CERT *","(ESS_SIGNING_CERT *)"],
"ESS_CERT_ID_V2_new":["ESS_CERT_ID_V2 *","()"],
"ESS_CERT_ID_V2_free":["void","(ESS_CERT_ID_V2 *)"],
"i2d_ESS_CERT_ID_V2":["int","(const ESS_CERT_ID_V2 *, unsigned char **)"],
"d2i_ESS_CERT_ID_V2":["ESS_CERT_ID_V2 *","(ESS_CERT_ID_V2 **, const unsigned char **, long)"],
"ESS_CERT_ID_V2_dup":["ESS_CERT_ID_V2 *","(ESS_CERT_ID_V2 *)"],
"ESS_SIGNING_CERT_V2_new":["ESS_SIGNING_CERT_V2 *","()"],
"ESS_SIGNING_CERT_V2_free":["void","(ESS_SIGNING_CERT_V2 *)"],
"i2d_ESS_SIGNING_CERT_V2":["int","(const ESS_SIGNING_CERT_V2 *, unsigned char **)"],
"d2i_ESS_SIGNING_CERT_V2":["ESS_SIGNING_CERT_V2 *","(ESS_SIGNING_CERT_V2 **, const unsigned char **, long)"],
"ESS_SIGNING_CERT_V2_dup":["ESS_SIGNING_CERT_V2 *","(ESS_SIGNING_CERT_V2 *)"],
"TS_REQ_set_version":["int","(TS_REQ *, long)"],
"TS_REQ_get_version":["long","(const TS_REQ *)"],
"TS_STATUS_INFO_set_status":["int","(TS_STATUS_INFO *, int)"],
"TS_STATUS_INFO_get0_status":["const ASN1_INTEGER *","(const TS_STATUS_INFO *)"],
"TS_STATUS_INFO_get0_text":["const struct stack_st_ASN1_UTF8STRING *","(const TS_STATUS_INFO *)"],
"TS_STATUS_INFO_get0_failure_info":["const ASN1_BIT_STRING *","(const TS_STATUS_INFO *)"],
"TS_REQ_set_msg_imprint":["int","(TS_REQ *, TS_MSG_IMPRINT *)"],
"TS_REQ_get_msg_imprint":["TS_MSG_IMPRINT *","(TS_REQ *)"],
"TS_MSG_IMPRINT_set_algo":["int","(TS_MSG_IMPRINT *, X509_ALGOR *)"],
"TS_MSG_IMPRINT_get_algo":["X509_ALGOR *","(TS_MSG_IMPRINT *)"],
"TS_MSG_IMPRINT_set_msg":["int","(TS_MSG_IMPRINT *, unsigned char *, int)"],
"TS_MSG_IMPRINT_get_msg":["ASN1_OCTET_STRING *","(TS_MSG_IMPRINT *)"],
"TS_REQ_set_policy_id":["int","(TS_REQ *, const ASN1_OBJECT *)"],
"TS_REQ_get_policy_id":["ASN1_OBJECT *","(TS_REQ *)"],
"TS_REQ_set_nonce":["int","(TS_REQ *, const ASN1_INTEGER *)"],
"TS_REQ_get_nonce":["const ASN1_INTEGER *","(const TS_REQ *)"],
"TS_REQ_set_cert_req":["int","(TS_REQ *, int)"],
"TS_REQ_get_cert_req":["int","(const TS_REQ *)"],
"TS_REQ_get_exts":["struct stack_st_X509_EXTENSION *","(TS_REQ *)"],
"TS_REQ_ext_free":["void","(TS_REQ *)"],
"TS_REQ_get_ext_count":["int","(TS_REQ *)"],
"TS_REQ_get_ext_by_NID":["int","(TS_REQ *, int, int)"],
"TS_REQ_get_ext_by_OBJ":["int","(TS_REQ *, const ASN1_OBJECT *, int)"],
"TS_REQ_get_ext_by_critical":["int","(TS_REQ *, int, int)"],
"TS_REQ_get_ext":["X509_EXTENSION *","(TS_REQ *, int)"],
"TS_REQ_delete_ext":["X509_EXTENSION *","(TS_REQ *, int)"],
"TS_REQ_add_ext":["int","(TS_REQ *, X509_EXTENSION *, int)"],
"TS_REQ_get_ext_d2i":["void *","(TS_REQ *, int, int *, int *)"],
"TS_REQ_print_bio":["int","(BIO *, TS_REQ *)"],
"TS_RESP_set_status_info":["int","(TS_RESP *, TS_STATUS_INFO *)"],
"TS_RESP_get_status_info":["TS_STATUS_INFO *","(TS_RESP *)"],
"TS_RESP_set_tst_info":["void","(TS_RESP *, PKCS7 *, TS_TST_INFO *)"],
"TS_RESP_get_token":["PKCS7 *","(TS_RESP *)"],
"TS_RESP_get_tst_info":["TS_TST_INFO *","(TS_RESP *)"],
"TS_TST_INFO_set_version":["int","(TS_TST_INFO *, long)"],
"TS_TST_INFO_get_version":["long","(const TS_TST_INFO *)"],
"TS_TST_INFO_set_policy_id":["int","(TS_TST_INFO *, ASN1_OBJECT *)"],
"TS_TST_INFO_get_policy_id":["ASN1_OBJECT *","(TS_TST_INFO *)"],
"TS_TST_INFO_set_msg_imprint":["int","(TS_TST_INFO *, TS_MSG_IMPRINT *)"],
"TS_TST_INFO_get_msg_imprint":["TS_MSG_IMPRINT *","(TS_TST_INFO *)"],
"TS_TST_INFO_set_serial":["int","(TS_TST_INFO *, const ASN1_INTEGER *)"],
"TS_TST_INFO_get_serial":["const ASN1_INTEGER *","(const TS_TST_INFO *)"],
"TS_TST_INFO_set_time":["int","(TS_TST_INFO *, const ASN1_GENERALIZEDTIME *)"],
"TS_TST_INFO_get_time":["const ASN1_GENERALIZEDTIME *","(const TS_TST_INFO *)"],
"TS_TST_INFO_set_accuracy":["int","(TS_TST_INFO *, TS_ACCURACY *)"],
"TS_TST_INFO_get_accuracy":["TS_ACCURACY *","(TS_TST_INFO *)"],
"TS_ACCURACY_set_seconds":["int","(TS_ACCURACY *, const ASN1_INTEGER *)"],
"TS_ACCURACY_get_seconds":["const ASN1_INTEGER *","(const TS_ACCURACY *)"],
"TS_ACCURACY_set_millis":["int","(TS_ACCURACY *, const ASN1_INTEGER *)"],
"TS_ACCURACY_get_millis":["const ASN1_INTEGER *","(const TS_ACCURACY *)"],
"TS_ACCURACY_set_micros":["int","(TS_ACCURACY *, const ASN1_INTEGER *)"],
"TS_ACCURACY_get_micros":["const ASN1_INTEGER *","(const TS_ACCURACY *)"],
"TS_TST_INFO_set_ordering":["int","(TS_TST_INFO *, int)"],
"TS_TST_INFO_get_ordering":["int","(const TS_TST_INFO *)"],
"TS_TST_INFO_set_nonce":["int","(TS_TST_INFO *, const ASN1_INTEGER *)"],
"TS_TST_INFO_get_nonce":["const ASN1_INTEGER *","(const TS_TST_INFO *)"],
"TS_TST_INFO_set_tsa":["int","(TS_TST_INFO *, GENERAL_NAME *)"],
"TS_TST_INFO_get_tsa":["GENERAL_NAME *","(TS_TST_INFO *)"],
"TS_TST_INFO_get_exts":["struct stack_st_X509_EXTENSION *","(TS_TST_INFO *)"],
"TS_TST_INFO_ext_free":["void","(TS_TST_INFO *)"],
"TS_TST_INFO_get_ext_count":["int","(TS_TST_INFO *)"],
"TS_TST_INFO_get_ext_by_NID":["int","(TS_TST_INFO *, int, int)"],
"TS_TST_INFO_get_ext_by_OBJ":["int","(TS_TST_INFO *, const ASN1_OBJECT *, int)"],
"TS_TST_INFO_get_ext_by_critical":["int","(TS_TST_INFO *, int, int)"],
"TS_TST_INFO_get_ext":["X509_EXTENSION *","(TS_TST_INFO *, int)"],
"TS_TST_INFO_delete_ext":["X509_EXTENSION *","(TS_TST_INFO *, int)"],
"TS_TST_INFO_add_ext":["int","(TS_TST_INFO *, X509_EXTENSION *, int)"],
"TS_TST_INFO_get_ext_d2i":["void *","(TS_TST_INFO *, int, int *, int *)"],
"sk_EVP_MD_num":["int","(const struct stack_st_EVP_MD *)"],
"sk_EVP_MD_value":["const EVP_MD *","(const struct stack_st_EVP_MD *, int)"],
"sk_EVP_MD_new":["struct stack_st_EVP_MD *","(sk_EVP_MD_compfunc)"],
"sk_EVP_MD_new_null":["struct stack_st_EVP_MD *","()"],
"sk_EVP_MD_new_reserve":["struct stack_st_EVP_MD *","(sk_EVP_MD_compfunc, int)"],
"sk_EVP_MD_reserve":["int","(struct stack_st_EVP_MD *, int)"],
"sk_EVP_MD_free":["void","(struct stack_st_EVP_MD *)"],
"sk_EVP_MD_zero":["void","(struct stack_st_EVP_MD *)"],
"sk_EVP_MD_delete":["const EVP_MD *","(struct stack_st_EVP_MD *, int)"],
"sk_EVP_MD_delete_ptr":["const EVP_MD *","(struct stack_st_EVP_MD *, const EVP_MD *)"],
"sk_EVP_MD_push":["int","(struct stack_st_EVP_MD *, const EVP_MD *)"],
"sk_EVP_MD_unshift":["int","(struct stack_st_EVP_MD *, const EVP_MD *)"],
"sk_EVP_MD_pop":["const EVP_MD *","(struct stack_st_EVP_MD *)"],
"sk_EVP_MD_shift":["const EVP_MD *","(struct stack_st_EVP_MD *)"],
"sk_EVP_MD_pop_free":["void","(struct stack_st_EVP_MD *, sk_EVP_MD_freefunc)"],
"sk_EVP_MD_insert":["int","(struct stack_st_EVP_MD *, const EVP_MD *, int)"],
"sk_EVP_MD_set":["const EVP_MD *","(struct stack_st_EVP_MD *, int, const EVP_MD *)"],
"sk_EVP_MD_find":["int","(struct stack_st_EVP_MD *, const EVP_MD *)"],
"sk_EVP_MD_find_ex":["int","(struct stack_st_EVP_MD *, const EVP_MD *)"],
"sk_EVP_MD_sort":["void","(struct stack_st_EVP_MD *)"],
"sk_EVP_MD_is_sorted":["int","(const struct stack_st_EVP_MD *)"],
"sk_EVP_MD_dup":["struct stack_st_EVP_MD *","(const struct stack_st_EVP_MD *)"],
"sk_EVP_MD_deep_copy":["struct stack_st_EVP_MD *","(const struct stack_st_EVP_MD *, sk_EVP_MD_copyfunc, sk_EVP_MD_freefunc)"],
"sk_EVP_MD_set_cmp_func":["sk_EVP_MD_compfunc","(struct stack_st_EVP_MD *, sk_EVP_MD_compfunc)"],
"TS_RESP_CTX_new":["TS_RESP_CTX *","()"],
"TS_RESP_CTX_free":["void","(TS_RESP_CTX *)"],
"TS_RESP_CTX_set_signer_cert":["int","(TS_RESP_CTX *, X509 *)"],
"TS_RESP_CTX_set_signer_key":["int","(TS_RESP_CTX *, EVP_PKEY *)"],
"TS_RESP_CTX_set_signer_digest":["int","(TS_RESP_CTX *, const EVP_MD *)"],
"TS_RESP_CTX_set_ess_cert_id_digest":["int","(TS_RESP_CTX *, const EVP_MD *)"],
"TS_RESP_CTX_set_def_policy":["int","(TS_RESP_CTX *, const ASN1_OBJECT *)"],
"TS_RESP_CTX_set_certs":["int","(TS_RESP_CTX *, struct stack_st_X509 *)"],
"TS_RESP_CTX_add_policy":["int","(TS_RESP_CTX *, const ASN1_OBJECT *)"],
"TS_RESP_CTX_add_md":["int","(TS_RESP_CTX *, const EVP_MD *)"],
"TS_RESP_CTX_set_accuracy":["int","(TS_RESP_CTX *, int, int, int)"],
"TS_RESP_CTX_set_clock_precision_digits":["int","(TS_RESP_CTX *, unsigned int)"],
"TS_RESP_CTX_add_flags":["void","(TS_RESP_CTX *, int)"],
"TS_RESP_CTX_set_serial_cb":["void","(TS_RESP_CTX *, TS_serial_cb, void *)"],
"TS_RESP_CTX_set_time_cb":["void","(TS_RESP_CTX *, TS_time_cb, void *)"],
"TS_RESP_CTX_set_extension_cb":["void","(TS_RESP_CTX *, TS_extension_cb, void *)"],
"TS_RESP_CTX_set_status_info":["int","(TS_RESP_CTX *, int, const char *)"],
"TS_RESP_CTX_set_status_info_cond":["int","(TS_RESP_CTX *, int, const char *)"],
"TS_RESP_CTX_add_failure_info":["int","(TS_RESP_CTX *, int)"],
"TS_RESP_CTX_get_request":["TS_REQ *","(TS_RESP_CTX *)"],
"TS_RESP_CTX_get_tst_info":["TS_TST_INFO *","(TS_RESP_CTX *)"],
"TS_RESP_create_response":["TS_RESP *","(TS_RESP_CTX *, BIO *)"],
"TS_RESP_verify_signature":["int","(PKCS7 *, struct stack_st_X509 *, X509_STORE *, X509 **)"],
"TS_RESP_verify_response":["int","(TS_VERIFY_CTX *, TS_RESP *)"],
"TS_RESP_verify_token":["int","(TS_VERIFY_CTX *, PKCS7 *)"],
"TS_VERIFY_CTX_new":["TS_VERIFY_CTX *","()"],
"TS_VERIFY_CTX_init":["void","(TS_VERIFY_CTX *)"],
"TS_VERIFY_CTX_free":["void","(TS_VERIFY_CTX *)"],
"TS_VERIFY_CTX_cleanup":["void","(TS_VERIFY_CTX *)"],
"TS_VERIFY_CTX_set_flags":["int","(TS_VERIFY_CTX *, int)"],
"TS_VERIFY_CTX_add_flags":["int","(TS_VERIFY_CTX *, int)"],
"TS_VERIFY_CTX_set_data":["BIO *","(TS_VERIFY_CTX *, BIO *)"],
"TS_VERIFY_CTX_set_imprint":["unsigned char *","(TS_VERIFY_CTX *, unsigned char *, long)"],
"TS_VERIFY_CTX_set_store":["X509_STORE *","(TS_VERIFY_CTX *, X509_STORE *)"],
"TS_VERIFY_CTS_set_certs":["struct stack_st_X509 *","(TS_VERIFY_CTX *, struct stack_st_X509 *)"],
"TS_REQ_to_TS_VERIFY_CTX":["TS_VERIFY_CTX *","(TS_REQ *, TS_VERIFY_CTX *)"],
"TS_RESP_print_bio":["int","(BIO *, TS_RESP *)"],
"TS_STATUS_INFO_print_bio":["int","(BIO *, TS_STATUS_INFO *)"],
"TS_TST_INFO_print_bio":["int","(BIO *, TS_TST_INFO *)"],
"TS_ASN1_INTEGER_print_bio":["int","(BIO *, const ASN1_INTEGER *)"],
"TS_OBJ_print_bio":["int","(BIO *, const ASN1_OBJECT *)"],
"TS_ext_print_bio":["int","(BIO *, const struct stack_st_X509_EXTENSION *)"],
"TS_X509_ALGOR_print_bio":["int","(BIO *, const X509_ALGOR *)"],
"TS_MSG_IMPRINT_print_bio":["int","(BIO *, TS_MSG_IMPRINT *)"],
"TS_CONF_load_cert":["X509 *","(const char *)"],
"TS_CONF_load_certs":["struct stack_st_X509 *","(const char *)"],
"TS_CONF_load_key":["EVP_PKEY *","(const char *, const char *)"],
"TS_CONF_get_tsa_section":["const char *","(CONF *, const char *)"],
"TS_CONF_set_serial":["int","(CONF *, const char *, TS_serial_cb, TS_RESP_CTX *)"],
"TS_CONF_set_crypto_device":["int","(CONF *, const char *, const char *)"],
"TS_CONF_set_default_engine":["int","(const char *)"],
"TS_CONF_set_signer_cert":["int","(CONF *, const char *, const char *, TS_RESP_CTX *)"],
"TS_CONF_set_certs":["int","(CONF *, const char *, const char *, TS_RESP_CTX *)"],
"TS_CONF_set_signer_key":["int","(CONF *, const char *, const char *, const char *, TS_RESP_CTX *)"],
"TS_CONF_set_signer_digest":["int","(CONF *, const char *, const char *, TS_RESP_CTX *)"],
"TS_CONF_set_def_policy":["int","(CONF *, const char *, const char *, TS_RESP_CTX *)"],
"TS_CONF_set_policies":["int","(CONF *, const char *, TS_RESP_CTX *)"],
"TS_CONF_set_digests":["int","(CONF *, const char *, TS_RESP_CTX *)"],
"TS_CONF_set_accuracy":["int","(CONF *, const char *, TS_RESP_CTX *)"],
"TS_CONF_set_clock_precision_digits":["int","(CONF *, const char *, TS_RESP_CTX *)"],
"TS_CONF_set_ordering":["int","(CONF *, const char *, TS_RESP_CTX *)"],
"TS_CONF_set_tsa_name":["int","(CONF *, const char *, TS_RESP_CTX *)"],
"TS_CONF_set_ess_cert_id_chain":["int","(CONF *, const char *, TS_RESP_CTX *)"],
"TS_CONF_set_ess_cert_id_digest":["int","(CONF *, const char *, TS_RESP_CTX *)"],
"sk_OPENSSL_PSTRING_num":["int","(const struct stack_st_OPENSSL_PSTRING *)"],
"sk_OPENSSL_PSTRING_value":["OPENSSL_STRING *","(const struct stack_st_OPENSSL_PSTRING *, int)"],
"sk_OPENSSL_PSTRING_new":["struct stack_st_OPENSSL_PSTRING *","(sk_OPENSSL_PSTRING_compfunc)"],
"sk_OPENSSL_PSTRING_new_null":["struct stack_st_OPENSSL_PSTRING *","()"],
"sk_OPENSSL_PSTRING_new_reserve":["struct stack_st_OPENSSL_PSTRING *","(sk_OPENSSL_PSTRING_compfunc, int)"],
"sk_OPENSSL_PSTRING_reserve":["int","(struct stack_st_OPENSSL_PSTRING *, int)"],
"sk_OPENSSL_PSTRING_free":["void","(struct stack_st_OPENSSL_PSTRING *)"],
"sk_OPENSSL_PSTRING_zero":["void","(struct stack_st_OPENSSL_PSTRING *)"],
"sk_OPENSSL_PSTRING_delete":["OPENSSL_STRING *","(struct stack_st_OPENSSL_PSTRING *, int)"],
"sk_OPENSSL_PSTRING_delete_ptr":["OPENSSL_STRING *","(struct stack_st_OPENSSL_PSTRING *, OPENSSL_STRING *)"],
"sk_OPENSSL_PSTRING_push":["int","(struct stack_st_OPENSSL_PSTRING *, OPENSSL_STRING *)"],
"sk_OPENSSL_PSTRING_unshift":["int","(struct stack_st_OPENSSL_PSTRING *, OPENSSL_STRING *)"],
"sk_OPENSSL_PSTRING_pop":["OPENSSL_STRING *","(struct stack_st_OPENSSL_PSTRING *)"],
"sk_OPENSSL_PSTRING_shift":["OPENSSL_STRING *","(struct stack_st_OPENSSL_PSTRING *)"],
"sk_OPENSSL_PSTRING_pop_free":["void","(struct stack_st_OPENSSL_PSTRING *, sk_OPENSSL_PSTRING_freefunc)"],
"sk_OPENSSL_PSTRING_insert":["int","(struct stack_st_OPENSSL_PSTRING *, OPENSSL_STRING *, int)"],
"sk_OPENSSL_PSTRING_set":["OPENSSL_STRING *","(struct stack_st_OPENSSL_PSTRING *, int, OPENSSL_STRING *)"],
"sk_OPENSSL_PSTRING_find":["int","(struct stack_st_OPENSSL_PSTRING *, OPENSSL_STRING *)"],
"sk_OPENSSL_PSTRING_find_ex":["int","(struct stack_st_OPENSSL_PSTRING *, OPENSSL_STRING *)"],
"sk_OPENSSL_PSTRING_sort":["void","(struct stack_st_OPENSSL_PSTRING *)"],
"sk_OPENSSL_PSTRING_is_sorted":["int","(const struct stack_st_OPENSSL_PSTRING *)"],
"sk_OPENSSL_PSTRING_dup":["struct stack_st_OPENSSL_PSTRING *","(const struct stack_st_OPENSSL_PSTRING *)"],
"sk_OPENSSL_PSTRING_deep_copy":["struct stack_st_OPENSSL_PSTRING *","(const struct stack_st_OPENSSL_PSTRING *, sk_OPENSSL_PSTRING_copyfunc, sk_OPENSSL_PSTRING_freefunc)"],
"sk_OPENSSL_PSTRING_set_cmp_func":["sk_OPENSSL_PSTRING_compfunc","(struct stack_st_OPENSSL_PSTRING *, sk_OPENSSL_PSTRING_compfunc)"],
"TXT_DB_read":["TXT_DB *","(BIO *, int)"],
"TXT_DB_write":["long","(BIO *, TXT_DB *)"],
"TXT_DB_create_index":["int","(TXT_DB *, int, int (*)(OPENSSL_STRING *), OPENSSL_LH_HASHFUNC, OPENSSL_LH_COMPFUNC)"],
"TXT_DB_free":["void","(TXT_DB *)"],
"TXT_DB_get_by_index":["OPENSSL_STRING *","(TXT_DB *, int, OPENSSL_STRING *)"],
"TXT_DB_insert":["int","(TXT_DB *, OPENSSL_STRING *)"],
"WHIRLPOOL_Init":["int","(WHIRLPOOL_CTX *)"],
"WHIRLPOOL_Update":["int","(WHIRLPOOL_CTX *, const void *, int)"],
"WHIRLPOOL_BitUpdate":["void","(WHIRLPOOL_CTX *, const void *, int)"],
"WHIRLPOOL_Final":["int","(unsigned char *, WHIRLPOOL_CTX *)"],
"WHIRLPOOL":["unsigned char *","(const void *, int, unsigned char *)"],

  }

